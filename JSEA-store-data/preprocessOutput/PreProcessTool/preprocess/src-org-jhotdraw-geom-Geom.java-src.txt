geom 2 2 2006 07 04 1996 2006 disclose accordance ??? geom geom some geometric utilities 2 2 2006 07 04 grow rectangle2 d <br>2 1 2006 01 20 support precision coordinates enhanced geom geom never instantiated tests point on line line contains point x1 y1 x2 y2 px py line contains point x1 y1 x2 y2 px py 3d tests point on line <p>changed 2003 11 26 line contains point x1 y1 x2 y2 px py tolerance rectangle r = rectangle point x1 y1 r add x2 y2 r grow math 2 math ceil tolerance math 2 math ceil tolerance ! r contains px py b x y x1 == x2 math abs px x1 <= tolerance y1 == y2 math abs py y1 <= tolerance = y1 y2 x1 x2 b = y1 x1 x = py b y = px + b math math abs x px math abs y py <= tolerance tests point on line <p>changed 2003 11 26 line contains point x1 y1 x2 y2 px py tolerance rectangle2 d r = rectangle2 d x1 y1 0 0 r add x2 y2 grow = math 2 math ceil tolerance r x = grow r y = grow r width += grow 2 r height += grow 2 ! r contains px py b x y x1 == x2 math abs px x1 <= tolerance y1 == y2 math abs py y1 <= tolerance = y1 y2 x1 x2 b = y1 x1 x = py b y = px + b math math abs x px math abs y py <= tolerance bitmask indicates point lies above rectangle o u t t o p = rectangle2 d o u t t o p bitmask indicates point lies below rectangle o u t b o t t o m = rectangle2 d o u t b o t t o m bitmask indicates point lies left rectangle o u t l e f t = rectangle2 d o u t l e f t bitmask indicates point lies right rectangle o u t r i g h t = rectangle2 d o u t r i g h t direction o u t t o p o u t b o t t o m o u t l e f t o u t r i g h t one point another one direction x1 y1 x2 y2 direction = 0 vx = x2 x1 vy = y2 y1 vy < vx vx > vy direction = o u t r i g h t vy > vx vy > vx direction = o u t t o p vx < vy vx < vy direction = o u t l e f t direction = o u t b o t t o m direction direction o u t t o p o u t b o t t o m o u t l e f t o u t r i g h t one point another one direction x1 y1 x2 y2 direction = 0 vx = x2 x1 vy = y2 y1 vy < vx vx > vy direction = o u t r i g h t vy > vx vy > vx direction = o u t t o p vx < vy vx < vy direction = o u t l e f t direction = o u t b o t t o m direction computes binary o r appropriate mask values indicating each side rectangle r1 whether rectangle r2 on same side edge rest rectangle logical o r appropriate out codes o u t r i g h t o u t l e f t o u t b o t t o m o u t t o p outcode rectangle r1 rectangle r2 outcode = 0 r2 x > r1 x + r1 width outcode = o u t r i g h t r2 x + r2 width < r1 x outcode = o u t l e f t r2 y > r1 y + r1 height outcode |= o u t b o t t o m r2 y + r2 height < r1 y outcode |= o u t t o p outcode computes binary o r appropriate mask values indicating each side rectangle r1 whether rectangle r2 on same side edge rest rectangle logical o r appropriate out codes o u t r i g h t o u t l e f t o u t b o t t o m o u t t o p outcode rectangle2 d r1 rectangle2 d r2 outcode = 0 r2 x > r1 x + r1 width outcode = o u t r i g h t r2 x + r2 width < r1 x outcode = o u t l e f t r2 y > r1 y + r1 height outcode |= o u t b o t t o m r2 y + r2 height < r1 y outcode |= o u t t o p outcode point south rectangle r point r x + r width 2 r y + r height point2 d south rectangle2 d r point2 d r x + r width 2 r y + r height point center rectangle r point r x + r width 2 r y + r height 2 point2 d center rectangle2 d r point2 d r x + r width 2 r y + r height 2 point on edge bezier path which crosses line center bezier path specified point edge crosses line nearest c0 control point point2 d chop shape shape point2 d p rectangle2 d bounds = shape get bounds2 d point2 d ctr = point2 d bounds get center x bounds get center y chopped point cx = 1 cy = 1 len = m x v l u e points along edge path iterator i = shape get path iterator affine transform 1 coords = 6 type = i current segment coords prev x = coords 0 prev y = coords 1 move x = prev x move y = prev y i next ! i done i next i current segment coords path iterator s e g m o v e t o move x = coords 0 move y = coords 1 path iterator s e g l o s e coords 0 = move x coords 1 = move y point2 d chop = geom intersect prev x prev y coords 0 coords 1 p x p y ctr x ctr y chop != cl = geom length2 chop x chop y p x p y cl < len len = cl cx = chop x cy = chop y prev x = coords 0 prev y = coords 1 closed size > 1 node first = get 0 node last = get size 1 point2 d chop = geom intersect first x 0 first y 0 last x 0 last y 0 p x p y ctr x ctr y chop != cl = geom length2 chop x chop y p x p y cl < len len = cl cx = chop x cy = chop y none found pick closest vertex len == m x v l u e i = shape get path iterator affine transform 1 ! i done i next i current segment coords l = geom length2 ctr x ctr y coords 0 coords 1 l < len len = l cx = coords 0 cy = coords 1 point2 d cx cy point west rectangle r point r x r y + r height 2 point2 d west rectangle2 d r point2 d r x r y + r height 2 point east rectangle r point r x+r width r y + r height 2 point2 d east rectangle2 d r point2 d r x+r width r y + r height 2 point north rectangle r point r x+r width 2 r y point2 d north rectangle2 d r point2 d r x+r width 2 r y constains value given range constrained value range value value < value = value > value = value constains value given range constrained value range value value < value = value > value = value gets square distance between two points length2 x1 y1 x2 y2 x2 x1 x2 x1 + y2 y1 y2 y1 gets distance between points length x1 y1 x2 y2 math sqrt length2 x1 y1 x2 y2 gets square distance between two points length2 x1 y1 x2 y2 x2 x1 x2 x1 + y2 y1 y2 y1 gets distance between points length x1 y1 x2 y2 math sqrt length2 x1 y1 x2 y2 gets distance between points length point2 d p1 point2 d p2 math sqrt length2 p1 x p1 y p2 x p2 y caps line defined p1 p2 number units specified radius end point line point2 d cap point2 d p1 point2 d p2 radius angle = math p i 2 math atan2 p2 x p1 x p2 y p1 y point2 d p3 = point2 d p2 x + radius math cos angle p2 y + radius math sin angle p3 gets angle point relative rectangle point angle rectangle r point p px = p x r x + r width 2 py = p y r y + r height 2 math atan2 py r width px r height gets angle point relative rectangle point angle rectangle2 d r point2 d p px = p x r x + r width 2 py = p y r y + r height 2 math atan2 py r width px r height gets angle specified line angle x1 y1 x2 y2 math atan2 y2 y1 x2 x1 gets point on rectangle corresponds given angle point angle point rectangle r angle si = math sin angle co = math cos angle e = 0 0001 x= 0 y= 0 math abs si > e x= 1 0 + co math abs si 2 0 r width x= range 0 r width x co >= 0 0 x= r width math abs co > e y= 1 0 + si math abs co 2 0 r height y= range 0 r height y si >= 0 0 y= r height point r x + x r y + y gets point on rectangle corresponds given angle point2 d angle point rectangle2 d r angle si = math sin angle co = math cos angle e = 0 0001 x= 0 y = 0 math abs si > e x= 1 0 + co math abs si 2 0 r width x = range 0 r width x co >= 0 0 x = r width math abs co > e y = 1 0 + si math abs co 2 0 r height y = range 0 r height y si >= 0 0 y = r height point2 d r x + x r y + y converts polar point point polar point angle fx fy si = math sin angle co = math cos angle point fx co+0 5 fy si+0 5 converts polar point point2 d polar point2 d angle fx fy si = math sin angle co = math cos angle point2 d fx co+0 5 fy si+0 5 gets point on oval corresponds given angle point oval angle point rectangle r angle point center = geom center r point p = geom polar point angle r width 2 r height 2 point center x + p x center y + p y gets point on oval corresponds given angle point2 d oval angle point rectangle2 d r angle point2 d center = geom center r point2 d p = geom polar point2 d angle r width 2 r height 2 point2 d center x + p x center y + p y standard line intersection algorithm point intersection doug lea s polygon figure point intersect xa line 1 point 1 x ya line 1 point 1 y xb line 1 point 2 x yb line 1 point 2 y xc line 2 point 1 x yc line 2 point 1 y xd line 2 point 2 x yd line 2 point 2 y http vision dai ed ac uk andrewfg g faq html eq lines b d y y x d x x x y d y r = eqn 1 x b x y d y y b y x d x y y x b x x x y b y s = eqn 2 x b x y d y y b y x d x x i = x + r x b x y i = y + r y b y denom = xb xa yd yc yb ya xd xc rnum = ya yc xd xc xa xc yd yc denom == 0 0 parallel rnum == 0 0 coincident pick one end first line xa < xb xb < xc || xb < xd || xa > xb xb > xc || xb > xd point xb yb point xa ya r = rnum denom snum = ya yc xb xa xa xc yb ya s = snum denom 0 0 <= r r <= 1 0 0 0 <= s s <= 1 0 px = xa + xb xa r py = ya + yb ya r point px py standard line intersection algorithm point intersection doug lea s polygon figure point2 d intersect xa line 1 point 1 x ya line 1 point 1 y xb line 1 point 2 x yb line 1 point 2 y xc line 2 point 1 x yc line 2 point 1 y xd line 2 point 2 x yd line 2 point 2 y http vision dai ed ac uk andrewfg g faq html eq lines b d y y x d x x x y d y r = eqn 1 x b x y d y y b y x d x y y x b x x x y b y s = eqn 2 x b x y d y y b y x d x x i = x + r x b x y i = y + r y b y denom = xb xa yd yc yb ya xd xc rnum = ya yc xd xc xa xc yd yc denom == 0 0 parallel rnum == 0 0 coincident pick one end first line xa < xb xb < xc || xb < xd || xa > xb xb > xc || xb > xd point2 d xb yb point2 d xa ya r = rnum denom snum = ya yc xb xa xa xc yb ya s = snum denom 0 0 <= r r <= 1 0 0 0 <= s s <= 1 0 px = xa + xb xa r py = ya + yb ya r point2 d px py point2 d intersect xa line 1 point 1 x ya line 1 point 1 y xb line 1 point 2 x yb line 1 point 2 y xc line 2 point 1 x yc line 2 point 1 y xd line 2 point 2 x yd limit line 2 point 2 y http vision dai ed ac uk andrewfg g faq html eq lines b d y y x d x x x y d y r = eqn 1 x b x y d y y b y x d x y y x b x x x y b y s = eqn 2 x b x y d y y b y x d x x i = x + r x b x y i = y + r y b y denom = xb xa yd yc yb ya xd xc rnum = ya yc xd xc xa xc yd yc denom == 0 0 parallel rnum == 0 0 coincident pick one end first line xa < xb xb < xc || xb < xd || xa > xb xb > xc || xb > xd point2 d xb yb point2 d xa ya r = rnum denom snum = ya yc xb xa xa xc yb ya s = snum denom 0 0 <= r r <= 1 0 0 0 <= s s <= 1 0 px = xa + xb xa r py = ya + yb ya r point2 d px py px = xa + xb xa r py = ya + yb ya r length xa ya px py <= limit || length xb yb px py <= limit || length xc yc px py <= limit || length xd yd px py <= limit point2 d px py compute distance point line segment m x v l u e perpendicular projection outside segment pts on line are same distance point doug lea s polygon figure distance line xa ya xb yb xc yc http vision dai ed ac uk andrewfg g faq html#q7 let point x y line b x y x b y b length line segment b l | 2 2 l = \| x b x + y b y y y y y b x x x b x r = l 2 y y x b x x x y b y s = l 2 let i point perpendicular projection onto b x i= x a+r x b x y i= y a+r y b y distance i = r l distance i = s l r < 0 i on backward extension b r>1 i on ahead extension b 0<=r<=1 i on b s < 0 left b just check numerator s>0 right b s=0 on b xdiff = xb xa ydiff = yb ya l2 = xdiff xdiff + ydiff ydiff l2 == 0 geom length xa ya xc yc rnum = ya yc ya yb xa xc xb xa r = rnum l2 r < 0 0 || r > 1 0 m x v l u e xi = xa + r xdiff yi = ya + r ydiff xd = xc xi yd = yc yi math sqrt xd xd + yd yd directional instead snum = ya yc xb xa xa xc yb ya s = snum l2 l = math sqrt l2 = s l resizes <code> rectangle2 d double< code> both horizontally vertically <p> modifies <code> rectangle2 d double< code> so <code>h< code> units larger on both left right side <code>v< code> units larger at both top bottom <p> <code> rectangle2 d double< code> has <code>x h< code> <code>y v< code> top left corner width <code>width< code> <code>+< code> <code>2h< code> height <code>height< code> <code>+< code> <code>2v< code> <p> negative values are supplied <code>h< code> <code>v< code> size <code> rectangle2 d double< code> decreases accordingly <code>grow< code> does check whether resulting values <code>width< code> <code>height< code> are non negative h horizontal expansion v vertical expansion grow rectangle2 d r h v r x = h r y = v r width += h 2d r height += v 2d 