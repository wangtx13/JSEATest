xml nano xml $ revision 1 4 $ $ date 2002 03 24 11 37 51 $ $ r e l e s e 2 2 1 $ nano xml 2 2000 2002 purpose 1 2 3 net n3 io i o io output stream io io iterator vector xml writes xml data stream see net n3 i xml element see io author $ r e l e s e 2 2 1 $ $ revision 1 4 $ xml where write output creates xml where write output xml = = creates xml stream where write output xml output stream stream = stream cleans up when s destroyed finalize throwable = finalize writes xml element xml non xml element write write i xml element xml i o write xml 0 writes xml element xml non xml element write pretty spaces need inserted make output more readable write i xml element xml pretty i o write xml pretty 0 writes xml element xml non xml element write pretty spaces need inserted make output more readable indent how many spaces indent element write i xml element xml pretty indent i o write xml pretty indent writes xml element xml non xml element write pretty spaces need inserted make output more readable indent how many spaces indent element write i xml element xml pretty indent collapse empty elements i o pretty i = 0 i < indent i++ xml get == xml get content != pretty write encoded xml get content trim write encoded xml get content < xml get full vector nsprefixes = vector xml get namespace != xml get equals xml get full xmlns=\ + xml get namespace + prefix = xml get full prefix = prefix substring 0 prefix index nsprefixes add element prefix xmlns + prefix =\ + xml get namespace + \ iterator enm = xml iterate attribute names enm has next key = enm next index = key index index >= 0 namespace = xml get attribute namespace key namespace != prefix = key substring 0 index ! nsprefixes contains prefix xmlns + prefix =\ + namespace + nsprefixes add element prefix enm = xml iterate attribute names enm has next key = enm next value = xml get attribute key + key + =\ write encoded value xml get content != xml get content length > 0 > write encoded xml get content < + xml get full + > pretty xml has children || ! collapse empty elements > pretty enm = xml iterate children enm has next i xml element child = i xml element enm next write child pretty indent + 4 collapse empty elements pretty i = 0 i < indent i++ < + xml get full + > pretty > pretty flush writes encoding str write write encoded str i = 0 i < str length i++ = str at i 0x0 < lt > amp \ apos < || > 0x7 e #x 16 