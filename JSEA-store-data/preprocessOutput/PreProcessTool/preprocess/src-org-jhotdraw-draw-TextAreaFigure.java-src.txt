text area figure 2 0 1 2006 02 27 1996 2006 disclose accordance ??? draw font geom text io draw attribute keys geom xml dom input xml dom output text area figure contains formatted text <br> automatically rearranges text fit allocated display area breaking lines at word boundaries whenever possible <br> text contain either l f r l f sequences separate paragraphs well tab table like formatting alignment <br> currently tabs are distributed at regular intervals determined tab size property tabs align correctly either fixed variable fonts <br> when resizing vertical size display box enough display text text area figure displays dashed red line at bottom figure indicate there hidden text <br> text are figure uses standard attributes area rectangle2 d ie fill color pen color border font size font style font well four additional attributes left margin right margin top margin tab size <br> <p> x x x text area figure should draw rectangle on own rather rely on decorator we probably need decorator connector we need way specify inner bounds decorator we also need way center text text area figure verticaly horizontaly author eduardo francos context derived 2 0 1 2006 02 27 draw u n d e r l i n e l o o n e p i x e l instead u n d e r l i n e o n <br>2 0 2006 01 14 support coordinates <br>1 0 5 m???rz 2004 created text area figure attributed figure text holder rectangle2 d bounds = rectangle2 d editable = basic stroke dashes = basic stroke 1f basic stroke p b u t t basic stroke j o i n b e v e l 0f 4f 4f 0f cache text figure s layout text layout text layout creates instance text area figure text text area figure text set text text gets text shown text figure get text get attribute t e x t sets text shown text figure set text text set attribute t e x t text basic set bounds point2 d anchor point2 d bounds x = math anchor x x bounds y = math anchor y y bounds width = math 1 math abs x anchor x bounds height = math 1 math abs y anchor y text layout = basic transform affine transform tx point2 d anchor = get start point point2 d = get end point basic set bounds point2 d tx transform anchor anchor point2 d tx transform contains point2 d p bounds contains p insets used draw text insets2 d get insets sw = math ceil s t r o k e t h get 2 insets2 d insets = insets2 d 4 4 4 4 insets2 d insets top+sw insets left+sw insets bottom+sw insets right+sw get tab size 8 draw text graphics2 d g get text != || editable font font = get font underlined = f o n t u n d e r l i n e d get insets2 d insets = get insets rectangle2 d text rect = rectangle2 d bounds x + insets left bounds y + insets top bounds width insets left insets right bounds height insets top insets bottom left margin = text rect x right margin = math left margin + 1 text rect x + text rect width vertical pos = text rect y left margin < right margin tab width = get tab size g get font metrics font width m tab stops = text rect width tab width i=0 i < tab stops length i++ tab stops i = text rect x + tab width i + 1 get text != shape saved clip area = g get clip g clip text rect paragraphs = get text split strings split get text i = 0 i < paragraphs length i++ paragraphs i length == 0 paragraphs i = attributed = attributed paragraphs i add attribute text attribute f o n t font underlined add attribute text attribute u n d e r l i n e text attribute u n d e r l i n e l o o n e p i x e l tab count = tokenizer paragraphs i count tokens 1 vertical pos = draw paragraph g get iterator vertical pos left margin right margin tab stops tab count vertical pos > text rect y + text rect height g set clip saved clip area left margin >= right margin || vertical pos > text rect y + text rect height g set color color red g set stroke dashes g draw line2 d text rect x text rect y + text rect height 1 text rect x + text rect width 1 text rect y + text rect height 1 draws paragraph text at specified y location y position next paragraph draw paragraph graphics2 d g attributed character iterator styled text vertical pos left margin right margin tab stops tab count assume styled text attributed character iterator number tabs styled text tab count tab locations = tab count+1 i = 0 = styled text first != styled text d o n e = styled text next == tab locations i++ = styled text get index tab locations tab count = styled text get end index 1 now tab locations has entry every tab s offset text convenience last entry tab locations offset last character text line measurer measurer = line measurer styled text get font render context current tab = 0 measurer get position < styled text get end index lay out draw each line segments on line computed before drawing occur since we know largest ascent on line text layouts are computed stored list their horizontal positions are stored parallel list line contains text after first segment drawn line contains text = line complete = ascent = 0 descent = 0 horizontal pos = left margin linked list< text layout> layouts = linked list< text layout> linked list< float> pen positions = linked list< float> !line complete wrapping width = right margin horizontal pos text layout layout = layout = measurer next layout wrapping width tab locations current tab +1 line contains text layout line contains text layout != layouts add layout pen positions add horizontal pos horizontal pos += layout get advance ascent = math ascent layout get ascent descent = math descent layout get descent + layout get leading line complete = line contains text = measurer get position == tab locations current tab +1 current tab++ measurer get position == styled text get end index line complete = tab stops length == 0 || horizontal pos >= tab stops tab stops length 1 line complete = !line complete move next tab stop j j=0 horizontal pos >= tab stops j j++ horizontal pos = tab stops j vertical pos += ascent iterator< text layout> layout = layouts iterator iterator< float> position = pen positions iterator now iterate through layouts draw them layout has next text layout next layout = layout next next position = position next next layout draw g next position vertical pos vertical pos += descent vertical pos draw fill graphics2 d g g fill bounds draw stroke graphics2 d g g draw bounds rectangle2 d get bounds rectangle2 d bounds get bounds2 d collection< handle> create handles detail level linked list< handle> handles = linked list< handle> create handles detail level detail level == 0 handles add font size handle handles validate validate text layout = editable editable set editable b editable = b get text columns get text == ? 4 math get text length 4 specialized tool given coordinate <p> specialized tool available tool get tool point2 d p editable contains p ? text area tool read bounds dom input i o bounds x = get attribute x 0d bounds y = get attribute y 0d bounds width = get attribute 0d bounds height = get attribute h 0d write bounds dom output out i o out add attribute x bounds x out add attribute y bounds y out add attribute bounds width out add attribute h bounds height read dom input i o read bounds read attributes text layout = write dom output out i o write bounds out write attributes out text area figure clone text area figure = text area figure clone bounds = rectangle2 d bounds clone text holder get label restore geometry rectangle2 d r = rectangle2 d geometry bounds x = r x bounds y = r y bounds width = r width bounds height = r height get restore data bounds clone font get font attribute keys get font color get text color t e x t o l o r get color get fill color f i l l o l o r get set font size size f o n t s i z e set size get font size f o n t s i z e get value 