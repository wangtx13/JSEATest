/* * @ # figure 3 0 2006 01 20 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * */package draw * beans * * geom * event * * * undo * event * io * geom * xml dom storable /** * the of a graphical figure * <p> * a figure knows its display box and can draw itself a figure can be composed * of several figures to interact and manipulate with a figure it can provide * handles and connectors * <p> * a figure has a set of handles to manipulate its shape or attributes a figure * has one or more connectors that define how to locate a connection point * <p> * figures can have an open ended set of attributes an attribute is identified * by an attribute key * <p> * implementations the figure are provided by * figure * * @author werner randelshofer * @version 3 0 2006 01 20 reworked j2 s e 1 5 */public figure cloneable serializable dom storable { d r a w i n g /** * draws the figure and its decorator figure * * @param g the graphics2 d to draw to */ draw graphics2 d g /** * gets the layer of the figure * the layer is used to determine the z ordering of a figure inside of a * drawing figures with a higher layer number are drawn after figures * with a lower number * the z order of figures within the same layer is determined by the * sequence the figures were added to a drawing figures added later to * a drawn after figures which have been added before * a figure changes its layer it must fire a * <code> figure listener figure changed</code> event to * its figure listeners * * f i x m e replace value by a layer */ get layer /** * a figure is only drawn by a drawing and by composite figure it is visible * layouter's should ignore invisible figures too */ is visible /** * changes the visible state of the figure * <p> * the figure fires <code> figure listener figure changed</code> and * <code> undoable edit listener undoable edit happened</code> * operation changed its visible state </li> * </ul> */ set visible value b o u n d s /** * sets the logical bounds of the figure and of its decorator figure * <p> * is used by tool's which create a figure and by tool's which * connect a figure to another figure * <p> * is a basic operation which does not fire events * * @param start the start point of the bounds * @param end the end point of the bounds * @see #get bounds */ basic set bounds point2 d start point2 d end /** * the start point of the bounds * * * @see #basic set bounds */ point2 d get start point /** * the end point of the bounds * * * @see #basic set bounds */ point2 d get end point /** * the logical bounds of the figure as a rectangle * the logical bounds are used by some handle adjusting the * figure */ rectangle2 d get bounds /** * the drawing bounding box of the figure and of its decorator figure * takes line width line caps and other decorations into account * note get draw bounds must include the logical bounds of the figure */ rectangle2 d get draw bounds /** * the preferred size is used by layouter to determine the preferred * size of a figure most figure's is the same as the * dimensions by get bounds */ dimension2 d get preferred size /** * gets data which can be used to restore the shape of the figure after a * basic transform has been applied to it * * @see #basic transform affine transform */ get restore data /** * restores the shape of the figure to a previously stored state */ restore to restore data /** * transforms the shape of the figure transformations using * precision arithmethics are inherently lossy operations therefore it is * recommended to use get restore data restore to to provide lossless * undo/redo functionality * after the transform has finished the bounds of the decorator figure * are changed to match the transformed bounds of the figure * <p> * is a basic operation which does not fire events * * @param tx the transformation */ basic transform affine transform tx a t t r i b u t e s /** * sets an attribute of the figure * attribute key name and semantics are defined by the implementing * the figure * <p> * on an attribute change the figure fires * <code> figure listener figure attribute changed</code> * <code> undoable edit listener undoable edit happened</code> * the shape is affected by an attribute change * <code> figure listener figure changed</code> is fired too */ set attribute attribute key key value /** * sets an attribute of the figure without firing events * attribute key name and semantics are defined by the implementing * the figure * <p> * use <code> attribute key set </code> typesafe access to * * @see attribute key#set */ basic set attribute attribute key key value /** * gets an attribute from the figure * <p> * use <code> attribute key get </code> typesafe access to * * @see attribute key#get * * @return the attribute value the figure does not have an * attribute with the specified key key get value */ get attribute attribute key key /** * a view to all attributes of figure * by convention an unmodifiable map is */ map< attribute key object> get attributes e d i t i n g /** * the user can manipulate figure * operation tool's should not interact with * figure */ is interactive /** * checks a point is contained by the figure * <p> * is used hit testing by tool's */ contains point2 d p /** * creates handles used to manipulate the figure * * @param detail level the detail level of the handles usually is 0 * bounding box handles and 1 point handles * @return a collection of handles * @see handle */ collection< handle> create handles detail level /** * a cursor the specified location */ cursor get cursor point2 d p /** * a collection of action's the specified location * * <p> the collection may contain entries these entries are used * interpreted as separators in the popup menu * <p> actions can use the property figure a c t i o n s u b m e n u to specify a * submenu */ collection< action> get actions point2 d p /** * a specialized tool the specified location * <p> no specialized tool is available */ tool get tool point2 d p /** * a tooltip the specified location */ get tooltip point2 d p c o n n e c t i n g /** * checks figure can be connected */ can connect /** * gets a connector figure at the given location * a figure can have different connectors at different locations * * @param p the location of the connector * @param prototype the prototype used to create a connection or * unknown allows specific connectors different * connection figures */ connector find connector point2 d p connection figure prototype /** * gets a compatible connector * the provided connector is part of figure the connector * the provided connector is part of another figure a connector * with the same semantics figure * no compatible connector is available */ connector find compatible connector connector c is start connector /** * sets whether the connectors should be visible the * specified courting connector * connectors can be optionally visible */ set connectors visible is visible connection figure courting connection /** * figure draws its connectors */ is connectors visible c o m p o s i t e f i g u r e s /** * checks whether the given figure is contained in figure * a figure includes itself */ includes figure figure /** * the figure that contains the given point */ figure find figure inside point2 d p /** * a decompositon of a figure into its parts * a figure is considered as a part of itself */ collection< figure> get decomposition c l o n i n g /** * a clone of the figure */ clone /** * after cloning a collection of figures the connection figures contained * in collection still connect to the original figures instead of * to the clones * using operation and providing a map which maps from the original * collection of figures to the collection connections can be remapped * to the figures */ remap map< figure figure> old to e v e n t h a n d l i n g /** * informs a figure that it has been added to the specified drawing * the figure must inform all figure listeners that it has been added */ add notify drawing d /** * informs a figure that it has been removed from the specified drawing * the figure must inform all figure listeners that it has been removed */ remove notify drawing d /** * informs that a figure is about to change its shape * <p> * <code>will change</code> and <code>changed</code> are typically used * as pairs before and after invoking one or multiple basic on * the figure */ will change /** * informs that a figure changed its shape * fires a <code> figure listener figure changed</code> * event the current display bounds of the figure * * @see #will change */ changed /** * informs that a figure has invalidated its display area and needs to * be drawn * fires a <code> figure listener area invalidated</code> event */ invalidate /** * fires a <code> figure listener figure request remove</code> event */ request remove /** * handles a drop * * @param p the location of the mouse event * @param dropped figures the dropped figures * @param view the drawing view which is the source of the mouse event * @return the figures should snap back to the location * they were dragged from */ handle drop point2 d p collection< figure> dropped figures drawing view view /** * handles a mouse click * * @param p the location of the mouse event * @param evt the mouse event * @param view the drawing view which is the source of the mouse event * * @return the figure consumed the mouse click */ handle mouse click point2 d p mouse event evt drawing view view /** * adds a listener figure event's */ add figure listener figure listener l /** * removes a listener figure event's */ remove figure listener figure listener l /** * adds a listener undoable edit events */ add undoable edit listener undoable edit listener l /** * removes a listener undoable edit events */ remove undoable edit listener undoable edit listener l /** * sets a decorator figure set to no decorator is desired * the decorator will use the same logical bounds as figure * it will be drawn when the figure is drawn */ set decorator figure value /** * gets the decorator figure */ figure get decorator } 