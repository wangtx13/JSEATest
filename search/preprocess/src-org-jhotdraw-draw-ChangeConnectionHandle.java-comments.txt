/* * @ # change connection handle 2 1 2006 02 16 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * ??? */package draw * * geom * * /** * change connection handle factors the common handles * that can be used to reconnect connections * * @see change connection end handle * @see change connection start handle * * @author werner randelshofer * @version 2 1 2006 02 16 remove liner from connection tracking * <br>2 0 2006 01 14 changed to support coordinates * <br>1 0 2003 12 01 derived from 5 4b1 */public change connection handle handle { connector original target figure target figure connection figure connection point start /** * we temporarily remove the liner from the connection figure the * handle is being moved * we store the liner here and add it back when the user has finished * the interaction */ liner liner /** * initializes the change connection handle */ change connection handle figure owner { owner set connection connection figure owner set target figure } is combinable with handle handle { } /** * the target connector of the change */ connector get target /** * disconnects the connection */ disconnect /** * connect the connection with the given figure */ connect connector c /** * sets the location of the target point */ set location point2 d p /** * the start point of the connection */ point2 d get location /** * gets the side of the connection that is unaffected by * the change */ connector get source { get target == get connection get start connector { get connection get end connector } get connection get start connector } /** * disconnects the connection */ track start point anchor modifiers ex { original target = get target start = anchor liner = connection get liner connection set liner disconnect } /** * finds a target of the connection */ track step point anchor point modifiers ex { point2 d p = view view to drawing figure f = find connectable figure p view get drawing track the figure containing the mouse f != get target figure { get target figure != { get target figure set connectors visible } set target figure f get source == { get target figure != { get target figure set connectors visible get connection } } { get target figure != can connect get source get owner get target figure { get target figure set connectors visible get connection } } } connector target = find connection target p view get drawing target != { p = target get anchor } set location p } /** * connects the figure to the target there is no * target the connection reverts to its original one */ track end point anchor point modifiers ex { point2 d p = view view to drawing connector target = find connection target p view get drawing target == { target = original target } set location p target != original target { disconnect connect target } connection set liner liner get connection update connection get target figure != { get target figure set connectors visible set target figure } } connector find connection target point2 d p drawing drawing { figure target figure = find connectable figure p drawing get source == target figure != { find connector p target figure get connection } { target figure != target figure can connect target figure != original target !target figure includes get owner get connection can connect get source get owner target figure { can connect get source get owner target figure { find connector p target figure get connection } } } can connect figure existing end figure target end connector find connector point2 d p figure f connection figure prototype { f find connector p prototype } /** * draws handle */ draw graphics2 d g { draw circle g get target == ? color red color green color black } figure find connectable figure point2 d p drawing drawing { figure f drawing get figures front to back { ! f includes get connection f can connect f contains p { f } } } set connection connection figure connection { connection = connection } connection figure get connection { connection } set target figure figure target { target figure = target } figure get target figure { target figure } rectangle basic get bounds { connection get point count == 0 rectangle 0 0 get handlesize get handlesize point center = view drawing to view get location rectangle center x get handlesize / 2 center y get handlesize / 2 get handlesize get handlesize } } 