/* * @ # handle 1 0 14 november 2003 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * ??? */package draw collection event * * event * undo * * /** * handle * * @author werner randelshofer * @version 1 0 2003 12 01 derived from 5 4b1 */public handle handle figure listener { figure owner drawing view view event listener list listener list = event listener list /** * the bounds of the handle */ rectangle bounds /** creates a instance */ handle figure owner { owner = owner owner add figure listener } /** f i x m e get form the drawing view */ get handlesize { 7 } /** * adds a listener handle */ add handle listener handle listener l { listener list add handle listener l } /** * removes a listener handle */ remove handle listener handle listener l { listener list remove handle listener l } figure get owner { owner } set view drawing view view { view = view } /** * notify all listener list that have registered interest * notification on event type */ fire area invalidated rectangle invalidated area { handle event event = notify all listeners that have registered interest guaranteed to a non listeners = listener list get listener list process the listeners last to first notifying those that are interested in event i = listeners length 2 i>=0 i =2 { listeners i == handle listener { lazily create the event event == event = handle event invalidated area handle listener listeners i+1 area invalidated event } } } /** * notify all listener list that have registered interest * notification on event type */ fire undoable edit happened undoable edit edit { view get drawing fire undoable edit happened edit /* undoable edit event event = notify all listeners that have registered interest guaranteed to a non listeners = listener list get listener list process the listeners last to first notifying those that are interested in event i = listeners length 2 i>=0 i =2 { listeners i == undoable edit listener { lazily create the event event == event = undoable edit event edit undoable edit listener listeners i+1 undoable edit happened event } }*/ } /** * notify all listener list that have registered interest * notification on event type */ fire handle request remove rectangle invalidated area { handle event event = notify all listeners that have registered interest guaranteed to a non listeners = listener list get listener list process the listeners last to first notifying those that are interested in event i = listeners length 2 i>=0 i =2 { listeners i == handle listener { lazily create the event event == event = handle event invalidated area handle listener listeners i+1 handle request remove event } } } /** * notify all listener list that have registered interest * notification on event type */ fire handle request secondary handles { handle event event = notify all listeners that have registered interest guaranteed to a non listeners = listener list get listener list process the listeners last to first notifying those that are interested in event i = listeners length 2 i>=0 i =2 { listeners i == handle listener { lazily create the event event == event = handle event handle listener listeners i+1 handle request secondary handles event } } } /** * draws handle */ draw graphics2 d g { draw circle g color white color black } draw circle graphics2 d g color fill color stroke { rectangle r = get bounds g set color fill g fill oval r x r y r width r height g set stroke basic stroke g set color stroke g draw oval r x r y r width r height } draw rectangle graphics2 d g color fill color stroke { rectangle r = get bounds g set color fill g fill r g set stroke basic stroke g set color stroke g draw r } draw diamond graphics2 d g color fill color stroke { rectangle r = get bounds r grow 1 1 polygon p = polygon p add point r x + r width / 2 r y p add point r x + r width r y + r height / 2 p add point r x + r width / 2 r y + r height p add point r x r y + r height / 2 p add point r x + r width / 2 r y g set color fill g fill p g set stroke basic stroke g set color stroke g draw p } contains point p { get bounds contains p } invalidate { fire area invalidated get draw bounds } dispose { owner remove figure listener owner = } /** * sent when a region used by the figure needs to be repainted * the of assumes that the handle * is located on the bounds of the figure or inside the figure * the handle is located elsewhere must be reimpleted * by the subclass */ figure area invalidated figure event evt { update bounds } /** * sent when a figure was added */ figure added figure event e { empty } /** * sent when a figure was removed */ figure removed figure event e { empty } /** * sent when a figure requests to be removed */ figure request remove figure event e { empty } /** * sent when the bounds or shape of a figure has changed */ figure changed figure event evt { update bounds } /** * a cursor the handle */ cursor get cursor { cursor get predefined cursor cursor m o v e c u r s o r } /** * the given handle is an instance of the same * or of a subclass of handle */ is combinable with handle handle { get is assignable from handle get } key typed key event evt { } key released key event evt { } key pressed key event evt { } rectangle get bounds { bounds == { bounds = basic get bounds } rectangle bounds clone } rectangle get draw bounds { rectangle r = get bounds r grow 2 2 grow by two pixels to take antialiasing into account r } rectangle basic get bounds update bounds { rectangle bounds = basic get bounds bounds == || ! bounds equals bounds { bounds != fire area invalidated get draw bounds bounds = bounds fire area invalidated get draw bounds } } /** * tracks a click */ track click point p modifiers ex { } figure attribute changed figure event e { } view transform changed { bounds = } collection< handle> create secondary handles { collections empty list }} 