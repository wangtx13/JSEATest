/* * @ # chop diamond connector 1 0 27 m???rz 2006 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * ??? */package draw * geom * draw attribute keys * geom * /** * a chop diamond connector locates connection points by choping the * connection between the centers of the two figures at the edge of * a diamond figure * * @author werner randelshofer * @version 1 0 27 m???rz 2006 created */public chop diamond connector chop box connector { chop diamond connector { only used storable } chop diamond connector figure owner { owner } /** * an appropriate connection point on the edge of a diamond figure */ point2 d chop figure target point2 d from { target = get connector target target rectangle2 d r = target get bounds diamond figure i s q u a d r a t i c get target { side = math max r width r height r x = side r width / 2 r y = side r height / 2 r width = r height = side } growx growy f i x m e is wrong copy correct from diamond figure s t r o k e p l a c e m e n t get target { i n s e { growx = growy = 0f } o u t s e { line length = math sqrt r width * r width + r height * r height scale = get stroke total width target * 2d / line length growx = scale * r height growy = scale * r width growy = get stroke total width * s q r t2 } c e n t e r line length = math sqrt r width * r width + r height * r height scale = get stroke total width target / line length growx = scale * r height growy = scale * r width growx = growy = get stroke total width / 2d * s q r t2 } geom grow r growx growy center point point2 d c1 = point2 d r x + r width/2 r y + r height/2 point2 d p2 = point2 d r x + r width/2 r y + r height point2 d p4 = point2 d r x + r width/2 r y overlapping just the opposite corners r contains from { from y > r y from y < r y +r height/2 { p2 } { p4 } } calculate angle to determine quadrant ang = geom point to angle r from dermine line points point2 d p1 = point2 d r x + r width r y + r height/2 point2 d p3 = point2 d r x r y + r height/2 point2 d rp = will be get the intersection with edges ang > 0 ang < 1 57 { rp = geom intersect p1 x p1 y p2 x p2 y c1 x c1 y from x from y } ang > 1 575 ang < 3 14 { rp = geom intersect p2 x p2 y p3 x p3 y c1 x c1 y from x from y } ang > 3 14 ang < 1 575 { rp = geom intersect p3 x p3 y p4 x p4 y c1 x c1 y from x from y } ang > 1 57 ang < 0 { rp = geom intersect p4 x p4 y p1 x p1 y c1 x c1 y from x from y } no proper edge found we should send one of four corners rp == { rp = geom angle to point r ang } rp }} 