/* * @ # floating palette handler 1 1 2006 06 11 * * copyright c 2005 2006 werner randelshofer * staldenmattweg 2 immensee c h 6405 switzerland * all rights reserved * * software is the confidential and proprietary information of * werner randelshofer confidential information you shall not * disclose such confidential information and shall use it only in * accordance with the terms of the license agreement you entered into * with werner randelshofer */package app * event * prefs * * * /** * hides all registered floating palettes none of the registered project * windows has focus anymore * * @author werner randelshofer * @version 1 1 2006 06 11 palettes can now be any subclass of window * <br>1 0 october 9 2005 created */public o s x palette handler { hash set< window> palettes = hash set< window> hash map< window project> windows = hash map< window project> o s x palette handler instance timer timer o s x application app window focus listener focus handler = window focus listener { /** * invoked when the window is set to be the focused window which means * that the window or one of its subcomponents will receive keyboard * events */ window gained focus window event e { timer stop windows contains key e get window { app set current project project windows get e get window show palettes } } /** * invoked when the window is no longer the focused window which means * that keyboard events will no longer be delivered to the window or any of * its subcomponents */ window lost focus window event e { timer restart } } /** creates a instance */ o s x palette handler o s x application app { app = app timer = timer 60 action listener { action performed action event evt { maybe hide palettes } } timer set repeats } add window window project project { window add window focus listener focus handler windows put window project } remove window window project project { windows remove window window remove window focus listener focus handler } add palette window palette { palette add window focus listener focus handler palettes add palette } remove palette window palette { palettes remove palette palette remove window focus listener focus handler } set< window> get palettes { collections unmodifiable set palettes } show palettes { window palette palettes { ! palette is visible { palette set visible } } } is focused window w { w is focused window owned windows = w get owned windows i=0 i < owned windows length i++ { is focused owned windows i { } } } maybe hide palettes { has focus = window window windows key set { is focused window { has focus = } } ! has focus windows size > 0 { window palette palettes { is focused palette { has focus = } } } ! has focus { window palette palettes { palette set visible } } }} 