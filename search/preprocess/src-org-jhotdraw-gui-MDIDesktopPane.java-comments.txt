/* * @ # m d idesktop pane 1 0 2006 06 17 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * */package gui * event * * beans * app action arrangeable /** * an extension of j desktop pane that supports often used m d i functionality * also handles setting scroll bars when windows move too far to the left or * bottom providing the m d idesktop pane is in a scroll pane * note by dnoyeb i dont know why the container does not fire frame close events when the frames * are removed from the container with remove as opposed to simply closed with the * x so you say remove all from container you wont be notified no biggie * * @author werner randelshofer * original by * wolfram kaiser adapted from an article in world * c l gilbert <dnoyeb@users sourceforge net> * @version 1 0 2006 06 17 */public m d idesktop pane j desktop pane arrangeable { f r a m e o f f s e t=20 m d idesktop manager manager m d idesktop pane { manager = m d idesktop manager set desktop manager manager set drag mode j desktop pane o u t l i n e d r a g m o d e set alignment x j component l e f t a l i g n m e n t } set arrangement arrangeable arrangement value { arrangeable arrangement old value = get arrangement value { c a s c a d e arrange frames cascading h o r i z o n t a l arrange frames horizontally v e r t i c a l arrange frames vertically } fire property change arrangement old value value } arrangeable arrangement get arrangement { f i x m e check the arrangement of the j internal frames here and the value arrangeable arrangement c a s c a d e } /** * cascade all internal frames */ arrange frames cascading { x = 0 y = 0 j internal frame all frames = get all frames nothing no frames to work with all frames length == 0 { } manager set normal size frame height = get bounds height 5 all frames length * f r a m e o f f s e t frame width = get bounds width 5 all frames length * f r a m e o f f s e t i = all frames length 1 i >= 0 i { { all frames i set maximum } property veto e { e print stack trace } all frames i set bounds x y frame width frame height x = x + f r a m e o f f s e t y = y + f r a m e o f f s e t } check desktop size } tile frames horizontally { component all frames = get all frames nothing no frames to work with all frames length == 0 { } manager set normal size frame height = get bounds height/all frames length y = 0 i = 0 i < all frames length i++ { { j internal frame all frames i set maximum } property veto e { e print stack trace } all frames i set bounds 0 y get bounds width frame height y = y + frame height } check desktop size } tile frames vertically { component all frames = get all frames nothing no frames to work with all frames length == 0 { } manager set normal size frame width = get bounds width/all frames length x = 0 i = 0 i < all frames length i++ { { j internal frame all frames i set maximum } property veto e { e print stack trace } all frames i set bounds x 0 frame width get bounds height x = x + frame width } check desktop size } /** * arranges the frames as efficiently as possibly with preference * keeping vertical size maximal <br> * */ arrange frames vertically { component all frames = get all frames nothing no frames to work with all frames length == 0 { } manager set normal size vert frames = math floor math sqrt all frames length hor frames = math ceil math sqrt all frames length first arrange the windows that have equal size frame width = get bounds width / hor frames frame height = get bounds height / vert frames x = 0 y = 0 frame idx = 0 hor cnt = 0 hor cnt < hor frames 1 hor cnt++ { y = 0 vert cnt = 0 vert cnt < vert frames vert cnt++ { { j internal frame all frames frame idx set maximum } property veto e { e print stack trace } all frames frame idx set bounds x y frame width frame height frame idx++ y = y + frame height } x = x + frame width } the rest of the frames are tiled down on the last column with equal height frame height = get bounds height / all frames length frame idx y = 0 frame idx < all frames length frame idx++ { { j internal frame all frames frame idx set maximum } property veto e { e print stack trace } all frames frame idx set bounds x y frame width frame height y = y + frame height } check desktop size } /** * arranges the frames as efficiently as possibly with preference * keeping horizontal size maximal <br> * */ arrange frames horizontally { component all frames = get all frames nothing no frames to work with all frames length == 0 { } manager set normal size vert frames = math ceil math sqrt all frames length hor frames = math floor math sqrt all frames length first arrange the windows that have equal size frame width = get bounds width / hor frames frame height = get bounds height / vert frames x = 0 y = 0 frame idx = 0 vert cnt = 0 vert cnt < vert frames 1 vert cnt++ { x = 0 hor cnt = 0 hor cnt < hor frames hor cnt++ { { j internal frame all frames frame idx set maximum } property veto e { e print stack trace } all frames frame idx set bounds x y frame width frame height frame idx++ x = x + frame width } y = y + frame height } the rest of the frames are tiled down on the last column with equal height frame width = get bounds width / all frames length frame idx x = 0 frame idx < all frames length frame idx++ { { j internal frame all frames frame idx set maximum } property veto e { e print stack trace } all frames frame idx set bounds x y frame width frame height x = x + frame width } check desktop size } /** * sets all component size properties maximum minimum preferred * to the given dimension */ set all size dimension d { set minimum size d set maximum size d set preferred size d set bounds 0 0 d width d height } /** * sets all component size properties maximum minimum preferred * to the given width and height */ set all size width height { set all size dimension width height } check desktop size { get parent != is visible { manager resize desktop } } }/** * used to replace the standard desktop manager j desktop pane * used to provide scrollbar functionality */class m d idesktop manager desktop manager { m d idesktop pane desktop m d idesktop manager m d idesktop pane desktop { desktop = desktop } end resizing frame j component f { end resizing frame f resize desktop } end dragging frame j component f { end dragging frame f resize desktop } set normal size { j scroll pane scroll pane = get scroll pane insets scroll insets = get scroll pane insets scroll pane != { dimension d = scroll pane get visible rect get size scroll pane get border != { d set size d get width scroll insets left scroll insets right d get height scroll insets top scroll insets bottom } d set size d get width 20 d get height 20 desktop set all size d scroll pane invalidate scroll pane validate } } insets get scroll pane insets { j scroll pane scroll pane = get scroll pane scroll pane == || get scroll pane get border == { insets 0 0 0 0 } { get scroll pane get border get border insets scroll pane } } j scroll pane get scroll pane { desktop get parent j viewport { j viewport view port = j viewport desktop get parent view port get parent j scroll pane j scroll pane view port get parent } } resize desktop { x = 0 y = 0 j scroll pane scroll pane = get scroll pane insets scroll insets = get scroll pane insets scroll pane != { j internal frame all frames = desktop get all frames i = 0 i < all frames length i++ { all frames i get x + all frames i get width > x { x = all frames i get x + all frames i get width } all frames i get y + all frames i get height > y { y = all frames i get y + all frames i get height } } dimension d=scroll pane get visible rect get size scroll pane get border != { d set size d get width scroll insets left scroll insets right d get height scroll insets top scroll insets bottom } x <= d get width { x = d get width 20 } y <= d get height { y = d get height 20 } desktop set all size x y scroll pane invalidate scroll pane validate } }} 