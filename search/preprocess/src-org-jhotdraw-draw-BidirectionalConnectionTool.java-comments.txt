/* * @ # bidirectional connection tool 2 0 2006 01 14 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * ??? */package draw * undo * * geom * event * * dnd * /** * a tool that can be used to connect figures to split * connections and to join two segments of a connection * connection tools turns the visibility of the connectors * on when it enters a figure * the connection to be created is specified by a prototype * <p> * f i x m e use a tracker instance each state of tool * * @author werner randelshofer * @version 2 0 2006 01 14 changed to support precision coordinates * <br>1 0 2003 12 01 derived from 5 4b1 */public bidirectional connection tool tool figure listener { map< attribute key object> attributes /** * the anchor point of the interaction */ connector start connector connector end connector connector target connector figure target /** * the currently created figure */ connection figure connection /** * the currently manipulated connection point */ split point /** * the currently edited connection */ connection figure edited connection /** * the figure that was actually added * note can be a different figure from the one which has been created */ figure created figure /** * the prototypical figure that is used to create * connections */ connection figure prototype /** creates a instance */ bidirectional connection tool connection figure prototype { prototype = prototype } bidirectional connection tool connection figure prototype map< attribute key object> attributes { prototype = prototype attributes = attributes } mouse moved mouse event evt { track connectors evt } /** * manipulates connections in a context dependent way the * mouse down hits a figure start a connection the mousedown * hits a connection split a segment or join two segments */ mouse pressed mouse event evt { mouse pressed evt point2 d ap = view to drawing anchor set target figure find connection start ap get drawing get target figure != { set start connector find connector ap target prototype get start connector != prototype can connect get target figure { point2 d p = get start connector get anchor set connection create figure connection figure cf = get connection cf basic set bounds p p cf add figure listener set created figure cf } } } /** * adjust the created connection or split segment */ mouse dragged event mouse event e { point2 d p = view to drawing point e get x e get y get connection != { track connectors e get target connector != { p = get target connector get anchor } get connection set end point p } edited connection != { edited connection set point split point p } } /** * connects the figures the mouse is released over another * figure */ mouse released mouse event e { figure c = point2 d p = view to drawing point e get x e get y get start connector != { c = find target p get drawing } c != { set end connector find connector p c prototype get end connector != { composite edit creation edit = composite edit verbindung erstellen get drawing fire undoable edit happened creation edit get drawing add get connection get connection can connect get start connector get owner get end connector get owner { get connection set start connector get start connector get connection set end connector get end connector } { get connection set start connector get end connector get connection set end connector get start connector } get connection update connection get connection remove figure listener get drawing fire undoable edit happened creation edit } } get connection != { get drawing remove get connection } set connection set start connector set end connector set created figure fire tool done } activate drawing editor editor { activate editor get view clear selection } deactivate drawing editor editor { deactivate editor get target figure != { get target figure set connectors visible } } /** * creates the connection figure by the figure prototype is * cloned */ connection figure create figure { connection figure f = connection figure prototype clone get editor apply attributes to f attributes != { map entry< attribute key object> entry attributes entry set { f set attribute entry get key entry get value } } f } /** * finds a connectable figure target */ figure find source point2 d p drawing drawing { find connectable figure p drawing } /** * finds a connectable figure target */ figure find target point2 d p drawing drawing { figure target = find connectable figure p drawing figure start = get start connector get owner target != get connection != target can connect get connection can connect start target || get connection can connect target start { target } } /** * finds an existing connection figure */ connection figure find connection point2 d p drawing drawing { figure f drawing get figures front to back { figure f inside = f find figure inside p f inside != f inside connection figure { connection figure f inside } } } set connection connection figure connection { connection = connection } /** * gets the connection which is created by tool */ connection figure get connection { connection } track connectors mouse event e { point2 d p = view to drawing point e get x e get y figure c = get start connector == { c = find source p get drawing } { c = find target p get drawing } track the figure containing the mouse c != get target figure { get target figure != { get target figure set connectors visible } set target figure c get start connector != { get target figure != prototype can connect get start connector get owner get target figure || prototype can connect get target figure get start connector get owner { get target figure set connectors visible get connection } } { get target figure != prototype can connect get target figure { get target figure set connectors visible get connection } } } connector cc = c != { cc = find connector p c prototype } cc != get target connector { set target connector cc } view check damage } draw graphics2 d g { created figure != { created figure draw g } } connector find connector point2 d p figure target connection figure f { target find connector p f } /** * finds a connection start figure */ figure find connection start point2 d p drawing drawing { figure target = find connectable figure p drawing target != target can connect { target } } figure find connectable figure point2 d p drawing drawing { drawing find figure except p created figure } set start connector connector start connector { start connector = start connector } connector get start connector { start connector } set end connector connector end connector { end connector = end connector } connector get end connector { end connector } set target connector connector target connector { target connector = target connector } connector get target connector { target connector } set target figure figure target { target = target } figure get target figure { target } /** * gets the figure that was actually added * note can be a different figure from the one which has been created */ figure get created figure { created figure } set created figure figure created figure { created figure = created figure } figure area invalidated figure event evt { fire area invalidated evt get invalidated area } figure added figure event e { } figure changed figure event e { } figure removed figure event e { } figure request remove figure event e { } figure attribute changed figure event e { } } 