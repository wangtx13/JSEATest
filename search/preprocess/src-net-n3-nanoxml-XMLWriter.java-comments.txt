/* xml writer nano xml/ * * $ revision 1 4 $ * $ date 2002/03/24 11 37 51 $ * $ name r e l e a s e 2 2 1 $ * * is part of nano xml 2 * copyright c 2000 2002 marc de scheemaecker all rights reserved * * software is provided 'as is' without any express or implied warranty * in no event will the authors be held liable any damages arising from the * use of software * * permission is granted to anyone to use software any purpose * including commercial applications and to alter it and redistribute it * freely subject to the following restrictions * * 1 the origin of software must not be misrepresented you must not * claim that you wrote the original software you use software in * a product an acknowledgment in the product documentation would be * appreciated but is not required * * 2 altered source versions must be plainly marked as such and must not be * misrepresented as being the original software * * 3 notice may not be removed or altered from any source distribution */package net n3 nanoxml io i o io output stream io print writer io writer iterator vector /** * an xml writer writes xml data to a stream * * @see net n3 nanoxml i xml element * @see io writer * * @author marc de scheemaecker * @version $ name r e l e a s e 2 2 1 $ $ revision 1 4 $ */public xml writer{ /** * where to write the output to */ print writer writer /** * creates a xml writer * * @param writer where to write the output to */ xml writer writer writer { writer print writer { writer = print writer writer } { writer = print writer writer } } /** * creates a xml writer * * @param stream where to write the output to */ xml writer output stream stream { writer = print writer stream } /** * cleans up the when it's destroyed */ finalize throwable { writer = finalize } /** * writes an xml element * * @param xml the non xml element to write */ write i xml element xml i o { write xml 0 } /** * writes an xml element * * @param xml the non xml element to write * @param pretty print spaces need to be inserted to make the output more * readable */ write i xml element xml pretty print i o { write xml pretty print 0 } /** * writes an xml element * * @param xml the non xml element to write * @param pretty print spaces need to be inserted to make the output more * readable * @param indent how many spaces to indent the element */ write i xml element xml pretty print indent i o { write xml pretty print indent } /** * writes an xml element * * @param xml the non xml element to write * @param pretty print spaces need to be inserted to make the output more * readable * @param indent how many spaces to indent the element */ write i xml element xml pretty print indent collapse empty elements i o { pretty print { i = 0 i < indent i++ { writer print ' ' } } xml get name == { xml get content != { pretty print { write encoded xml get content trim writer } { write encoded xml get content } } } { writer print '<' writer print xml get full name vector nsprefixes = vector xml get namespace != { xml get name equals xml get full name { writer print xmlns=\ + xml get namespace + ' ' } { prefix = xml get full name prefix = prefix substring 0 prefix index of ' ' nsprefixes add element prefix writer print xmlns + prefix writer print =\ + xml get namespace + \ } } iterator enm = xml iterate attribute names enm has next { key = enm next index = key index of ' ' index >= 0 { namespace = xml get attribute namespace key namespace != { prefix = key substring 0 index ! nsprefixes contains prefix { writer print xmlns + prefix writer print =\ + namespace + ' ' nsprefixes add element prefix } } } } enm = xml iterate attribute names enm has next { key = enm next value = xml get attribute key writer print + key + =\ write encoded value writer print ' ' } xml get content != xml get content length > 0 { writer print '>' write encoded xml get content writer print </ + xml get full name + '>' pretty print { writer } } xml has children || ! collapse empty elements { writer print '>' pretty print { writer } enm = xml iterate children enm has next { i xml element child = i xml element enm next write child pretty print indent + 4 collapse empty elements } pretty print { i = 0 i < indent i++ { writer print ' ' } } writer print </ + xml get full name + > pretty print { writer } } { writer print /> pretty print { writer } } } writer flush } /** * writes a encoding reserved characters * * @param str the to write */ write encoded str { i = 0 i < str length i++ { c = str at i c { 0x0 a writer print c '<' writer print lt '>' writer print ' ' writer print amp '\'' writer print apos ' ' writer print c < ' ' || c > 0x7 e { writer print #x writer print to c 16 writer print ' ' } { writer print c } } } }} 