/* * @ # project 1 0 october 4 2005 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * */package app io * beans * * /** * a project represents a work space a document or a set of related * documents within an application * * @author werner randelshofer * @version 1 0 october 4 2005 created */public project { /** * gets the application to which project belongs */ application get application /** * sets the application of the project * by convention is only invoked by application add project and * application remove project * is a bound property */ set application application value /** * the visual component of the project */ j component get component /** * the project */ get /** * sets the project * is a bound property */ set value /** * the enabled state of the project */ is enabled /** * sets the enabled state of the project * * the enabled state is used to prevent parallel invocation of actions * on the project an action consists of a sequential part and a * concurrent part it must disable the project only the sequential * part * * actions that act on the project must check in their action performed * whether the project is enabled * the project is disabled they must nothing * the project is enabled they must disable the project * perform the action and then enable the project again * * is a bound property */ set enabled value /** * writes the project to the specified * by convention is never invoked on the a w t event dispatcher thread */ write f i o /** * reads the project from the specified * by convention is never invoked on the a w t event dispatcher thread */ read f i o /** * clears the project */ clear /** * gets the open chooser the project */ j chooser get open chooser /** * gets the save chooser the project */ j chooser get save chooser /** * the project has unsaved changes * is a bound property */ has unsaved changes /** * marks all changes as saved * changes the state of has unsaved changes to */ mark changes as saved /** * executes the specified runnable on the worker thread of the project * execution is perfomred sequentially in the same sequence as the * runnables have been passed to */ execute runnable worker /** * initializes the project * is invoked right before the application shows the project * a project must not consume many resources before init is called * is crucial the responsivenes of an application */ init /** * gets rid of all the resources of the project * no other should be invoked on the project afterwards * a project must not consume many resources after dispose has been called * is crucial the responsivenes of an application */ dispose /** * the action with the specified */ action get action /** * puts an action with the specified */ put action action action /** * adds a property change listener */ add property change listener property change listener l /** * removes a property change listener */ remove property change listener property change listener l /** * sets the multiple open * the is used to help distinguish multiply opened projects * the should be displayed in the title of the project */ set multiple open value /** * the multiple open * a project is open only once should be 1 */ get multiple open /** * is used by application to keep track a project is showing */ is showing /** * is used by application to keep track a project is showing */ set showing value } 