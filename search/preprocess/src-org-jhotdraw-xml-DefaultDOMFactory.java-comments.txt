/* * @ # dom factory 1 0 1 2006 07 05 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * */package xml * /** * dom factory * * @author werner randelshofer * @version 1 0 1 2006 07 05 improved reporting * <br>1 0 june 10 2006 created */public dom factory dom factory { hash map< string> to name map = hash map< string> hash map< object> name to prototype map = hash map< object> hash map< string> to name map = hash map< string> hash map< class> name to map = hash map< class> hash map< string> to value map = hash map< string> hash map< set< enum>> value to map = hash map< set< enum>> /** creates a instance */ dom factory { } /** * adds a dom storable to the dom factory */ add storable name c { name to prototype map put name c to name map put c name } /** * adds a dom storable prototype to the dom factory */ add storable name dom storable prototype { name to prototype map put name prototype to name map put prototype get name } /** * adds an to the dom factory */ add name c { to name map put c name name to map put name c } /** * adds an value to the dom factory */ add value e { to value map put e value set< enum> enums value to map contains key value { enums = value to map get value } { enums = hash set< enum> value to map put value enums } enums add e } /** * creates a dom storable */ create name { o = name to prototype map get name o == { illegal argument storable name not known to factory +name } o { { o instance } e { illegal argument = illegal argument storable not instantiable by factory +name init cause e } } { { o get get clone o } e { illegal argument = illegal argument storable prototype not cloneable by factory name +name init cause e } } } get name dom storable o { name = to name map get o get name == { illegal argument storable not known to factory storable +o+ factory +this get } name } get name e { name = to name map get e get name == { illegal argument not known to factory +e get } name } get value e { to value map contains key e ? to value map get e e to } create name value { = name to map get name == { illegal argument name not known to factory +name } set< enum> enums = value to map get value enums == { value of value } e enums { e get == { e } } illegal argument value not known to factory +value }} 