/* * @ # s v g live connect applet 2 0 2006 01 15 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * */package samples svg draw * draw action * * * geom * event * io * net * * * event * netscape javascript * xml * /** * s v g live connect applet supports loading and saving of images to script * * @author wrandels * @version 2 0 changed to support precision coordinates * <br>1 0 created on 10 m???rz 2004 13 22 */public s v g live connect applet j applet { v e r s i o n = 0 44 n a m e = s v g draw /** initializes the applet draw applet */ init { set look and feel { u i manager set look and feel u i manager get look and feel name } throwable e { nothing we can't set the desired look and feel u i manager does automaticaly the right thing us } display copyright info we are loading the data container c = get content pane c set layout box layout c box layout y a x i s lines = get applet info split \n strings split get applet info '\n' i=0 i < lines length i++ { c add j label lines i } we load the data using a worker thread worker { construct { result { get parameter data != get parameter data length > 0 { nano xml dom input domi = nano xml dom input s v g figure factory reader get parameter data result = domi read 0 } get parameter datafile != { input stream in = { u r l url = u r l get document base get parameter datafile in = url open connection get input stream nano xml dom input domi = nano xml dom input s v g figure factory in result = domi read 0 } { in != in close } } { result = } } throwable t { result = t } result } finished { container c = get content pane c set layout border layout c remove all result = get value init components result != { result drawing { set drawing drawing result } result throwable { get drawing add text figure result to throwable result print stack trace } } is live connect { name netscape javascript j s is live connect = } throwable t { is live connect = } load button set enabled is live connect get parameter dataread != save button set enabled is live connect get parameter datawrite != is live connect { name = get parameter dataread name index of ' ' > 0 { name = name substring 0 name index of ' ' 1 } j s win = j s get window s v g live connect applet data = win call name 0 data { set data data } } c validate } } start } set drawing drawing d { drawing panel set drawing d } drawing get drawing { drawing panel get drawing } set data text { text != text length > 0 { reader in = reader text { nano xml dom input domi = nano xml dom input s v g figure factory in domi open element s v g draw set drawing drawing domi read 0 } throwable e { get drawing clear text figure tf = text figure tf set text e get message tf set bounds point2 d 10 10 point2 d 100 100 get drawing add tf e print stack trace } { in != in close } } } get data { writer out = writer { nano xml dom output domo = nano xml dom output s v g figure factory domo open element s v g draw domo write get drawing domo close element domo save out } i o e { text figure tf = text figure tf set text e get message tf set bounds point2 d 10 10 point2 d 100 100 get drawing add tf e print stack trace } { out != out close } out to } get parameter info { { { data the data to be displayed by applet } { datafile u r l an u r l to a containing the data to be displayed by applet } { dataread function the name of a script function which can be used to read the data } { datawrite function the name of a script function which can be used to write the data } } } get applet info { n a m e+ \n + v e r s i o n + \n\n copyright 2004 \u00a9 werner randelshofer + \n alle rechte vorbehalten + \n\n diese software basiert auf + \n \u00a9 1996 1997 i f a informatik und erich gamma } /** is called from within the init to * initialize the form * w a r n i n g n o t modify the content of is * always regenerated by the form editor */ <editor fold defaultstate= collapsed desc= generated > g e n b e g i n init components init components { tool button group = button group drawing panel = samples draw drawing panel j tool bar1 = j tool bar load button = j button save button = j button get content pane add drawing panel border layout c e n t e r j tool bar1 set floatable load button set text laden load button add action listener event action listener { action performed event action event evt { load evt } } j tool bar1 add load button save button set text speichern save button add action listener event action listener { action performed event action event evt { save evt } } j tool bar1 add save button get content pane add j tool bar1 border layout s o u t h } </editor fold> g e n e n d init components save event action event evt { g e n f i r s t event save { name = get parameter datawrite name index of ' ' > 0 { name = name substring 0 name index of ' ' 1 } j s win = j s get window result = win call name { get data } } throwable t { text figure tf = text figure fehler +t affine transform tx = affine transform tx translate 10 20 tf transform tx get drawing add tf } } g e n l a s t event save load event action event evt { g e n f i r s t event load { name = get parameter dataread name index of ' ' > 0 { name = name substring 0 name index of ' ' 1 } j s win = j s get window result = win call name 0 result { set data result } } throwable t { text figure tf = text figure fehler +t affine transform tx = affine transform tx translate 10 20 tf transform tx get drawing add tf } } g e n l a s t event load variables declaration not modify g e n b e g i n variables samples draw drawing panel drawing panel j tool bar j tool bar1 j button load button j button save button button group tool button group end of variables declaration g e n e n d variables } 