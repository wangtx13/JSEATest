/* * @ # drawing 2 0 2006 01 14 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * ??? */package draw reversed list * geom * * event * undo * * * /** * drawing * * @author werner randelshofer * @version 2 0 2006 01 14 changed to support precision coordinates * <br>1 0 2003 12 01 derived from 5 4b1 */public drawingextends drawingimplements figure listener undoable edit listener { list< figure> figures = list< figure> needs sorting = /** creates a instance */ drawing { } index of figure figure { figures index of figure } basic add index figure figure { figures add index figure figure add figure listener figure add undoable edit listener invalidate sort order } basic remove figure figure { figures remove figure figure remove figure listener figure remove undoable edit listener invalidate sort order } draw graphics2 d g { get lock { ensure sorted list< figure> to draw = list< figure> figures size rectangle clip rect = g get clip bounds figure f figures { f get draw bounds intersects clip rect { to draw add f } } draw g to draw } } draw graphics2 d g collection< figure> figures { figure f figures { f is visible { f draw g } } } collection< figure> sort collection< figure> c { hash set< figure> unsorted = hash set< figure> unsorted add all c list< figure> sorted = list< figure> c size figure f figures { unsorted contains f { sorted add f unsorted remove f } } figure f c { unsorted contains f { sorted add f unsorted remove f } } sorted } figure area invalidated figure event e { fire area invalidated e get invalidated area } figure changed figure event e { invalidate sort order fire area invalidated e get invalidated area } figure added figure event e { } figure removed figure event e { } figure request remove figure event e { remove e get figure } figure find figure point2 d p { figure f get figures front to back { f is visible f contains p { f } } } figure find figure except point2 d p figure ignore { figure f get figures front to back { f != ignore f is visible f contains p { f } } } figure find figure except point2 d p collection< figure> ignore { figure f get figures front to back { ! ignore contains f f is visible f contains p { f } } } collection< figure> find figures rectangle2 d bounds { list< figure> intersection = list< figure> figure f figures { f is visible f get bounds intersects bounds { intersection add f } } intersection } collection< figure> find figures within rectangle2 d bounds { list< figure> contained = list< figure> figure f figures { f is visible bounds contains f get bounds { contained add f } } contained } collection< figure> get figures { collections unmodifiable collection figures } figure find figure inside point2 d p { figure f = find figure p f == ? f find figure inside p } /** * an iterator to iterate in * z order front to back over the figures */ list< figure> get figures front to back { ensure sorted reversed list< figure> figures } bring to front figure figure { figures remove figure { figures add figure invalidate sort order fire area invalidated figure get draw bounds } } send to back figure figure { figures remove figure { figures add 0 figure invalidate sort order fire area invalidated figure get draw bounds } } /** * we propagate all edit events from our figures to * undoable edit listeners which have registered with us */ undoable edit happened undoable edit event e { fire undoable edit happened e get edit } figure attribute changed figure event e { } contains figure f { figures contains f } /** * invalidates the sort order */ invalidate sort order { needs sorting = } /** * ensures that the figures are sorted in z order sequence from back to * front */ ensure sorted { needs sorting { collections sort figures figure layer comparator i n s t a n c e needs sorting = } }} 