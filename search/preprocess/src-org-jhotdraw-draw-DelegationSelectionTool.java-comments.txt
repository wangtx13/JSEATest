/* * @ # delegation selection tool 2 0 2006 02 21 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * ??? */package draw * geom * event * * * app action actions /** * a selection tool which recognizes clicks and popup menu triggers * a click or popup trigger is encountered a hook is called * which handles the event can be overriden in subclasse to * provide customized behaviour * <p> * by tool delegates mouse events to a specific tool * the figure which has been clicked provides a specialized tool * * @author werner randelshofer * @version 2 0 2006 01 18 changed to support precision coordinates * popup timer added support radio button menu items added * <br>1 0 2003 12 01 derived from 5 4b1 */public delegation selection tool selection tool { /** * a set of actions which is applied to the drawing */ collection< action> drawing actions /** * a set of actions which is applied to a selection of figures */ collection< action> selection actions /** * we use timer to show a popup menu when the user presses the * mouse key a second without moving the mouse */ timer popup timer /** * when the popup menu is visible we not track mouse movements */ j popup menu popup menu /** creates a instance */ delegation selection tool { linked list< action> linked list< action> } /** creates a instance */ delegation selection tool collection< action> drawing actions collection< action> selection actions { drawing actions = drawing actions selection actions = selection actions } set drawing actions collection< action> drawing actions { drawing actions = drawing actions } set figure actions collection< action> selection actions { selection actions = selection actions } /** * mouse listener mouse pressed events the popup trigger has * been activated then the appropriate hook is called */ mouse pressed mouse event evt { popup timer != { popup timer stop popup timer = } x x x when we want to support multiple views we have to implement set view drawing view e get source evt is popup trigger { handle popup menu evt } { mouse pressed evt popup timer = timer 1000 action listener { action performed action event aevt { handle popup menu evt popup timer = } } popup timer set repeats popup timer start } } /** * mouse listener mouse released events the popup trigger has * been activated then the appropriate hook is called */ mouse released mouse event evt { popup timer != { popup timer stop popup timer = } mouse released evt evt is popup trigger { handle popup menu evt } } mouse dragged mouse event evt { popup timer != { popup timer stop popup timer = } popup menu == || ! popup menu is visible { mouse dragged evt } } mouse clicked mouse event evt { mouse clicked evt evt get click count == 2 { handle click evt } } /** * hook which can be overriden by subclasses to provide * specialised behaviour in the event of a popup trigger */ handle popup menu mouse event evt { point p = point evt get x evt get y figure figure = get view find figure p figure != || drawing actions size > 0 { show popup menu figure p evt get component } { popup menu = } } show popup menu figure figure point p component c { j popup menu menu = j popup menu popup menu = menu j menu submenu = submenu name = linked list< action> popup actions = linked list< action> figure != { linked list< action> figure actions = linked list< action> figure get actions view to drawing p popup actions size != 0 figure actions size != 0 { popup actions add } popup actions add all figure actions popup actions size != 0 selection actions size != 0 { popup actions add } popup actions add all selection actions } popup actions size != 0 drawing actions size != 0 { popup actions add } popup actions add all drawing actions hash map< button group> button groups = hash map< button group> action a popup actions { a != a get value actions s u b m e n u k e y != { submenu name == || ! submenu name equals a get value actions s u b m e n u k e y { submenu name = a get value actions s u b m e n u k e y submenu = j menu submenu name menu add submenu } } { submenu name = submenu = } a == { submenu != submenu add separator menu add separator } { button button a get value actions b u t t o n g r o u p k e y != { button group bg = button groups get a get value actions b u t t o n g r o u p k e y bg == { bg = button group button groups put a get value actions b u t t o n g r o u p k e y bg } button = j radio button menu item a bg add button button set selected a get value actions s e l e c t e d k e y == t r u e } a get value actions s e l e c t e d k e y != { button = j check box menu item a button set selected a get value actions s e l e c t e d k e y == t r u e } { button = j menu item a } submenu != submenu add button menu add button } } menu show c p x p y } /** * hook which can be overriden by subclasses to provide * specialised behaviour in the event of a click */ handle click mouse event evt { drawing view v = get view point pos = point evt get x evt get y handle handle = v find handle pos handle != { handle track click pos evt get modifiers ex } { point2 d p = view to drawing pos figure outer figure = get view find figure pos figure figure = outer figure figure != { tool figure tool = figure get tool p figure tool == { figure = get drawing find figure inside p figure != { figure tool = figure get tool p } } figure tool != { set tracker figure tool figure tool mouse pressed evt } { outer figure handle mouse click p evt get view { v clear selection v add to selection outer figure } { v clear selection v add to selection outer figure v set handle detail level v get handle detail level == 1 ? 0 1 v set handle detail level v get handle detail level + 1 } } } } } } 