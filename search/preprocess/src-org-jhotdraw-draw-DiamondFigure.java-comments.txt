/* * @ # diamond figure 1 0 2006 03 27 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * ??? */package draw * geom * io * * draw attribute keys * geom geom omg c o r b a m a r s h a l /** * a diamond with vertices at the midpoints of its enclosing rectangle * * * @author werner randelshofer * @version 1 0 2006 03 27 created */public diamond figure attributed figure { /** * the attribute i s q u a d r a t i c is set to all sides of the diamond have * the same length */ attribute key< boolean> i s q u a d r a t i c = attribute key< boolean> is quadratic /** * the bounds of the diamond figure */ rectangle2 d rectangle /** creates a instance */ diamond figure { 0 0 0 0 } diamond figure x y width height { rectangle = rectangle2 d x y width height /* set fill color color white set stroke color color black */ } d r a w i n g draw fill graphics2 d g { rectangle2 d r = rectangle2 d rectangle clone is quadratic { side = math max r width r height r x = side r width / 2 r y = side r height / 2 r width = r height = side } grow = attribute keys get perpendicular fill growth growx growy grow == 0d { growx = growy = 0d } { w = r width / 2d h = r height / 2d line length = math sqrt w * w + h * h scale = grow / line length yb = scale * w xa = scale * h growx = yb * yb / xa + xa growy = xa * xa / yb + yb geom grow r growx growy } general path diamond = general path diamond move to r x + r width / 2 r y diamond line to r x + r width r y + r height / 2 diamond line to r x + r width / 2 r y + r height diamond line to r x r y + r height / 2 diamond close path g fill diamond } draw stroke graphics2 d g { rectangle2 d r = rectangle2 d rectangle clone is quadratic { side = math max r width r height r x = side r width / 2 r y = side r height / 2 r width = r height = side } grow = attribute keys get perpendicular draw growth growx growy grow == 0d { growx = growy = 0d } { w = r width / 2d h = r height / 2d line length = math sqrt w * w + h * h scale = grow / line length yb = scale * w xa = scale * h growx = yb * yb / xa + xa growy = xa * xa / yb + yb geom grow r growx growy } general path diamond = general path diamond move to r x + r width / 2 r y diamond line to r x + r width r y + r height / 2 diamond line to r x + r width / 2 r y + r height diamond line to r x r y + r height / 2 diamond close path g draw diamond } s h a p e a n d b o u n d s rectangle2 d get bounds { rectangle2 d bounds = rectangle2 d rectangle clone bounds } rectangle2 d get figure draw bounds { rectangle2 d r = rectangle2 d rectangle clone is quadratic { side = math max r width r height r x = side r width / 2 r y = side r height / 2 r width = r height = side } grow = attribute keys get perpendicular hit growth growx growy grow == 0d { growx = growy = 0d } { w = r width / 2d h = r height / 2d line length = math sqrt w * w + h * h scale = grow / line length yb = scale * w xa = scale * h growx = yb * yb / xa + xa growy = xa * xa / yb + yb geom grow r growx growy } r } /** * checks a point2 d is inside the figure */ contains point2 d p { rectangle2 d r = rectangle2 d rectangle clone is quadratic { side = math max r width r height r x = side r width / 2 r y = side r height / 2 r width = r height = side } r contains p { grow = attribute keys get perpendicular fill growth growx growy grow == 0d { growx = growy = 0d } { w = r width / 2d h = r height / 2d line length = math sqrt w * w + h * h scale = grow / line length yb = scale * w xa = scale * h growx = yb * yb / xa + xa growy = xa * xa / yb + yb geom grow r growx growy } general path diamond = general path diamond move to r x + r width / 2 r y diamond line to r x + r width r y + r height / 2 diamond line to r x + r width / 2 r y + r height diamond line to r x r y + r height / 2 diamond close path diamond contains p } basic set bounds point2 d anchor point2 d { rectangle x = math min anchor x x rectangle y = math min anchor y y rectangle width = math max 0 1 math abs x anchor x rectangle height = math max 0 1 math abs y anchor y } /** * moves the figure to a location * @param tx the transformation matrix */ basic transform affine transform tx { point2 d anchor = get start point point2 d = get end point basic set bounds point2 d tx transform anchor anchor point2 d tx transform } restore to geometry { rectangle2 d r = rectangle2 d geometry rectangle x = r x rectangle y = r y rectangle width = r width rectangle height = r height } get restore data { rectangle clone } a t t r i b u t e s is quadratic { b = get attribute i s q u a d r a t i c b == ? b value } set quadratic value { set attribute i s q u a d r a t i c value } e d i t i n g c o n n e c t i n g /** * the figures connector the specified location * by a chop diamond connector is * @see chop diamond connector */ connector find connector point2 d p connection figure prototype { chop diamond connector } connector find compatible connector connector c is start { chop diamond connector } c o m p o s i t e f i g u r e s c l o n i n g diamond figure clone { diamond figure that = diamond figure clone that rectangle = rectangle2 d rectangle clone that } e v e n t h a n d l i n g} 