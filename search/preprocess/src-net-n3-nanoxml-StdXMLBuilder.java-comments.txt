/* std xml builder nano xml/ * * $ revision 1 3 $ * $ date 2002/01/04 21 03 28 $ * $ name r e l e a s e 2 2 1 $ * * is part of nano xml 2 * copyright c 2000 2002 marc de scheemaecker all rights reserved * * software is provided 'as is' without any express or implied warranty * in no event will the authors be held liable any damages arising from the * use of software * * permission is granted to anyone to use software any purpose * including commercial applications and to alter it and redistribute it * freely subject to the following restrictions * * 1 the origin of software must not be misrepresented you must not * claim that you wrote the original software you use software in * a product an acknowledgment in the product documentation would be * appreciated but is not required * * 2 altered source versions must be plainly marked as such and must not be * misrepresented as being the original software * * 3 notice may not be removed or altered from any source distribution */package net n3 nanoxml io i o io reader stack /** * std xml builder is a concrete of i xml builder which creates a * tree of i xml element from an xml data source * * @see net n3 nanoxml xml element * * @author marc de scheemaecker * @version $ name r e l e a s e 2 2 1 $ $ revision 1 3 $ */public std xml builder i xml builder{ /** * stack contains the current element and its parents */ stack stack /** * the root element of the parsed xml tree */ i xml element root /** * prototype element creating the tree */ i xml element prototype /** * creates the builder */ std xml builder { xml element } /** * creates the builder * * @param prototype the prototype to use when building the tree */ std xml builder i xml element prototype { stack = root = prototype = prototype } /** * cleans up the when it's destroyed */ finalize throwable { prototype = root = stack clear stack = finalize } /** * is called before the parser starts processing its input * * @param the of the xml data source * @param line nr the line on which the parsing starts */ start building line nr { stack = stack root = } /** * is called when a processing instruction is encountered * p is with target xml are handled by the parser * * @param target the p i target * @param reader to read the data from the p i */ processing instruction target reader reader { nothing to } /** * is called when a xml element is encountered * * @see #end element * * @param name the name of the element * @param ns prefix the prefix used to identify the namespace no * namespace has been specified parameter is * @param ns u r i the u r i associated with the namespace no * namespace has been specified or no u r i is * associated with ns prefix parameter is * @param the of the xml data source * @param line nr the line in the source where the element starts */ start element name ns prefix ns u r i line nr { full name = name ns prefix != { full name = ns prefix + ' ' + name } i xml element elt = prototype create element full name ns u r i line nr stack empty { root = elt } { i xml element top = i xml element stack peek top add child elt } stack push elt } /** * is called when the attributes of an xml element have been * processed * * @see #start element * @see #add attribute * * @param name the name of the element * @param ns prefix the prefix used to identify the namespace no * namespace has been specified parameter is * @param ns u r i the u r i associated with the namespace no * namespace has been specified or no u r i is * associated with ns prefix parameter is */ element attributes processed name ns prefix ns u r i { nothing to } /** * is called when the end of an xml elemnt is encountered * * @see #start element * * @param name the name of the element * @param ns prefix the prefix used to identify the namespace no * namespace has been specified parameter is * @param ns u r i the u r i associated with the namespace no * namespace has been specified or no u r i is * associated with ns prefix parameter is */ end element name ns prefix ns u r i { i xml element elt = i xml element stack pop elt get children count == 1 { i xml element child = elt get child at index 0 child get name == { elt set content child get content elt remove child at index 0 } } } /** * is called when a attribute of an xml element is * encountered * * @param key the key name of the attribute * @param ns prefix the prefix used to identify the namespace no * namespace has been specified parameter is * @param ns u r i the u r i associated with the namespace no * namespace has been specified or no u r i is * associated with ns prefix parameter is * @param value the value of the attribute * @param type the type of the attribute no type is known * c d a t a is * * @throws * an occurred processing the event */ add attribute key ns prefix ns u r i value type { full name = key ns prefix != { full name = ns prefix + ' ' + key } i xml element top = i xml element stack peek top has attribute full name { xml parse top get top get line nr duplicate attribute + key } ns prefix != { top set attribute full name ns u r i value } { top set attribute full name value } } /** * is called when a p c d a t a element is encountered a * reader is supplied from which you can read the data the reader will * only read the data of the element you don't need to check * boundaries you don't read the full element the rest of the data * is skipped you also don't have to care about entities they are * resolved by the parser * * @param reader the reader from which you can retrieve the data * @param the of the xml data source * @param line nr the line in the source where the element starts */ add p c data reader reader line nr { buf size = 2048 size read = 0 buffer str = buffer buf size buf = buf size { size read >= buf size { buf size *= 2 str ensure capacity buf size } size { size = reader read buf } i o e { } size < 0 { } str append buf 0 size size read += size } i xml element elt = prototype create element line nr elt set content str to ! stack empty { i xml element top = i xml element stack peek top add child elt } } /** * the result of the building process is called just * before the < i>parse</ i> of i xml parser * * @see net n3 nanoxml i xml parser#parse * * @return the result of the building process */ get result { root }} 