draw action utilities /** * is the 3rd of worker also known as * worker 3 an that you subclass to * perform g u i related work in a dedicated thread * instructions on using see * * http sun com/docs/books/tutorial/uiswing/misc/threads html * * note that the a p i changed slightly in the 3rd * you must now start on the worker after * creating it * * @author s u n microsystems inc */public worker {	private value see get value set value 	private thread thread 	/**	 * to maintain reference to current worker thread	 * under separate synchronization control 	 */	private thread var {		private thread thread 		 thread var thread t { thread = t }		synchronized thread get { thread }		synchronized clear { thread = }	}	private thread var thread var 	/**	 * start a thread that will call the <code>construct</code> method	 * and then exit 	 */	public worker {		final runnable finished = runnable {		 run { finished }		} 		 runnable construct = runnable {			public run {				try {					set value construct 				}				finally {					thread var clear 				}				 utilities later finished 			}		} 		 thread t = thread construct worker 		thread var = thread var t 	}	/**	 * compute the value to be by the <code>get</code> 	 */	public construct 	/**	 * called on the event dispatching thread not on the worker thread 	 * after the <code>construct</code> has 	 */	public finished {	}	/**	 * the value created by the <code>construct</code> 	 * either the constructing thread or the current	 * thread was interrupted before a value was produced 	 *	 * @return the value created by the <code>construct</code> method	 */	public get {		while {			 thread t = thread var get 			if t == {				return get value 			}			try {				t join 			}			catch interrupted e {				 thread current thread interrupt propagate				return 			}		}	}	/**	 * get the value produced by the worker thread or it	 * hasn't been constructed yet 	 */	protected get value {		return value 	}	/**	 * a that interrupts the worker thread call method	 * to force the worker to stop what it's doing 	 */	public interrupt {		 thread t = thread var get 		if t != {			t interrupt 		}		thread var clear 	}	/**	 * set the value produced by worker thread	 */	private set value x {		value = x 	}	/**	 * start the worker thread 	 */	public start {		 thread t = thread var get 		if t != {			t start 		}	}} 