/* i xml element nano xml/ * * $ revision 1 4 $ * $ date 2002/01/04 21 03 28 $ * $ name r e l e a s e 2 2 1 $ * * is part of nano xml 2 * copyright c 2000 2002 marc de scheemaecker all rights reserved * * software is provided 'as is' without any express or implied warranty * in no event will the authors be held liable any damages arising from the * use of software * * permission is granted to anyone to use software any purpose * including commercial applications and to alter it and redistribute it * freely subject to the following restrictions * * 1 the origin of software must not be misrepresented you must not * claim that you wrote the original software you use software in * a product an acknowledgment in the product documentation would be * appreciated but is not required * * 2 altered source versions must be plainly marked as such and must not be * misrepresented as being the original software * * 3 notice may not be removed or altered from any source distribution */package net n3 nanoxml io serializable * /** * i xml element is an xml element it provides an easy to use generic * on top of an xml like data structure like e g a dom like structure * elements by std xml builder also implement * * @see net n3 nanoxml std xml builder * * @author marc de scheemaecker * @version $ name r e l e a s e 2 2 1 $ $ revision 1 4 $ */public i xml element{ /** * no line number defined */ n o l i n e = 1 /** * creates an element to be used # p c d a t a content */ i xml element create p c data element /** * creates an empty element * * @param full name the name of the element */ i xml element create element full name /** * creates an empty element * * @param full name the name of the element * @param the of the xml data where the element starts * @param line nr the line in the xml data where the element starts */ i xml element create element full name line nr /** * creates an empty element * * @param full name the full name of the element * @param namespace the namespace u r i */ i xml element create element full name namespace /** * creates an empty element * * @param full name the full name of the element * @param namespace the namespace u r i * @param the of the xml data where the element starts * @param line nr the line in the xml data where the element starts */ i xml element create element full name namespace line nr /** * the parent element the root * element */ i xml element get parent /** * the full name i e the name including an eventual namespace * prefix of the element * * @return the name or the element only contains # p c d a t a */ get full name /** * the name of the element * * @return the name or the element only contains # p c d a t a */ get name /** * the namespace of the element * * @return the namespace or no namespace is associated with the * element */ get namespace /** * sets the full name also sets the name and clears the * namespace u r i * * @param name the non name */ set name name /** * sets the name * * @param full name the non full name * @param namespace the namespace u r i which may be */ set name full name namespace /** * adds a child element * * @param child the non child to add */ add child i xml element child /** * removes a child element * * @param child the non child to remove */ remove child i xml element child /** * removes the child located at a certain index * * @param index the index of the child where the first child has index 0 */ remove child at index index /** * an enumeration of all child elements * * @return the non enumeration */ iterator iterate children /** * whether the element is a leaf element * * @return the element has no children */ is leaf /** * whether the element has children * * @return the element has children */ has children /** * the number of children * * @return the count */ get children count /** * a vector containing all the child elements * * @return the vector */ list get children /** * the child at a specific index * * @param index the index of the child * * @return the non child * * @throws index out of bounds *		if the index is out of bounds */ i xml element get child at index index index out of bounds /** * searches a child element * * @param name the full name of the child to search * * @return the child element or no such child was found */ i xml element get first child named name /** * searches a child element * * @param name the name of the child to search * @param namespace the namespace which may be * * @return the child element or no such child was found */ i xml element get first child named name namespace /** * a vector of all child elements named < i>name</ i> * * @param name the full name of the children to search * * @return the non vector of child elements */ list get children named name /** * a vector of all child elements named < i>name</ i> * * @param name the name of the children to search * @param namespace the namespace which may be * * @return the non vector of child elements */ list get children named name namespace /** * the number of attributes */ get attribute count /** * @deprecated as of nano xml/ 2 0 1 replaced by * {@link #get attribute } * the value of an attribute * * @param name the non name of the attribute * * @return the value or the attribute does not */ get attribute name /** * the value of an attribute * * @param name the non full name of the attribute * @param value the value of the attribute * * @return the value or value the attribute does not */ get attribute name value /** * the value of an attribute * * @param name the non name of the attribute * @param namespace the namespace u r i which may be * @param value the value of the attribute * * @return the value or value the attribute does not */ get attribute name namespace value /** * the value of an attribute * * @param name the non full name of the attribute * @param value the value of the attribute * * @return the value or value the attribute does not */ get attribute name value /** * the value of an attribute * * @param name the non name of the attribute * @param namespace the namespace u r i which may be * @param value the value of the attribute * * @return the value or value the attribute does not */ get attribute name namespace value /** * the type of an attribute * * @param name the non full name of the attribute * * @return the type or the attribute does not */ get attribute type name /** * the namespace of an attribute * * @param name the non full name of the attribute * * @return the namespace or there is none associated */ get attribute namespace name /** * the type of an attribute * * @param name the non name of the attribute * @param namespace the namespace u r i which may be * * @return the type or the attribute does not */ get attribute type name namespace /** * sets an attribute * * @param name the non full name of the attribute * @param value the non value of the attribute */ set attribute name value /** * sets an attribute * * @param full name the non full name of the attribute * @param namespace the namespace u r i of the attribute which may be * @param value the non value of the attribute */ set attribute full name namespace value /** * removes an attribute * * @param name the non name of the attribute */ remove attribute name /** * removes an attribute * * @param name the non name of the attribute * @param namespace the namespace u r i of the attribute which may be */ remove attribute name namespace /** * an enumeration of all attribute names * * @return the non enumeration */ iterator iterate attribute names /** * whether an attribute * * @param name the non name of the attribute * * @return the attribute */ has attribute name /** * whether an attribute * * @param name the non name of the attribute * @param namespace the namespace u r i of the attribute which may be * * @return the attribute */ has attribute name namespace /** * all attributes as a properties * * @return the non set */ properties get attributes /** * all attributes in a specific namespace as a properties * * @param namespace the namespace u r i of the attributes which may be * * @return the non set */ properties get attributes in namespace namespace /** * the of the data where the element started * * @return the or unknown * * @see #get line nr */ get /** * the line number in the data where the element started * * @return the line number or n o l i n e unknown * * @see # n o l i n e * @see #get */ get line nr /** * the # p c d a t a content of the element the element has a * combination of # p c d a t a content and child elements the # p c d a t a * sections can be retrieved as unnamed child in * * * @return the content */ get content /** * sets the # p c d a t a content it is an to call with a * non value there are child * * @param content the possibly content */ set content content /** * the element equals another element * * @param raw element the element to compare to */ equals raw element /** * the element equals another element * * @param raw element the element to compare to */ equals xml element i xml element elt } 