/* xml parse * * $ revision 1 4 $ * $ date 2002/03/24 10 27 59 $ * $ name r e l e a s e 2 2 1 $ * * is part of nano xml 2 lite * copyright c 2000 2002 marc de scheemaecker all rights reserved * * software is provided 'as is' without any express or implied warranty * in no event will the authors be held liable any damages arising from the * use of software * * permission is granted to anyone to use software any purpose * including commercial applications and to alter it and redistribute it * freely subject to the following restrictions * * 1 the origin of software must not be misrepresented you must not * claim that you wrote the original software you use software in * a product an acknowledgment in the product documentation would be * appreciated but is not required * * 2 altered source versions must be plainly marked as such and must not be * misrepresented as being the original software * * 3 notice may not be removed or altered from any source distribution *****************************************************************************/package nanoxml /** * an xml parse is thrown when an occures parsing an xml * * < p> * $ revision 1 4 $< b r> * $ date 2002/03/24 10 27 59 $< p> * * @see nanoxml xml element * * @author marc de scheemaecker * @version $ name r e l e a s e 2 2 1 $ $ revision 1 4 $ */public xml parse runtime exception{ /** * indicates that no line number has been associated with */ n o l i n e = 1 /** * the line number in the source where the occurred or * <code> n o l i n e</code> the line number is unknown * * <dl><dt><b> invariants </b></dt><dd> * <ul><li><code>line nr 0 || line nr == n o l i n e</code> * </ul></dd></dl> */ line nr /** * creates an * * @param name the name of the element where the is located * @param message a message describing what went wrong * * </dl><dl><dt><b> preconditions </b></dt><dd> * <ul><li><code>message != null</code> * </ul></dd></dl> * * <dl><dt><b> postconditions </b></dt><dd> * <ul><li>get line nr => n o l i n e * </ul></dd></dl><dl> */ xml parse name message { xml parse during parsing of + name == ? the xml definition a + name + element + + message line nr = xml parse n o l i n e } /** * creates an * * @param name the name of the element where the is located * @param line nr the number of the line in the input * @param message a message describing what went wrong * * </dl><dl><dt><b> preconditions </b></dt><dd> * <ul><li><code>message != null</code> * <li><code>line nr 0</code> * </ul></dd></dl> * * <dl><dt><b> postconditions </b></dt><dd> * <ul><li>get line nr => line nr * </ul></dd></dl><dl> */ xml parse name line nr message { xml parse during parsing of + name == ? the xml definition a + name + element + at line + line nr + + message line nr = line nr } /** * where the occurred or <code> n o l i n e</code> the line number is * unknown * * @see nanoxml xml parse exception# n o l i n e */ get line nr { line nr }} 