/* i xml parser nano xml/ * * $ revision 1 3 $ * $ date 2002/01/04 21 03 28 $ * $ name r e l e a s e 2 2 1 $ * * is part of nano xml 2 * copyright c 2000 2002 marc de scheemaecker all rights reserved * * software is provided 'as is' without any express or implied warranty * in no event will the authors be held liable any damages arising from the * use of software * * permission is granted to anyone to use software any purpose * including commercial applications and to alter it and redistribute it * freely subject to the following restrictions * * 1 the origin of software must not be misrepresented you must not * claim that you wrote the original software you use software in * a product an acknowledgment in the product documentation would be * appreciated but is not required * * 2 altered source versions must be plainly marked as such and must not be * misrepresented as being the original software * * 3 notice may not be removed or altered from any source distribution */package net n3 nanoxml io i o /** * i xml parser is the core parser of nano xml * * @author marc de scheemaecker * @version $ name r e l e a s e 2 2 1 $ $ revision 1 3 $ */public i xml parser{ /** * sets the reader from which the parser retrieves its data * * @param reader the reader */ set reader i xml reader reader /** * the reader from which the parser retrieves its data * * @return the reader */ i xml reader get reader /** * sets the builder which creates the logical structure of the xml data * * @param builder the builder */ set builder i xml builder builder /** * the builder which creates the logical structure of the xml data * * @return the builder */ i xml builder get builder /** * sets the validator that validates the xml data * * @param validator the validator */ set validator i xml validator validator /** * the validator that validates the xml data * * @return the validator */ i xml validator get validator /** * sets the entity resolver * * @param resolver the non resolver */ set resolver i xml entity resolver resolver /** * the entity resolver * * @return the non resolver */ i xml entity resolver get resolver /** * parses the data and lets the builder create the logical data structure * the the result of < i>get result</ i> of the builder an * occurred reading or parsing the data the may * an xml * * @see net n3 nanoxml i xml builder#get result * * @return the logical structure built by the builder * * @throws net n3 nanoxml xml *		if an occurred reading or parsing the data */ parse xml } 