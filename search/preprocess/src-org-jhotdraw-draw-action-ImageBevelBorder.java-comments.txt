/* * @ # image bevel border 3 0 2003 08 31 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * * /package quaqua draw action * * border * image * plaf basic * /** * draws a filled bevel border using an image and insets * the image must consist of a bevel and a fill area * <p> * the insets and the size of the image are * used determine which parts of the image shall be * used to draw the corners and edges of the bevel as * well the fill area * * <p> example you provide an image of size 10 10 * and a insets of size 2 2 4 4 then the corners of * the border are made up of top left 2 2 top right 2 4 * bottom left 2 4 bottom right 4 4 rectangle of the image * the inner area of the image is used to fill the inner area * * @author werner randelshofer * @version 3 0 x 2003 09 05 copied into quaqua the quaqua * look and feel * <br>3 0 2003 08 31 moved from gui plaf to * gui border renamed from bevel border to image bevel border * to avoid name conflicts with border bevel border constructor * option 'fill content area' added * <br>2 0 2003 07 19 redesigned * <br>1 1 1 2003 07 12 cast when filling a rectangle using * a texture * <br>1 1 2002 05 29 refactored * <br>1 0 2001 10 16 */public image bevel border border { v e r b o s e = /** * the image to be used drawing */ buffered image image /** * the border insets */ insets border insets /** * the insets of the image */ insets image insets /** * attribute is set to when the image * is used to fill the content area too */ fill content area /** * creates a instance with the given image and insets * the image has the same insets as the border */ image bevel border image img insets border insets { img border insets border insets } /** * creates a instance with the given image and insets * the image has different insets than the border */ image bevel border image img insets image insets insets border insets { img image insets border insets } /** * creates a instance with the given image and insets * the image has different insets than the border */ image bevel border image img insets image insets insets border insets fill content area { img buffered image { image = buffered image img } { frame f = frame f pack media tracker t = media tracker f t add image img 0 { t wait all } interrupted e {} image = buffered image img get width f img get height f buffered image t y p e i n t a r g b graphics2 d img graphics = image create graphics img graphics draw image img 0 0 f img graphics dispose f dispose } image insets = image insets border insets = border insets fill content area = fill content area } /** * the border is opaque * always */ is border opaque { } /** * the insets of the border * @param c the component which border insets value applies */ insets get border insets component c { insets border insets clone } /** * paints the bevel image the specified component with the * specified position and size * @param c the component which border is being painted * @param gr the paint graphics * @param x the x position of the painted border * @param y the y position of the painted border * @param width the width of the painted border * @param height the height of the painted border */ paint border component c graphics gr x y width height { image == cast graphics to graphics2 d graphics2 d g = graphics2 d gr set some variables easy access of insets and image size top = image insets top left = image insets left bottom = image insets bottom right = image insets right img width = image get width img height = image get height optimisation draw image directly it fits into the component fill content area { width == img width height == img height { g draw image image x y c } } optimisation remove insets image width or image height fits width == img width { left = img width right = 0 } height == img height { top = img height bottom = 0 } adjust insets component is too small width < left + right { left = math min left width / 2 math max 0 left + width left right / 2 right = width left } height < top + bottom { top = math min top height / 2 math max 0 top + height top bottom / 2 bottom = height top } draw the leads top > 0 left > 0 { g draw image image x y x + left y + top 0 0 left top c } top > 0 right > 0 { g fill rect x+width right y x+width y+top g draw image image x + width right y x + width y + top img width right 0 img width top c } bottom > 0 left > 0 { g draw image image x y + height bottom x + left y + height 0 img height bottom left img height c } bottom > 0 right > 0 { g draw image image x + width right y + height bottom x + width y + height img width right img height bottom img width img height c } draw the edges buffered image sub img = texture paint paint north top > 0 left + right < width { sub img = image get subimage left 0 img width right left top paint = texture paint sub img rectangle x+left y img width left right top g set paint paint g fill rect x+left y width left right top } south bottom > 0 left + right < width { sub img = image get subimage left img height bottom img width right left bottom paint = texture paint sub img rectangle x+left y + height bottom img width left right bottom g set paint paint g fill rect x+left y + height bottom width left right bottom } west left > 0 top + bottom < height { sub img = image get subimage 0 top left img height top bottom paint = texture paint sub img rectangle x y+top left img height top bottom g set paint paint g fill rect x y+top left height top bottom } east right > 0 top + bottom < height { sub img = image get subimage img width right top right img height top bottom paint = texture paint sub img rectangle x+width right y + top right img height top bottom g set paint paint g fill rect x+width right y + top right height top bottom } fill the center fill content area { g set color color yellow left + right < width top + bottom < height { sub img = image get subimage left top img width right left img height top bottom paint = texture paint sub img rectangle x + left y + top img width right left img height top bottom g set paint paint g fill rect x+left y + top width right left height top bottom } } }} 