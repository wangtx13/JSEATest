/* * @ # attribute keys 1 1 2006 07 09 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * */package draw * * geom * /** * defines attribute keys used by the figures in as well as some * helper * <p> * applications can have an attribute keys of their own * * @author werner randelshofer * @version 1 2 2006 07 09 stroke dash factor added * <br>1 1 2006 06 07 changed all values to * <br>1 0 23 3 2006 created */public attribute keys { /** * fill color the value of attribute is a color */ attribute key< color> f i l l c o l o r = attribute key< color> fill color color white winding rule { /** * w i n d i n g r u l e is set to value an even odd winding rule * is used determining the interior of a path */ e v e n o d d /** * w i n d i n g r u l e is set to value a non zero winding rule * is used determining the interior of a path */ n o n z e r o } /** * fill under stroke the value of attribute is a */ attribute key< winding rule> w i n d i n g r u l e = attribute key< winding rule> winding rule winding rule e v e n o d d underfill { /** * f i l l u n d e r s t r o k e is set to value the area under the * stroke will not be filled */ n o n e /** * f i l l u n d e r s t r o k e is set to value the area under the stroke * is filled to the center of the stroke is the behavior * of graphics2 d fill shape graphics2 d draw shape when using the * same shape */ c e n t e r /** * f i l l u n d e r s t r o k e is set to value the area under the * stroke will be filled */ f u l l } /** * fill under stroke the value of attribute is a */ attribute key< underfill> f i l l u n d e r s t r o k e = attribute key< underfill> fill under stroke underfill c e n t e r /** * stroke color the value of attribute is a color */ attribute key< color> s t r o k e c o l o r = attribute key< color> stroke color color black /** * stroke width a used to construct a basic stroke or the * outline of a stroke */ attribute key< double> s t r o k e w t h = attribute key< double> stroke width 1d /** * factor the stroke inner width is a the value * is 2 */ attribute key< double> s t r o k e i n n e r w t h f a c t o r = attribute key< double> inner stroke width factor 2d /** * stroke join one of the basic stroke j o i n values used to * construct a basic stroke */ attribute key< integer> s t r o k e j o i n = attribute key< integer> stroke join basic stroke j o i n m i t e r /** * stroke join one of the basic stroke c a p values used to * construct a basic stroke */ attribute key< integer> s t r o k e c a p = attribute key< integer> stroke cap basic stroke c a p b u t t /** * stroke miter limit factor a multiplied by total stroke width * used to construct the miter limit of a basic stroke */ attribute key< double> s t r o k e m i t e r l i m i t f a c t o r = attribute key< double> stroke miter limit factor 3d /** * an of doubles used to specify the dash pattern in * a basic stroke */ attribute key<double > s t r o k e d a s h e s = attribute key<double > stroke dashes /** * a used to specify the starting phase of the stroke dashes */ attribute key< double> s t r o k e d a s h p h a s e = attribute key< double> stroke dash phase 0d /** * a used to specify the multiplication factor the stroke dashes * is the s t r o k e w t h is used as the factor */ attribute key< double> s t r o k e d a s h f a c t o r = attribute key< double> stroke dash factor stroke type { /** * s t r o k e t y p e is set to value a basic stroke instance is used * stroking */ b a s i c /** * s t r o k e t y p e is set to value a stroke instance is used * stroking */ d o u b l e } /** * stroke type the value of attribute is either v a l u e s t r o k e t y p e b a s i c * or v a l u e s t r o k e t y p e d o u b l e * f i x m e type should be an enumeration */ attribute key< stroke type> s t r o k e t y p e = attribute key< stroke type> stroke type stroke type b a s i c stroke placement { /** * s t r o k e p l a c e m e n t is set to value the stroke is centered * on the path */ c e n t e r /** * s t r o k e p l a c e m e n t is set to value the stroke is placed * inside of a closed path */ i n s e /** * s t r o k e p l a c e m e n t is set to value the stroke is placed * outside of a closed path */ o u t s e } /** * stroke placement the value is either v a l u e s t r o k e p l a c e m e n t i n s e * v a l u e s t r o k e p l a c e m e n t o u t s e v a l u e s t r o k e p l a c e m e n t c e n t e r * only has effect closed paths on open paths the stroke * is always centered on the path * f i x m e type should be an enumeration */ attribute key< stroke placement> s t r o k e p l a c e m e n t = attribute key< stroke placement> stroke placement stroke placement c e n t e r /** * the value of attribute is a which is used to * display the text of the figure */ attribute key< string> t e x t = attribute key< string> text /** * text color the value of attribute is a color */ attribute key< color> t e x t c o l o r = attribute key< color> text color color black /** * text shadow color the value of attribute is a color */ attribute key< color> t e x t s h a d o w c o l o r = attribute key< color> text shadow color /** * text shadow offset the value of attribute is a dimension2 d */ attribute key< dimension2 d double> t e x t s h a d o w o f f s e t = attribute key< dimension2 d double> text shadow offset dimension2 d 1d 1d /** * the value of attribute is a font which is used as a prototype * to create the font the text */ attribute key< font> f o n t f a c e = attribute key< font> font face font v e r d a n a font p l a i n 10 /** * the value of attribute is a */ attribute key< double> f o n t s i z e = attribute key< double> font size 12d /** * the value of attribute is a */ attribute key< boolean> f o n t b o l d = attribute key< boolean> font bold /** * the value of attribute is a */ attribute key< boolean> f o n t i t a l i c = attribute key< boolean> font italic /** * the value of attribute is a */ attribute key< boolean> f o n t u n d e r l i n e d = attribute key< boolean> font underlined /** * the value of attribute is a liner */ attribute key< liner> b e z i e r p a t h l a y o u t e r = attribute key< liner> bezier path layouter attribute key< line decoration> e n d d e c o r a t i o n = attribute key< line decoration> end decoration attribute key< line decoration> s t a r t d e c o r a t i o n = attribute key< line decoration> start decoration /** * the value of attribute is a insets2 d */ attribute key< insets2 d double> d e c o r a t o r i n s e t s = attribute key< insets2 d double> decorator insets insets2 d 0 0 0 0 /** * the value of attribute is a insets2 d */ attribute key< insets2 d double> l a y o u t i n s e t s = attribute key< insets2 d double> border insets insets2 d 0 0 0 0 orientation { n o r t h n o r t h e a s t e a s t s o u t h e a s t s o u t h s o u t h w e s t w e s t n o r t h w e s t } /** * specifies the direction of the triangle possible values are * n o r t h s o u t h e a s t * w e s t */ attribute key< orientation> o r i e n t a t i o n = attribute key< orientation> orientation orientation n o r t h /** * a set with all attributes defined by */ set< attribute key> supported attributes map< attribute key> supported attribute map { hash set< attribute key> as = hash set< attribute key> as add all arrays as list attribute key { f i l l c o l o r f i l l u n d e r s t r o k e s t r o k e c o l o r s t r o k e w t h s t r o k e i n n e r w t h f a c t o r s t r o k e j o i n s t r o k e c a p s t r o k e m i t e r l i m i t f a c t o r s t r o k e d a s h e s s t r o k e d a s h p h a s e s t r o k e t y p e s t r o k e p l a c e m e n t t e x t t e x t c o l o r t e x t s h a d o w c o l o r t e x t s h a d o w o f f s e t f o n t f a c e f o n t s i z e f o n t b o l d f o n t i t a l i c f o n t u n d e r l i n e d b e z i e r p a t h l a y o u t e r e n d d e c o r a t i o n s t a r t d e c o r a t i o n d e c o r a t o r i n s e t s o r i e n t a t i o n w i n d i n g r u l e } supported attributes = collections unmodifiable set as hash map< attribute key> am = hash map< attribute key> attribute key a as { am put a get key a } supported attribute map = collections unmodifiable map am } /** * convenience computing the total stroke widht from the * s t r o k e w t h s t r o k e i n n e r w t h and s t r o k e t y p e attributes */ get stroke total width figure f { s t r o k e t y p e get f { b a s i c s t r o k e w t h get f not reached d o u b l e s t r o k e w t h get f * 1d + s t r o k e i n n e r w t h f a c t o r get f not reached } } stroke get stroke figure f { stroke width = s t r o k e w t h get f dash factor = s t r o k e d a s h f a c t o r get f != ? s t r o k e d a s h f a c t o r get f stroke width ddashes = s t r o k e d a s h e s get f dashes = ddashes != { dashes = ddashes length i=0 i < dashes length i++ { dashes i = ddashes i * dash factor } } s t r o k e t y p e get f { b a s i c basic stroke stroke width basic stroke c a p b u t t s t r o k e j o i n get f math max 1f s t r o k e m i t e r l i m i t f a c t o r get f * stroke width dashes s t r o k e d a s h p h a s e get f * dash factor not reached d o u b l e stroke s t r o k e i n n e r w t h f a c t o r get f * stroke width stroke width basic stroke c a p b u t t s t r o k e j o i n get f math max 1f s t r o k e m i t e r l i m i t f a c t o r get f * stroke width dashes s t r o k e d a s h p h a s e get f value * dash factor not reached } } font get font figure f { font prototype = f o n t f a c e get f prototype == { } get font style f != font p l a i n { prototype derive font get font style f f o n t s i z e get f value } { prototype derive font f o n t s i z e get f value } } get font style figure f { style = font p l a i n f o n t b o l d get f style |= font b o l d f o n t i t a l i c get f style |= font i t a l i c style } /** * the distance that a rectangle needs to grow or shrink to * fill its shape as specified by the f i l l u n d e r s t r o k e and s t r o k e p o s i t i o n * attributes of a figure * the value is the number of units that need to be grown or shrunk * perpendicular to a stroke on an outline of the shape */ get perpendicular fill growth figure f { grow stroke width = attribute keys get stroke total width f stroke placement placement = s t r o k e p l a c e m e n t get f f i l l u n d e r s t r o k e get f { f u l l placement { i n s e grow = 0f o u t s e grow = stroke width c e n t e r grow = stroke width / 2d } n o n e placement { i n s e grow = stroke width o u t s e grow = 0f c e n t e r grow = stroke width / 2d } c e n t e r placement { i n s e grow = stroke width / 2d o u t s e grow = stroke width / 2d c e n t e r grow = 0d } } grow } /** * the distance that a rectangle needs to grow or shrink to * draw its shape as specified by the f i l l u n d e r s t r o k e and s t r o k e p o s i t i o n * attributes of a figure * the value is the number of units that need to be grown or shrunk * perpendicular to a stroke on an outline of the shape */ get perpendicular draw growth figure f { grow stroke width = attribute keys get stroke total width f stroke placement placement = s t r o k e p l a c e m e n t get f placement { i n s e grow = stroke width / 2d o u t s e grow = stroke width / 2d c e n t e r grow = 0f } grow } /** * the distance that a rectangle needs to grow or shrink to * make hit detections on a shape as specified by the f i l l u n d e r s t r o k e and s t r o k e p o s i t i o n * attributes of a figure * the value is the number of units that need to be grown or shrunk * perpendicular to a stroke on an outline of the shape */ get perpendicular hit growth figure f { grow s t r o k e c o l o r get f == { grow = get perpendicular fill growth f } { stroke width = attribute keys get stroke total width f grow = get perpendicular draw growth f + stroke width / 2d } grow } } 