/* * @ # round rectangle figure 2 2 2006 06 17 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * */package draw * geom * io * * undo * draw attribute keys * geom * xml dom input xml dom output /** * a rectangle2 d with round corners * * @author werner randelshofer * @version 2 2 2006 06 17 chop added * 2 1 2006 05 29 basic set bounds did not work bounds smaller * than 1 pixel * <br>2 0 2006 01 14 changed to support coordinates * <br>1 0 2004 03 02 derived from 6 0b1 */public round rectangle figure attributed figure { round rectangle2 d roundrect d e f a u l t a r c = 20 /** creates a instance */ round rectangle figure { 0 0 0 0 } round rectangle figure x y width height { roundrect = round rectangle2 d x y width height d e f a u l t a r c d e f a u l t a r c /* f i l l c o l o r set color white s t r o k e c o l o r set color black */ } rectangle2 d get bounds { rectangle2 d roundrect get bounds2 d } rectangle2 d get figure draw bounds { rectangle2 d r = rectangle2 d roundrect get bounds2 d grow = attribute keys get perpendicular hit growth geom grow r grow grow r } get arc width { roundrect arcwidth } get arc height { roundrect archeight } set arc w h { old width = roundrect get arc width old height = roundrect get arc height roundrect arcwidth = w roundrect archeight = h fire figure changed get draw bounds fire undoable edit happened undoable edit { get presentation name { rundung } undo cannot undo { undo will change roundrect arcwidth = old width roundrect archeight = old height changed } redo cannot redo { redo will change roundrect arcwidth = w roundrect archeight = h changed } } } draw fill graphics2 d g { round rectangle2 d r = round rectangle2 d roundrect clone grow = attribute keys get perpendicular fill growth r x = grow r y = grow r width += grow * 2 r height += grow * 2 r arcwidth += grow * 2 r archeight += grow * 2 r width > 0 r height > 0 { g fill r } } draw stroke graphics2 d g { round rectangle2 d r = round rectangle2 d roundrect clone grow = attribute keys get perpendicular draw growth r x = grow r y = grow r width += grow * 2 r height += grow * 2 r arcwidth += grow * 2 r archeight += grow * 2 r width > 0 r height > 0 { g draw r } } /** * checks a point2 d is inside the figure */ contains point2 d p { round rectangle2 d r = round rectangle2 d roundrect clone grow = attribute keys get perpendicular hit growth r x = grow r y = grow r width += grow * 2 r height += grow * 2 r arcwidth += grow * 2 r archeight += grow * 2 r contains p } basic set bounds point2 d anchor point2 d { roundrect x = math min anchor x x roundrect y = math min anchor y y roundrect width = math max 0 1 math abs x anchor x roundrect height = math max 0 1 math abs y anchor y } /** * transforms the figure * @param tx the transformation */ basic transform affine transform tx { point2 d anchor = get start point point2 d = get end point basic set bounds point2 d tx transform anchor anchor point2 d tx transform } collection< handle> create handles detail level { linked list< handle> handles = linked list< handle> create handles detail level handles add round rect radius handle handles } connector find connector point2 d p connection figure prototype { chop round rect connector } connector find compatible connector connector c is start connector { chop round rect connector } round rectangle figure clone { round rectangle figure that = round rectangle figure clone that roundrect = round rectangle2 d roundrect clone that } @ override read dom input in i o { read in roundrect arcwidth = in get attribute arc width d e f a u l t a r c roundrect archeight = in get attribute arc height d e f a u l t a r c } @ override write dom output out i o { write out out add attribute arc width roundrect arcwidth out add attribute arc height roundrect archeight } restore to geometry { round rectangle2 d r = round rectangle2 d geometry roundrect x = r x roundrect y = r y roundrect width = r width roundrect height = r height } get restore data { roundrect clone } point2 d chop point2 d from { rectangle2 d outer = get bounds grow s t r o k e p l a c e m e n t get { c e n t e r grow = attribute keys get stroke total width / 2 o u t s e grow = attribute keys get stroke total width i n s e grow = 0 } outer x = grow outer y = grow outer width += grow * 2 outer height += grow * 2 rectangle2 d inner = rectangle2 d outer clone gw = get arc width + grow * 2 / 2 gh = get arc height + grow *2 / 2 inner x = gw inner y = gh inner width += gw * 2 inner height += gh * 2 angle = geom point to angle outer from point2 d p = geom angle to point outer geom point to angle outer from p x == outer x || p x == outer x + outer width { p y = math min math max p y inner y inner y + inner height } { p x = math min math max p x inner x inner x + inner width } p }} 