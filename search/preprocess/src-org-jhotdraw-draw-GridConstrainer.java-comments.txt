/* * @ # grid constrainer 2 1 1 2006 07 05 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * */package draw * geom * /** * constrains a point such that it falls on a grid * * @author werner randelshofer * @version 2 1 1 2006 07 05 fixed drawing bug * <br>2 1 2006 07 03 is visible added * <br>2 0 2006 01 14 changed to support precision coordinates * <br>1 0 2004 03 17 created */public grid constrainer constrainer { width height color minor color = color 0xebebeb color major color = color 0xcacaca /** * creates a instance * @param width the width of a grid cell * @param height the height of a grid cell */ grid constrainer width height { width <= 0 || height <= 0 illegal argument width or height is <= 0 width = width height = height } get width { width } get height { height } point2 d constrain point point2 d p { f i x m e works only widths! p x = math round p x / width * width p y = math round p y / height * height p } to { to + +width+ +height+ } is visible { width > 1 height > 1 } draw graphics2 d g drawing view view { is visible { affine transform t = view get drawing to view transform rectangle view bounds = g get clip bounds rectangle2 d bounds = view view to drawing view bounds point2 d origin = constrain point point2 d bounds x bounds y point2 d point = point2 d point2 d view point = point2 d width * view get scale factor > 1 { g set color minor color i= origin x / width m = origin x + bounds width / width + 1 i <= m i++ { g set color i % 5 == 0 ? major color minor color point x = width * i t transform point view point g draw line view point x view bounds y view point x view bounds y + view bounds height } } height * view get scale factor > 1 { g set color minor color i= origin y / height m = origin y + bounds height / height + 1 i <= m i++ { g set color i % 5 == 0 ? major color minor color point y = height * i t transform point view point g draw line view bounds x view point y view bounds x + view bounds width view point y } } } }} 