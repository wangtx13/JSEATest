/* * @ # box handle kit 2 0 2006 01 14 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * ??? */package draw * * geom * event * /** * a set of utility to create handles the common * locations on a figure's display box * * @author werner randelshofer * @version 2 0 2006 01 14 changed to support precision coordinates * <br>1 0 2003 12 01 derived from 5 4b1 */public box handle kit { /** creates a instance */ box handle kit { } /** * creates handles each of a * figure and adds them to the provided collection */ add handles figure f collection< handle> handles { handles add south east f handles add south west f handles add north east f handles add north west f } /** * fills the given vector with handles at each * the north south east and west of the figure */ add edge handles figure f collection< handle> handles { handles add south f handles add north f handles add east f handles add west f } /** * fills the given vector with handles at each * the north south east and west of the figure */ add box handles figure f collection< handle> handles { add handles f handles add edge handles f handles } handle south figure owner { south handle owner } handle south east figure owner { south east handle owner } handle south west figure owner { south west handle owner } handle north figure owner { north handle owner } handle north east figure owner { north east handle owner } handle north west figure owner { north west handle owner } handle east figure owner { east handle owner } handle west figure owner { west handle owner } resize handle locator handle { dx dy geometry resize handle figure owner locator loc { owner loc } track start point anchor modifiers ex { geometry = get owner get restore data point location = get location dx = anchor x + location x dy = anchor y + location y } track step point anchor point modifiers ex { point2 d p = view view to drawing point x + dx y + dy view get constrainer constrain point p track step normalized p } track end point anchor point modifiers ex { fire undoable edit happened geometry edit get owner geometry get owner get restore data } track step normalized point2 d p { } /** * f i x m e replace operation by a rectangle2 d */ set bounds point2 d anchor point2 d { figure f = get owner f will change rectangle2 d old bounds = f get bounds rectangle2 d bounds = rectangle2 d math min anchor x x math min anchor y y math abs anchor x x math abs anchor y y sx = bounds width / old bounds width sy = bounds height / old bounds height affine transform tx = affine transform tx translate old bounds x old bounds y ! is na n sx ! is na n sy sx != 1d || sy != 1d ! sx < 0 0001 ! sy < 0 0001 { f basic transform tx tx set to identity tx scale sx sy f basic transform tx tx set to identity } tx translate bounds x bounds y f basic transform tx f changed } } north east handle resize handle { north east handle figure owner { owner relative locator north east } track step normalized point2 d p { rectangle2 d r = get owner get bounds set bounds point2 d r x math min r y + r height 1 p y point2 d math max r x p x r y + r height } cursor get cursor { cursor get predefined cursor cursor n e r e s i z e c u r s o r } } east handle resize handle { east handle figure owner { owner relative locator east } track step normalized point2 d p { rectangle2 d r = get owner get bounds set bounds point2 d r x r y point2 d math max r x + 1 p x r y + r height } cursor get cursor { cursor get predefined cursor cursor e r e s i z e c u r s o r } } north handle resize handle { north handle figure owner { owner relative locator north } track step normalized point2 d p { rectangle2 d r = get owner get bounds set bounds point2 d r x math min r y + r height 1 p y point2 d r x + r width r y + r height } cursor get cursor { cursor get predefined cursor cursor n r e s i z e c u r s o r } } north west handle resize handle { north west handle figure owner { owner relative locator north west } track step normalized point2 d p { rectangle2 d r = get owner get bounds set bounds point2 d math min r x + r width 1 p x math min r y + r height 1 p y point2 d r x + r width r y + r height } cursor get cursor { cursor get predefined cursor cursor n w r e s i z e c u r s o r } } south east handle resize handle { south east handle figure owner { owner relative locator south east } track step normalized point2 d p { rectangle2 d r = get owner get bounds set bounds point2 d r x r y point2 d math max r x + 1 p x math max r y + 1 p y } cursor get cursor { cursor get predefined cursor cursor s e r e s i z e c u r s o r } } south handle resize handle { south handle figure owner { owner relative locator south } track step normalized point2 d p { rectangle2 d r = get owner get bounds set bounds point2 d r x r y point2 d r x + r width math max r y + 1 p y } cursor get cursor { cursor get predefined cursor cursor s r e s i z e c u r s o r } } south west handle resize handle { south west handle figure owner { owner relative locator south west } track step normalized point2 d p { rectangle2 d r = get owner get bounds set bounds point2 d math min r x + r width 1 p x r y point2 d r x + r width math max r y + 1 p y } cursor get cursor { cursor get predefined cursor cursor s w r e s i z e c u r s o r } } west handle resize handle { west handle figure owner { owner relative locator west } track step normalized point2 d p { rectangle2 d r = get owner get bounds set bounds point2 d math min r x + r width 1 p x r y point2 d r x + r width r y + r height } cursor get cursor { cursor get predefined cursor cursor w r e s i z e c u r s o r } }} 