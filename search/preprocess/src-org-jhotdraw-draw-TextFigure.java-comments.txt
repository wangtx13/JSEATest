/* * @ # text figure 1 0 1 2006 02 27 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * ??? */package draw * * font * geom * * io * draw attribute keys * geom * xml dom input xml dom output /** * a text figure * * @see text tool * * @author werner randelshofer * @version 2 0 1 2006 02 27 draw u n d e r l i n e l o w o n e p i x e l instead of u n d e r l i n e o n * <br>2 0 2006 01 14 changed to support coordinates * <br>1 0 2003 12 01 derived from 5 4b1 */public text figure attributed figure text holder { point2 d origin = point2 d editable = cache of the text figure's layout text layout text layout /** creates a instance */ text figure { text } text figure text { set text text } /** * gets the text shown by the text figure */ get text { get attribute t e x t } /** * sets the text shown by the text figure */ set text text { set attribute t e x t text } basic transform affine transform tx { tx transform origin origin } basic set bounds point2 d anchor point2 d { origin = point2 d anchor x anchor y } contains point2 d p { get bounds contains p { } decorator != { update decorator bounds decorator contains p } } draw stroke graphics2 d g { } draw fill graphics2 d g { } draw text graphics2 d g { get text != || is editable { text layout layout = get text layout layout draw g origin x origin y + layout get ascent } } invalidate { invalidate text layout = } text layout get text layout { text layout == { text = get text text == || text length == 0 { text = } font render context frc = get font render context hash map< text attribute object> text attributes = hash map< text attribute object> text attributes put text attribute f o n t get font f o n t u n d e r l i n e d get { text attributes put text attribute u n d e r l i n e text attribute u n d e r l i n e l o w o n e p i x e l } text layout = text layout text text attributes frc } text layout } rectangle2 d get bounds { text layout layout = get text layout rectangle2 d r = rectangle2 d origin x origin y layout get advance layout get ascent + layout get descent r } dimension2 d get preferred size { rectangle2 d b = get bounds dimension2 d b width b height } rectangle2 d get figure draw bounds { get text == { get bounds } { text layout layout = get text layout rectangle2 d r = rectangle2 d origin x origin y layout get advance layout get ascent rectangle2 d l bounds = layout get bounds ! l bounds is empty ! is na n l bounds get x { r add rectangle2 d l bounds get x +origin x l bounds get y +origin y+layout get ascent l bounds get width l bounds get height } grow by two pixels to take antialiasing into account geom grow r 2d 2d r } } collection< handle> create handles detail level { linked list< handle> handles = linked list< handle> detail level == 0 { handles add move handle relative locator north west handles add move handle relative locator north east handles add move handle relative locator south east handles add font size handle } handles } validate { validate text layout = } is editable { editable } set editable b { editable = b } get text columns { get text == ? 4 math max get text length 4 } /** * a specialized tool the given coordinate * <p> no specialized tool is available */ tool get tool point2 d p { is editable contains p ? text tool } read dom input in i o { set bounds point2 d in get attribute x 0d in get attribute y 0d point2 d 0 0 read attributes in } write dom output out i o { rectangle2 d b = get bounds out add attribute x b x out add attribute y b y write attributes out } /** * gets the number of characters used to expand tabs */ get tab size { 8 } text holder get label { } insets2 d get insets { insets2 d 0 0 0 0 } restore to geometry { point2 d p = point2 d geometry origin x = p x origin y = p y } get restore data { origin clone } text figure clone { text figure that = text figure clone that origin = point2 d origin clone that text layout = that } font get font { attribute keys get font } color get text color { t e x t c o l o r get } color get fill color { f i l l c o l o r get } set font size size { f o n t s i z e set size } get font size { f o n t s i z e get value }} 