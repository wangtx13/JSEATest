/* * @ # rotate handle 1 0 12 july 2006 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * */package draw * undo * * event * geom * * geom * /** * a handle to rotate a figure * * @author werner randelshofer * @version 1 0 12 july 2006 created */public rotate handle handle { point location restore data affine transform transform point2 d center start theta start length /** creates a instance */ rotate handle figure owner { owner } is combinable with handle h { } /** * draws handle */ draw graphics2 d g { draw diamond g color green color black } rectangle basic get bounds { rectangle r = rectangle get location r grow get handlesize / 2 get handlesize / 2 r } point get location { location == { /*location =*/ view drawing to view get origin } location } point2 d get origin { handle is placed above the figure we move it up by a handlesizes so that it won't overlap with the handles from box handle kit rectangle2 d bounds = get owner get bounds point2 d bounds get center x bounds y get handlesize } track start point anchor modifiers ex { location = point anchor x anchor y restore data = get owner get restore data rectangle2 d bounds = get owner get bounds transform = affine transform center = point2 d bounds get center x bounds get center y point2 d anchor point = view view to drawing anchor start theta = geom angle center x center y anchor point x anchor point y start length = geom length center x center y anchor point x anchor point y } track step point anchor point modifiers ex { location = point x y point2 d point = view view to drawing step theta = geom angle center x center y point x point y step length = geom length center x center y point x point y transform set to identity transform translate center x center y transform rotate step theta start theta transform translate center x center y get owner will change get owner restore to restore data get owner basic transform transform get owner changed } track end point anchor point modifiers ex { view get drawing fire undoable edit happened restore data edit get owner restore data location = } } 