/* * @ # s d i application 1 3 2006 05 03 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * */package app * prefs * * event * beans * io * * prefs * * app action about action app action actions app action clear action app action clear recent files action app action close action app action copy action app action cut action app action delete action app action duplicate action app action exit action app action export action app action load action app action load recent action app action action app action paste action app action redo action app action save action app action save as action app action select all action app action toggle visible action app action undo action /** * a s d i application can handle the life cycle of a single document window being * presented in a j frame the j frame provides all the functionality needed to * work with the document such as a menu bar tool bars and palette windows * * * @author werner randelshofer * @version 1 3 2006 05 03 show asterisk in window title when project has * unsaved changes * <br>1 2 1 2006 02 28 stop application when last project is closed * <br>1 2 2006 02 06 support multiple open added * <br>1 1 2006 02 06 revised * <br>1 0 october 16 2005 created */public s d i application application { project current project preferences prefs /** creates a instance */ s d i application { } launch { set property apple graphics use quartz launch } init { init prefs = preferences user node get model == ? get get model get init labels init look and feel init application actions } remove project p { remove p projects size == 0 { stop } } init look and feel { set property apple laf use screen menu bar set property com apple macos use screen menu bar set property apple graphics use quartz { laf name = u i manager get look and feel name u i manager set look and feel laf name } e { e print stack trace } u i manager get option pane css == { u i manager put option pane css } } init application actions { resource bundle app labels = resource bundle get l a f bundle app labels application model m = get model m put action about action about action m put action exit action exit action m put action clear action clear action m put action action action app labels configure action m get action action window m put action load action load action m put action clear recent files action clear recent files action m put action save action save action m put action save as action save as action m put action close action close action m put action undo action undo action m put action redo action redo action m put action cut action cut action m put action copy action copy action m put action paste action paste action m put action delete action delete action m put action duplicate action duplicate action m put action select all action select all action } init project actions project p { } show project p { ! p is showing { p set showing = p get j frame f = j frame title == { title = labels get unnamed } { title = get name } p has unsaved changes { title += * } f set title labels get formatted frame title title get name p get multiple open f set close operation j frame d o n o t h i n g o n c l o s e j panel panel = j panel wrap project component p f add panel f set minimum size dimension 200 200 f set preferred size dimension 600 400 f set j menu bar create menu bar p list< action> panel get client property tool bar actions preferences install frame prefs handler prefs project f point loc = f get location moved { moved = iterator i=projects iterator i has next { project a project = project i next a project != p utilities get window ancestor a project get component != utilities get window ancestor a project get component get location equals loc { loc x += 22 loc y += 22 moved = } } } moved f set location loc f add window listener window adapter { window closing window event evt { set current project p get model get action close action action performed action event f action event a c t i o n p e r f o r m e d window closing } window activated window event e { set current project p } } p add property change listener property change listener { property change property change event evt { name = evt get property name name equals has unsaved changes || name equals || name equals multiple open { = p get title == { title = labels get unnamed } { title = get name } p has unsaved changes { title += * } f set title labels get formatted frame title title get name p get multiple open } } } f set visible } } /** * the project component eventually wraps it into * another component in order to provide additional functionality */ component wrap project component project p { component c = p get component get model != { linked list< action> tool bar actions = linked list id=0 j tool bar tb reversed list< j tool bar> get model create tool bars p { id++ j panel panel = j panel border layout panel add tb border layout n o r t h panel add c border layout c e n t e r c = panel preferences install tool bar prefs handler prefs toolbar +id tb tool bar actions add first toggle visible action tb tb get name } j tool bar tb = j tool bar tb set name labels get standard tool bar title add standard actions to tb p id++ j panel panel = j panel border layout panel add tb border layout n o r t h panel add c border layout c e n t e r c = panel preferences install tool bar prefs handler prefs toolbar +id tb tool bar actions add first toggle visible action tb tb get name panel put client property tool bar actions tool bar actions } c } add standard actions to j tool bar tb project p { j button b application model m = get model b = tb add m get action clear action b set focusable b = tb add m get action load action b set focusable b = tb add m get action save action tb add separator b = tb add m get action undo action b set focusable b = tb add m get action redo action b set focusable tb add separator b = tb add m get action cut action b set focusable b = tb add m get action copy action b set focusable b = tb add m get action paste action b set focusable } hide project p { p is showing { p set showing j frame f = j frame utilities get window ancestor p get component f set visible f remove p get component f dispose } } dispose project p { dispose p projects size == 0 { stop } } project get current project { current project } set current project project value { project old value = current project current project = value fire property change current project old value value } /** * the project menu bar is displayed a project * the a screen menu bar */ j menu bar create menu bar project p list< action> tool bar actions { application model model = get model resource bundle labels = resource bundle get l a f bundle app labels j menu bar mb = j menu bar j menu m m2 j menu item mi j check box menu item cbmi j menu open recent menu m = j menu labels configure menu m labels get m add model get action clear action m add model get action action m add model get action load action open recent menu = j menu labels configure menu open recent menu open recent open recent menu add model get action clear recent files action update open recent menu open recent menu m add open recent menu m add separator m add model get action save action m add model get action save as action model get action export action != { mi = m add model get action export action } m add separator m add model get action exit action mb add m m = j menu labels configure menu m labels get edit m add model get action undo action m add model get action redo action m add separator m add model get action cut action m add model get action copy action m add model get action paste action m add model get action duplicate action m add model get action delete action m add separator m add model get action select all action mb add m j menu view menu = j menu mm model create menus p { mb add mm mm get text equals labels get view { view menu = mm } } tool bar actions != tool bar actions size > 0 { m = view menu != ? view menu j menu m2 = tool bar actions size == 1 ? m j menu labels get tool bars labels configure menu m labels get view action a tool bar actions { cbmi = j check box menu item a actions configure j check box menu item cbmi a m2 add cbmi } m2 != m { m add m2 } mb add m } m = j menu labels configure menu m labels get help m add model get action about action mb add m add property change listener property change listener { property change property change event evt { name = evt get property name name == project count { p == || projects contains p { } { remove property change listener } } name == recent files { update open recent menu open recent menu } } } mb } update open recent menu j menu open recent menu { open recent menu get item count > 0 { j menu item clear recent files item = j menu item open recent menu get item open recent menu get item count 1 open recent menu remove all f recent files { open recent menu add load recent action s d i application f } recent files size > 0 { open recent menu add separator } open recent menu add clear recent files item } } is sharing tools among projects { } component get component { project p = get current project p == ? p get component }} 