/* * @ # worker 2 1 2005 10 16 * * copyright c 1998 2005 werner randelshofer * staldenmattweg 2 immensee c h 6405 switzerland * all rights reserved * * software is the confidential and proprietary information of * werner randelshofer confidential information you shall not * disclose such confidential information and shall use it only in * accordance with the terms of the license agreement you entered into * with werner randelshofer */package active event utilities /** * is an that you subclass to * perform g u i related work in a dedicated event dispatcher * <p> * is similar to worker but less complex * like a worker it can run using an an internal * worker thread but it can also be like a runnable * * @author werner randelshofer * @version 2 1 2005 10 16 start added * <br>2 0 2005 09 27 revised * <br>1 1 1 2001 08 24 call finished within block * <br>1 1 2001 08 24 reworked j d k 1 3 * <br>1 0 1998 10 07 created */public worker runnable { value see get value set value /** * calls #construct on the current thread and * #finished on the a w t event dispatcher thread */ run { runnable finished = runnable { run { finished get value } } { set value construct } throwable e { e print stack trace } { utilities later finished } } /** * compute the value to be by the <code>get</code> */ construct /** * called on the event dispatching thread not on the worker thread * after the <code>construct</code> has * * @param value the value of the construct */ finished value /** * get the value produced by the worker thread or it * hasn't been constructed yet */ get value { value } /** * set the value produced by worker thread */ set value x { value = x } /** * starts the worker on an internal worker thread */ start { thread start }} 