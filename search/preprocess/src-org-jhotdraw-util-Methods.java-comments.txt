/* * @ # 1 0 1 2006 06 25 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * */package reflect * /** * contains convenience invocations using * reflect * * @author werner randelshofer * @version 1 0 1 2006 06 25 fixed comments * <br>1 0 september 24 2005 created */public { /** * prevent instance creation */ { } /** * the specified accessible parameterless it * * @param obj the on which to the * @param name the name of the * @return the value of the * @return no such the does not or is not * accessible */ obj name no such { { = obj get get name 0 result = obj 0 result } illegal access e { no such name+ is not accessible } invocation target e { the is not supposed to exceptions internal e get message } } /** * the specified accessible with a parameter it * * @param obj the on which to the * @param name the name of the * @param parameter the parameter * @return the value of the or m e t h o d n o t f o u n d * @return no such the does not or is not accessible */ obj name parameter no such { { = obj get get name { } result = obj { parameter } result } illegal access e { no such name+ is not accessible } invocation target e { the is not supposed to exceptions internal e get message } } /** * the specified accessible parameterless it * * @param clazz the on which to the * @param name the name of the * @return the value of the or m e t h o d n o t f o u n d * @return no such the does not or is not accessible */ clazz name no such { { = clazz get name 0 result = 0 result } illegal access e { no such name+ is not accessible } invocation target e { the is not supposed to exceptions internal e get message } } /** * the specified accessible parameterless it * * @param clazz the on which to the * @param name the name of the * @return the value of the * @return no such the does not or is not accessible */ clazz name no such { { name clazz name } not found e { no such +clazz+ not found } } /** * the specified parameterless it * * @param clazz the on which to the * @param name the name of the * @param types the parameter types * @param values the parameter values * @return the value of the * @return no such the does not or is not accessible */ clazz name types values no such { { = clazz get name types result = values result } illegal access e { no such name+ is not accessible } invocation target e { the is not supposed to exceptions internal e get message } } /** * the specified parameterless it * * @param clazz the on which to the * @param name the name of the * @param types the parameter types * @param values the parameter values * @return the value of the * @return no such the does not or is not accessible */ clazz name types values no such { { name clazz name types values } not found e { no such +clazz+ not found } } /** * the specified parameterless it * * @param clazz the on which to the * @param name the name of the * @param types the parameter types * @param values the parameter values * @param value the value * @return the value of the or the value the * does not or is not accessible */ clazz name types values value { { name clazz name types values } not found e { value } no such e { value } } /** * the specified getter it * * @param obj the on which to the * @param name the name of the * @param value value is the does not * @return the value by the getter or the value */ getter obj name value { { = obj get get name 0 result = obj 0 result value } no such e { value } illegal access e { value } invocation target e { value } } /** * the specified getter it * * @param obj the on which to the * @param name the name of the * @param value value is the does not * @return the value by the getter or the value */ getter obj name value { { = obj get get name 0 result = obj 0 result value } no such e { value } illegal access e { value } invocation target e { value } } /** * the specified getter it * * @param obj the on which to the * @param name the name of the * @param value value is the does not * @return the value by the getter or the value */ getter obj name value { { = obj get get name 0 result = obj 0 result value } no such e { value } illegal access e { value } invocation target e { value } } /** * the specified getter it * * @param obj the on which to the * @param name the name of the * @param value value is the does not * @return the value by the getter or the value */ getter obj name value { { = obj get get name 0 result = obj 0 result } no such e { value } illegal access e { value } invocation target e { value } } /** * the specified getter it * * @param clazz the on which to the * @param name the name of the * @param value value is the does not * @return the value by the getter or the value */ getter clazz name value { { = clazz get name 0 result = 0 result value } no such e { value } illegal access e { value } invocation target e { value } } /** * the specified setter it * * @param obj the on which to the * @param name the name of the */ obj name value no such { { = obj get get name { t y p e} obj { value } } illegal access e { no such name+ is not accessible } invocation target e { the is not supposed to exceptions internal e get message } } /** * the specified it * * @param obj the on which to the * @param name the name of the */ obj name value no such { { = obj get get name { t y p e} obj { value } } illegal access e { no such name+ is not accessible } invocation target e { the is not supposed to exceptions internal e get message } } /** * the specified setter it * * @param obj the on which to the * @param name the name of the */ obj name value no such { { = obj get get name { t y p e} obj { value } } illegal access e { no such name+ is not accessible } invocation target e { the is not supposed to exceptions internal e get message } } /** * the specified setter it * * @param obj the on which to the * @param name the name of the */ obj name clazz value no such { { = obj get get name { clazz } obj { value} } illegal access e { no such name+ is not accessible } invocation target e { the is not supposed to exceptions internal e get message } } /** * the specified setter it * * @param obj the on which to the * @param name the name of the */ obj name clazz value no such { { = obj get get name clazz obj value } illegal access e { no such name+ is not accessible } invocation target e { the is not supposed to exceptions internal = internal e get message init cause e get cause != ? e get cause e } } /** * the specified setter it * * @param obj the on which to the * @param name the name of the */ obj name { { obj name } no such e { ignore } } /** * the specified setter it * * @param obj the on which to the * @param name the name of the */ obj name value { { obj name value } no such e { ignore } } /** * the specified it * * @param obj the on which to the * @param name the name of the */ obj name value { { obj name value } no such e { ignore } } /** * the specified setter it * * @param obj the on which to the * @param name the name of the */ obj name clazz value { { obj name clazz value } no such e { ignore } }} 