/* xml nano xml/ * * $ revision 1 5 $ * $ date 2002/02/03 21 19 38 $ * $ name r e l e a s e 2 2 1 $ * * is part of nano xml 2 * copyright c 2000 2002 marc de scheemaecker all rights reserved * * software is provided 'as is' without any express or implied warranty * in no event will the authors be held liable any damages arising from the * use of software * * permission is granted to anyone to use software any purpose * including commercial applications and to alter it and redistribute it * freely subject to the following restrictions * * 1 the origin of software must not be misrepresented you must not * claim that you wrote the original software you use software in * a product an acknowledgment in the product documentation would be * appreciated but is not required * * 2 altered source versions must be plainly marked as such and must not be * misrepresented as being the original software * * 3 notice may not be removed or altered from any source distribution */package net n3 nanoxml io i o io reader io reader /** * utility nano xml * * @author marc de scheemaecker * @version $ name r e l e a s e 2 2 1 $ $ revision 1 5 $ */class xml util{ /** * skips the remainder of a comment * it is assumed that lt ! is already read * * @param reader the reader * * @throws io i o *		if an occurred reading the data */ skip comment i xml reader reader i o xml parse { reader read != ' ' { xml expected input reader get reader get line nr <! } dashes read = 0 { ch = reader read ch { ' ' dashes read++ '>' dashes read == 2 { } dashes read = 0 } } } /** * skips the remainder of the current xml tag * * @param reader the reader * * @throws io i o *		if an occurred reading the data */ skip tag i xml reader reader i o xml parse { level = 1 level > 0 { ch = reader read ch { '<' ++level '>' level } } } /** * scans a * * @param will contain the * @param reader the reader * * @return the * * @throws io i o *		if an occurred reading the data */ scan buffer i xml reader reader i o xml parse { ! xml check literal reader u b l i c { } xml skip whitespace reader append xml scan reader '\0' xml skip whitespace reader xml scan reader '\0' } /** * scans a * * @param reader the reader * * @return the * * @throws io i o *		if an occurred reading the data */ scan i xml reader reader i o xml parse { ! xml check literal reader y s t e m { } xml skip whitespace reader xml scan reader '\0' } /** * retrieves an identifier from the data * * @param reader the reader * * @throws io i o *		if an occurred reading the data */ scan identifier i xml reader reader i o xml parse { buffer result = buffer { ch = reader read ch == ' ' || ch == ' ' || ch == ' ' || ch == ' ' || ch >= 'a' ch <= 'z' || ch >= ' a' ch <= ' z' || ch >= '0' ch <= '9' || ch > '\u007 e' { result append ch } { reader unread ch } } result to } /** * retrieves a delimited from the data * * @param reader the reader * @param entity the escape character amp or % * @param entity resolver the entity resolver * * @throws io i o *		if an occurred reading the data */ scan i xml reader reader entity i xml entity resolver entity resolver i o xml parse { buffer result = buffer starting level = reader get stream level delim = reader read delim != '\'' delim != ' ' { xml expected input reader get reader get line nr delimited } { str = xml read reader entity ch = str at 0 ch == entity { str at 1 == '#' { result append xml process literal str } { xml process entity str reader entity resolver } } ch == ' ' { reader unread ch str = xml read reader ' ' str at 1 == '#' { result append xml process literal str } { result append str } } reader get stream level == starting level { ch == delim { } ch == 9 || ch == 10 || ch == 13 { result append ' ' } { result append ch } } { result append ch } } result to } /** * processes an entity * * @param entity the entity * @param reader the reader * @param entity resolver the entity resolver * * @throws io i o *		if an occurred reading the data */ process entity entity i xml reader reader i xml entity resolver entity resolver i o xml parse { entity = entity substring 1 entity length 1 reader entity reader = entity resolver get entity reader entity entity reader == { xml invalid entity reader get reader get line nr entity } external entity = entity resolver is external entity entity reader start stream entity reader !external entity } /** * processes a character literal * * @param entity the entity * * @throws io i o *		if an occurred reading the data */ process literal entity i o xml parse { entity at 2 == 'x' { entity = entity substring 3 entity length 1 parse entity 16 } { entity = entity substring 2 entity length 1 parse entity 10 } } /** * skips whitespace from the reader * * @param reader the reader * @param buffer where to put the whitespace the * whitespace does not have to be stored * * @throws io i o *		if an occurred reading the data */ skip whitespace i xml reader reader buffer buffer i o { ch buffer == { { ch = reader read } ch == ' ' || ch == '\t' || ch == '\n' } { { ch = reader read ch != ' ' ch != '\t' ch != '\n' { } ch == '\n' { buffer append '\n' } { buffer append ' ' } } } reader unread ch } /** * reads a character from the reader * * @param reader the reader * @param entity the escape character amp or % used to indicate * an entity * * @return the character or an entity expression like e g amp lt * * @throws io i o *		if an occurred reading the data */ read i xml reader reader entity i o xml parse { ch = reader read buffer buf = buffer buf append ch ch == entity { ch != ' ' { ch = reader read buf append ch } } buf to } /** * reads a character from the reader disallowing entities * * @param reader the reader * @param entity the escape character amp or % used to indicate * an entity */ read i xml reader reader entity i o xml parse { str = xml read reader entity ch = str at 0 ch == entity { xml unexpected entity reader get reader get line nr str } ch } /** * the data starts with < i>literal</ i> * enough chars are read to determine result * * @param reader the reader * @param literal the literal to check * * @throws io i o *		if an occurred reading the data */ check literal i xml reader reader literal i o xml parse { i = 0 i < literal length i++ { reader read != literal at i { } } } /** * an xml parse to indicate that an expected is not * encountered * * @param the of the data source * @param line nr the line number in the data source * @param expected the that is expected */ expected input line nr expected xml parse { xml parse line nr expected + expected } /** * an xml parse to indicate that an entity could not be * resolved * * @param the of the data source * @param line nr the line number in the data source * @param entity the name of the entity */ invalid entity line nr entity xml parse { xml parse line nr invalid entity ` + entity + ' } /** * an xml parse to indicate that an entity reference is * unexpected at point * * @param the of the data source * @param line nr the line number in the data source * @param entity the name of the entity */ unexpected entity line nr entity xml parse { xml parse line nr no entity reference is expected here + entity + } /** * an xml parse to indicate that a c d a t a section is * unexpected at point * * @param the of the data source * @param line nr the line number in the data source */ unexpected c d a t a line nr xml parse { xml parse line nr no c d a t a section is expected here } /** * an xml parse to indicate that a is not expected * at point * * @param the of the data source * @param line nr the line number in the data source * @param unexpected the that is unexpected */ invalid input line nr unexpected xml parse { xml parse line nr invalid input + unexpected } /** * an xml parse to indicate that the closing tag of an * element does not match the opening tag * * @param the of the data source * @param line nr the line number in the data source * @param expected name the name of the opening tag * @param wrong name the name of the closing tag */ wrong closing tag line nr expected name wrong name xml parse { xml parse line nr closing tag does not match opening tag ` + wrong name + ' != ` + expected name + ' } /** * an xml parse to indicate that extra data is encountered * in a closing tag * * @param the of the data source * @param line nr the line number in the data source */ closing tag not empty line nr xml parse { xml parse line nr closing tag must be empty } /** * an xml validation to indicate that an element is missing * * @param the of the data source * @param line nr the line number in the data source * @param parent element name the name of the parent element * @param missing element name the name of the missing element */ missing element line nr parent element name missing element name xml validation { xml validation xml validation m i s s i n g e l e m e n t line nr missing element name /*attribute name*/ /*attribute value*/ element + parent element name + expects to have a + missing element name } /** * an xml validation to indicate that an element is * unexpected * * @param the of the data source * @param line nr the line number in the data source * @param parent element name the name of the parent element * @param unexpected element name the name of the unexpected element */ unexpected element line nr parent element name unexpected element name xml validation { xml validation xml validation u n e x p e c t e d e l e m e n t line nr unexpected element name /*attribute name*/ /*attribute value*/ unexpected + unexpected element name + in a + parent element name } /** * an xml validation to indicate that an attribute is * missing * * @param the of the data source * @param line nr the line number in the data source * @param element name the name of the element * @param attribute name the name of the missing attribute */ missing attribute line nr element name attribute name xml validation { xml validation xml validation m i s s i n g a t t r i b u t e line nr element name attribute name /*attribute value*/ element + element name + expects an attribute named + attribute name } /** * an xml validation to indicate that an attribute is * unexpected * * @param the of the data source * @param line nr the line number in the data source * @param element name the name of the element * @param attribute name the name of the unexpected attribute */ unexpected attribute line nr element name attribute name xml validation { xml validation xml validation u n e x p e c t e d a t t r i b u t e line nr element name attribute name /*attribute value*/ element + element name + did not expect an attribute + named + attribute name } /** * an xml validation to indicate that an attribute has an * invalid value * * @param the of the data source * @param line nr the line number in the data source * @param element name the name of the element * @param attribute name the name of the attribute * @param attribute value the value of that attribute */ invalid attribute value line nr element name attribute name attribute value xml validation { xml validation xml validation a t t r i b u t e w i t h i n v a l v a l u e line nr element name attribute name attribute value invalid value attribute + attribute name } /** * an xml validation to indicate that a # p c d a t a element was * missing * * @param the of the data source * @param line nr the line number in the data source * @param parent element name the name of the parent element */ missing p c data line nr parent element name xml validation { xml validation xml validation m i s s i n g p c d a t a line nr /*element name*/ /*attribute name*/ /*attribute value*/ missing # p c d a t a in element + parent element name } /** * an xml validation to indicate that a # p c d a t a element was * unexpected * * @param the of the data source * @param line nr the line number in the data source * @param parent element name the name of the parent element */ unexpected p c data line nr parent element name xml validation { xml validation xml validation u n e x p e c t e d p c d a t a line nr /*element name*/ /*attribute name*/ /*attribute value*/ unexpected # p c d a t a in element + parent element name } /** * an xml validation * * @param the of the data source * @param line nr the line number in the data source * @param message the message * @param element name the name of the element * @param attribute name the name of the attribute * @param attribute value the value of that attribute */ validation line nr message element name attribute name attribute value xml validation { xml validation xml validation m i s c e r r o r line nr element name attribute name attribute value message }} 