/* * @ # connector 2 1 2006 06 05 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * ??? */package draw io i o * * geom * geom * xml dom input xml dom output /** * connector provides * the connector * * @see connector * * @author werner randelshofer * @version 2 1 2006 06 05 support connection to decorator * <br>2 0 2006 01 14 changed to support doubl precision coordinates * <br>1 0 2003 12 01 derived from 5 4b1 */public connector connector { /** * the owner of the connector */ figure owner /** * whether we should connect to the figure or to its decorator */ is connect to decorator /** * whether we are visible */ is visible /** * whether the state of connector is persistent * set to only when the user allows to change the * state of the connector */ is state persistent /** * constructs a connector that has no owner it is only * used internally to resurrect a connectors from a * storable output it should never be called directly */ connector { owner = } /** * constructs a connector with the given owner figure */ connector figure owner { owner = owner } set connect to decorator value { is connect to decorator = value } is connect to decorator { is connect to decorator } set visible value { is visible = value } is visible { is visible } figure get connector target figure f { is connect to decorator f get decorator != ? f get decorator f } /** * tests a point is contained in the connector */ contains point2 d p { get owner contains p } /** * draws connector by connectors are invisible */ draw graphics2 d g { is visible { rectangle2 d bounds = get bounds ellipse2 d circle = ellipse2 d bounds x + bounds width / 2 3 bounds y + bounds height / 2 3 6 6 g set color color blue g fill circle } } point2 d find start connection figure connection { find point connection } point2 d find end connection figure connection { find point connection } /** * gets the connection point override when the connector * does not need to distinguish between the start and end * point of a connection */ point2 d find point connection figure connection { geom center get bounds } rectangle2 d get bounds { get owner get bounds } /** * gets the connector's owner */ figure get owner { owner } /** * sets the connector's owner */ set owner figure value { owner = value } clone { { connector that = connector clone that } clone not supported e { internal = internal e to init cause e < requires j d k 1 4 } } /** * is called when the start location of the connection has been * moved by the user the user has probably done to adjust the layout * the connector may use as a hint to improve the results the next * call to find end */ update start location point2 d p { } /** * is called when the end location of the connection has been * moved by the user the user has probably done to adjust the layout * the connector may use as a hint to improve the results the next * call to find start */ update end location point2 d p { } point2 d get anchor { geom center get bounds } update anchor point2 d p { } read dom input in i o { is state persistent { is connect to decorator = in get attribute connect to decorator is visible = in get attribute visible } in open element owner owner = figure in read 0 in close element } write dom output out i o { is state persistent { is connect to decorator { out add attribute connect to decorator } is visible { out add attribute visible } } out open element owner out write get owner out close element } } 