/* xml parser factory nano xml/ * * $ revision 1 3 $ * $ date 2002/01/04 21 03 29 $ * $ name r e l e a s e 2 2 1 $ * * is part of nano xml 2 * copyright c 2000 2002 marc de scheemaecker all rights reserved * * software is provided 'as is' without any express or implied warranty * in no event will the authors be held liable any damages arising from the * use of software * * permission is granted to anyone to use software any purpose * including commercial applications and to alter it and redistribute it * freely subject to the following restrictions * * 1 the origin of software must not be misrepresented you must not * claim that you wrote the original software you use software in * a product an acknowledgment in the product documentation would be * appreciated but is not required * * 2 altered source versions must be plainly marked as such and must not be * misrepresented as being the original software * * 3 notice may not be removed or altered from any source distribution */package net n3 nanoxml io i o security access control /** * creates an xml parser * * @author marc de scheemaecker * @version $ name r e l e a s e 2 2 1 $ $ revision 1 3 $ */public xml parser factory { /** * the name of the xml parser */ d e f a u l t c l a s s = net n3 nanoxml std xml parser /** * the properties key of the xml parser name */ c l a s s k e y = net n3 nanoxml xml parser /** * creates a parser * * @see # d e f a u l t c l a s s * @see # c l a s s k e y * * @return the non parser * * @throws not found *		if the of the parser or validator could not be found * @throws instantiation *		if the parser could not be created * @throws illegal access *		if the parser could not be created */ i xml parser create xml parser not found instantiation illegal access { b e g i n p a t c h w randelshofer access control name = xml parser factory d e f a u l t c l a s s { name = get property xml parser factory c l a s s k e y xml parser factory d e f a u l t c l a s s } access control e { nothing } e n d p a t c h w randelshofer access control xml parser factory create xml parser name std xml builder } /** * creates a parser * * @see # d e f a u l t c l a s s * @see # c l a s s k e y * * @param builder the xml builder * * @return the non parser * * @throws not found *		if the of the parser could not be found * @throws instantiation *		if the parser could not be created * @throws illegal access *		if the parser could not be created */ i xml parser create xml parser i xml builder builder not found instantiation illegal access { b e g i n p a t c h w randelshofer access control name = xml parser factory d e f a u l t c l a s s { name = get property xml parser factory c l a s s k e y xml parser factory d e f a u l t c l a s s } access control e { nothing } e n d p a t c h w randelshofer access control xml parser factory create xml parser name builder } /** * creates a parser * * @param name the name of the of the xml parser * @param builder the xml builder * * @return the non parser * * @throws not found *		if the of the parser could not be found * @throws instantiation *		if the parser could not be created * @throws illegal access *		if the parser could not be created */ i xml parser create xml parser name i xml builder builder not found instantiation illegal access { cls = name name i xml parser parser = i xml parser cls instance parser set builder builder parser set validator non validator parser } } 