/* * @ # triangle figure 1 0 2006 03 27 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * */package draw * geom * io * * * draw attribute keys * geom * /** * a triangle with same dimensions as its enclosing rectangle * and apex at any of 8 places * * * @author werner randelshofer * @version 1 0 2006 03 27 created */public triangle figure attributed figure { /** * the bounds of the triangle figure */ rectangle2 d rectangle /** creates a instance */ triangle figure { 0 0 0 0 } triangle figure orientation direction { 0 0 0 0 direction } triangle figure x y width height { x y width height orientation n o r t h } triangle figure x y width height orientation direction { rectangle = rectangle2 d x y width height /* set fill color color white set stroke color color black */ o r i e n t a t i o n set direction } d r a w i n g s h a p e a n d b o u n d s a t t r i b u t e s e d i t i n g c o n n e c t i n g connector find connector point2 d p connection figure prototype { chop triangle connector } connector find compatible connector connector c is start connector { chop triangle connector } /** * the figures connector the specified location * by a chop diamond connector is * @see chop diamond connector * * connector find connector point2 d p connection figure prototype { chop triangle connector } connector find compatible connector connector c is start { chop triangle connector }*/ c o m p o s i t e f i g u r e s c l o n i n g e v e n t h a n d l i n g rectangle2 d get bounds { rectangle2 d bounds = rectangle2 d rectangle clone bounds } draw fill graphics2 d g { rectangle2 d r = rectangle2 d rectangle clone shape triangle = get bezier path grow = attribute keys get perpendicular fill growth grow != 0d { grow stroke gs = grow stroke grow attribute keys get stroke total width * s t r o k e m i t e r l i m i t f a c t o r get triangle = gs create stroked shape triangle } g fill triangle } draw stroke graphics2 d g { shape triangle = get bezier path grow = attribute keys get perpendicular draw growth grow != 0d { grow stroke gs = grow stroke grow attribute keys get stroke total width * s t r o k e m i t e r l i m i t f a c t o r get triangle = gs create stroked shape triangle } g draw triangle } collection< handle> create handles detail level { linked list< handle> handles = linked list< handle> create handles detail level detail level == 0 { handles add triangle rotation handler } handles } bezier path get bezier path { rectangle2 d r = rectangle2 d rectangle clone bezier path triangle = bezier path o r i e n t a t i o n get { n o r t h triangle move to r x + r width / 2 r y triangle line to r x + r width r y + r height triangle line to r x r y + r height n o r t h e a s t triangle move to r x r y triangle line to r x + r width r y triangle line to r x + r width r y + r height e a s t triangle move to r x r y triangle line to r x + r width r y + r height / 2d triangle line to r x r y + r height s o u t h e a s t triangle move to r x + r width r y triangle line to r x + r width r y + r height triangle line to r x r y + r height s o u t h triangle move to r x + r width / 2 r y + r height triangle line to r x r y triangle line to r x + r width r y s o u t h w e s t triangle move to r x + r width r y + r height triangle line to r x r y + r height triangle line to r x r y w e s t triangle move to r x r y + r height / 2 triangle line to r x + r width r y triangle line to r x + r width r y + r height n o r t h w e s t triangle move to r x r y + r height triangle line to r x r y triangle line to r x + r width r y } triangle set closed triangle } /** * checks a point2 d is inside the figure */ contains point2 d p { shape triangle = get bezier path grow = attribute keys get perpendicular hit growth grow != 0d { grow stroke gs = grow stroke grow attribute keys get stroke total width * s t r o k e m i t e r l i m i t f a c t o r get triangle =gs create stroked shape triangle } triangle contains p } basic set bounds point2 d anchor point2 d { rectangle x = math min anchor x x rectangle y = math min anchor y y rectangle width = math max 0 1 math abs x anchor x rectangle height = math max 0 1 math abs y anchor y } rectangle2 d get figure draw bounds { total stroke width = attribute keys get stroke total width width = 0d s t r o k e c o l o r get != { s t r o k e p l a c e m e n t get { i n s e width = 0d o u t s e s t r o k e j o i n get == basic stroke j o i n m i t e r { width = total stroke width * s t r o k e m i t e r l i m i t f a c t o r get } { width = total stroke width } c e n t e r s t r o k e j o i n get == basic stroke j o i n m i t e r { width = total stroke width / 2d * s t r o k e m i t e r l i m i t f a c t o r get } { width = total stroke width / 2d } } } width++ rectangle2 d r = get bounds geom grow r width width r } point2 d chop point2 d p { shape triangle = get bezier path grow = attribute keys get perpendicular hit growth grow != 0d { grow stroke gs = grow stroke grow attribute keys get stroke total width * s t r o k e m i t e r l i m i t f a c t o r get triangle =gs create stroked shape triangle } geom chop triangle p } /** * moves the figure to a location * @param tx the transformation matrix */ basic transform affine transform tx { point2 d anchor = get start point point2 d = get end point basic set bounds point2 d tx transform anchor anchor point2 d tx transform } triangle figure clone { triangle figure that = triangle figure clone that rectangle = rectangle2 d rectangle clone that } restore to geometry { rectangle2 d r = rectangle2 d geometry rectangle x = r x rectangle y = r y rectangle width = r width rectangle height = r height } get restore data { rectangle clone }} 