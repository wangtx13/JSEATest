/* * @ # s v g path 1 0 july 8 2006 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * */package samples svg figures * event * geom * io * * * draw * draw action * geom * samples svg * * xml * draw attribute keys * /** * s v g path is a composite figure which contains one or more * bezier figures as its children * <p> * x x x roll in the read of s v g line * * @author werner randelshofer * @version 1 0 july 8 2006 created */public s v g path attributed composite figure s v g figure { /** * path is used drawing */ general path path /** creates a instance */ s v g path { add bezier figure s v g set defaults } draw figure graphics2 d g { validate path attribute keys f i l l c o l o r get != { g set color attribute keys f i l l c o l o r get draw fill g } s t r o k e c o l o r get != { g set stroke attribute keys get stroke g set color s t r o k e c o l o r get draw stroke g } is connectors visible { draw connectors g } g draw to + +get child count get bounds x get bounds y } draw fill graphics2 d g { get children size > 0 /* bezier figure get children get 0 is closed */ { g fill path } } draw stroke graphics2 d g { g draw path } invalidate { invalidate invalidate path } validate { validate path validate } validate path { path == { path = general path path set winding rule w i n d i n g r u l e get == winding rule e v e n o d d ? general path w i n d e v e n o d d general path w i n d n o n z e r o figure child get children { bezier figure b = bezier figure child path append b get bezier path } } } invalidate path { path = } @ override write dom output out i o { write points out write attributes out } write points dom output out { builder buf = builder figure child get children { bezier figure b = bezier figure child buf append s v g to path data b get bezier path } out add attribute d buf to } write attributes dom output out i o { s v g write attributes out } @ override read dom input in i o { read points in read attributes in affine transform tx = s v g get transform in transform basic transform tx } read points dom input in i o { remove all children in get tag name equals polyline { bezier path b = bezier path points = in get attribute points tokenizer tt = tokenizer points tt has more tokens { b add bezier path node value of tt next token value of tt next token } bezier figure child = bezier figure child basic set bezier path b basic add child } in get tag name equals polygon { bezier path b = bezier path b set closed points = in get attribute points tokenizer tt = tokenizer points tt has more tokens { b add bezier path node value of tt next token value of tt next token } bezier figure child = bezier figure child basic set bezier path b basic add child } { list< bezier path> paths = s v g get path in d bezier path b paths { bezier figure child = bezier figure child basic set bezier path b basic add child } paths size == 0 { bezier figure child = bezier figure basic add child } } } read attributes dom input in i o { s v g read attributes in } basic transform affine transform tx { basic transform tx invalidate path } is empty { figure child get children { bezier figure b = bezier figure child b get point count > 0 { } } } @ override linked list< handle> create handles detail level { linked list< handle> handles detail level == 0 { handles = linked list< handle> create handles detail level handles add rotate handle } { handles = linked list< handle> figure child get children { handles add all child create handles detail level } } handles } @ override collection< action> get actions point2 d p { resource bundle labels = resource bundle get l a f bundle samples svg labels linked list< action> actions = linked list< action> actions add action labels get close path { action performed action event evt { figure child get children { bezier figure b = bezier figure child b set closed } } } actions add action labels get open path { action performed action event evt { figure child get children { bezier figure b = bezier figure child b set closed } } } actions add action labels get winding even odd { action performed action event evt { w i n d i n g r u l e set s v g path winding rule e v e n o d d } } actions add action labels get winding non zero { action performed action event evt { w i n d i n g r u l e set s v g path winding rule n o n z e r o } } actions }} 