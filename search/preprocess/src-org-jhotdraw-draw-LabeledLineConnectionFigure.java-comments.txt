/* * @ # labeled line connection 1 1 2006 02 14 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * */package draw * * * geom * event * undo * /** * a line connection with labels * * @author werner randelshofer * @version 1 1 2006 02 14 not include labels in logical bounds * <br>1 0 23 januar 2006 created */public labeled line connection figure line connection figure composite figure { layouter layouter list< figure> children = list rectangle2 d bounds rectangle2 d draw bounds /** * handles figure changes in the children */ child handler child handler = child handler child handler figure listener undoable edit listener { labeled line connection figure owner child handler labeled line connection figure owner { owner = owner } figure request remove figure event e { owner remove e get figure } figure removed figure event evt { } figure changed figure event e { ! owner is changing { owner will change owner fire figure changed e owner changed } } figure added figure event e { } figure attribute changed figure event e { } figure area invalidated figure event e { ! owner is changing { owner fire area invalidated e get invalidated area } } undoable edit happened undoable edit event e { owner fire undoable edit happened e get edit } } /** creates a instance */ labeled line connection figure { } d r a w i n g /** * draw the figure is delegated to the encapsulated presentation figure */ draw figure graphics2 d g { draw figure g figure child children { child is visible { child draw g } } } s h a p e a n d b o u n d s /** * transforms the figure */ basic transform affine transform tx { basic transform tx figure f children { f basic transform tx } invalidate bounds } basic set bounds point2 d anchor point2 d { basic set bounds anchor invalidate } rectangle2 d get bounds { get bounds /* bounds == { bounds = get bounds figure child get children front to back { child is visible { bounds add child get bounds } } } rectangle2 d bounds clone */ } rectangle2 d get figure draw bounds { draw bounds == { draw bounds = get figure draw bounds figure child get children front to back { child is visible { rectangle2 d child bounds = child get draw bounds ! child bounds is empty { draw bounds add child bounds } } } } rectangle2 d draw bounds clone } contains point2 d p { get draw bounds contains p { figure child get children front to back { child is visible child contains p } contains p } } invalidate bounds { bounds = draw bounds = } a t t r i b u t e s /** * sets an attribute of the figure * attribute key name and semantics are defined by the implementing * the figure */ set attribute attribute key key value { will change set attribute key value is attribute enabled key { children != { figure child children { child set attribute key value } } } changed } e d i t i n g figure find figure inside point2 d p { get draw bounds contains p { figure found = figure child get children front to back { child is visible { found = child find figure inside p found != { found } } } } } c o n n e c t i n g update connection { update connection layout } c o m p o s i t e f i g u r e s list< figure> get children { collections unmodifiable list children } get child count { children size } figure get child index { children get index } set index figure child { children set index child } /** * an iterator to iterate in * z order front to back over the children */ list< figure> get children front to back { children == ? linked list< figure> reversed list< figure> children } add figure figure { basic add figure get drawing != { figure add notify get drawing } } add index figure figure { basic add index figure get drawing != { figure add notify get drawing } } basic add figure figure { basic add children size figure } basic add index figure figure { children add index figure figure add figure listener child handler figure add undoable edit listener child handler invalidate } remove figure figure { index = children index of figure index == 1 { } { will change basic remove child index get drawing != { figure remove notify get drawing } changed } } figure remove child index { will change figure figure = basic remove child index get drawing != { figure remove notify get drawing } changed figure } basic remove figure figure { index = children index of figure index == 1 { } { basic remove child index } } figure basic remove child index { figure figure = children remove index figure remove figure listener child handler figure remove undoable edit listener child handler figure } remove all children { will change children size > 0 { figure figure = basic remove child children size 1 get drawing != { figure remove notify get drawing } } changed } basic remove all children { children size > 0 { basic remove child children size 1 } } l a y o u t /** * get a layouter which encapsulated a layout * algorithm figure typically a layouter * accesses the child components of figure and arranges * their graphical presentation * * * @return layout strategy used by figure */ layouter get layouter { layouter } set layouter layouter layouter { layouter = layouter } /** * a layout algorithm is used to define how the child components * should be laid out in relation to each other the task * layouting the child components presentation is delegated * to a layouter which can be plugged in at runtime */ layout { get layouter != { rectangle2 d bounds = get bounds point2 d p = point2 d bounds x bounds y rectangle2 d r = get layouter layout p p invalidate bounds } } e v e n t h a n d l i n g invalidate { invalidate invalidate bounds } validate { validate layout } add notify drawing drawing { figure child linked list< figure> children { child add notify drawing } add notify drawing } remove notify drawing drawing { figure child linked list< figure> children { child remove notify drawing } remove notify drawing } /** * informs that a figure changed the area of its display box * / * changed { * is changing count == 1 { * changed * layout * fire figure changed get draw bounds * } { * invalidate bounds * } * is changing count * }*/ labeled line connection figure clone { labeled line connection figure that = labeled line connection figure clone that child handler = child handler that that children = list< figure> figure child children { figure that child = figure child clone that children add that child that child add figure listener that child handler that child add undoable edit listener that child handler } that } remap hash map< figure figure> old to { remap old to figure child children { child remap old to } } /** * informs that a figure changed the area of its display box * / * changed { * f i x m e may * is changing count == 1 { * layout * fire figure changed get draw bounds * } { * invalidate bounds * } * is changing count * }*/ } 