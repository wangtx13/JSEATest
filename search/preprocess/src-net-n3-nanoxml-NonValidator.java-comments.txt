/* non validator nano xml/ * * $ revision 1 4 $ * $ date 2002/02/03 21 19 38 $ * $ name r e l e a s e 2 2 1 $ * * is part of nano xml 2 * copyright c 2000 2002 marc de scheemaecker all rights reserved * * software is provided 'as is' without any express or implied warranty * in no event will the authors be held liable any damages arising from the * use of software * * permission is granted to anyone to use software any purpose * including commercial applications and to alter it and redistribute it * freely subject to the following restrictions * * 1 the origin of software must not be misrepresented you must not * claim that you wrote the original software you use software in * a product an acknowledgment in the product documentation would be * appreciated but is not required * * 2 altered source versions must be plainly marked as such and must not be * misrepresented as being the original software * * 3 notice may not be removed or altered from any source distribution */package net n3 nanoxml io reader io i o io reader enumeration hashtable properties stack /** * non validator is a concrete of i xml validator which processes * the d t d and handles entity definitions it does not any validation * itself * * @author marc de scheemaecker * @version $ name r e l e a s e 2 2 1 $ $ revision 1 4 $ */public non validator i xml validator{ /** * the parameter entity resolver */ i xml entity resolver parameter entity resolver /** * contains the values attributes the different element * types */ hashtable attribute values /** * the stack of elements to be processed */ stack current elements /** * creates the validator */ non validator { attribute values = hashtable current elements = stack parameter entity resolver = xml entity resolver } /** * cleans up the when it's destroyed */ finalize throwable { parameter entity resolver = attribute values clear attribute values = current elements clear current elements = finalize } /** * sets the parameter entity resolver * * @param resolver the entity resolver */ set parameter entity resolver i xml entity resolver resolver { parameter entity resolver = resolver } /** * the parameter entity resolver * * @return the entity resolver */ i xml entity resolver get parameter entity resolver { parameter entity resolver } /** * parses the d t d the validator is responsible reading the * full d t d * * @param the which may be * @param reader the reader to read the d t d from * @param entity resolver the entity resolver * @param external the d t d is external * * @throws * something went wrong */ parse d t d i xml reader reader i xml entity resolver entity resolver external { xml skip whitespace reader orig level = reader get stream level { str = xml read reader '%' ch = str at 0 ch == '%' { xml process entity str reader parameter entity resolver } ch == '<' { process element reader entity resolver } ch == ' ' { end internal d t d } { xml invalid input reader get reader get line nr str } { ch = reader read external reader get stream level < orig level { reader unread ch end external d t d } } ch == ' ' || ch == '\t' || ch == '\n' || ch == '\r' reader unread ch } } /** * processes an element in the d t d * * @param reader the reader to read data from * @param entity resolver the entity resolver * * @throws * something went wrong */ process element i xml reader reader i xml entity resolver entity resolver { str = xml read reader '%' ch = str at 0 ch != '!' { xml skip tag reader } str = xml read reader '%' ch = str at 0 ch { ' ' xml skip comment reader ' ' process conditional section reader entity resolver ' e' process entity reader entity resolver ' a' process att list reader entity resolver xml skip tag reader } } /** * processes a conditional section * * @param reader the reader to read data from * @param entity resolver the entity resolver * * @throws * something went wrong */ process conditional section i xml reader reader i xml entity resolver entity resolver { xml skip whitespace reader str = xml read reader '%' ch = str at 0 ch != ' i' { xml skip tag reader } str = xml read reader '%' ch = str at 0 ch { ' g' process ignore section reader entity resolver ' n' xml skip tag reader } ! xml check literal reader c l u d e { xml skip tag reader } xml skip whitespace reader str = xml read reader '%' ch = str at 0 ch != ' ' { xml skip tag reader } reader subreader = c d a t a reader reader buffer buf = buffer 1024 { ch2 = subreader read ch2 < 0 { } buf append ch2 } subreader close reader start stream reader buf to } /** * processes an ignore section * * @param reader the reader to read data from * @param entity resolver the entity resolver * * @throws * something went wrong */ process ignore section i xml reader reader i xml entity resolver entity resolver { ! xml check literal reader n o r e { xml skip tag reader } xml skip whitespace reader str = xml read reader '%' ch = str at 0 ch != ' ' { xml skip tag reader } reader subreader = c d a t a reader reader subreader close } /** * processes an a t t l i s t element * * @param reader the reader to read data from * @param entity resolver the entity resolver * * @throws * something went wrong */ process att list i xml reader reader i xml entity resolver entity resolver { ! xml check literal reader t t l i s t { xml skip tag reader } xml skip whitespace reader str = xml read reader '%' ch = str at 0 ch == '%' { xml process entity str reader parameter entity resolver str = xml read reader '%' ch = str at 0 } reader unread ch element name = xml scan identifier reader xml skip whitespace reader str = xml read reader '%' ch = str at 0 ch == '%' { xml process entity str reader parameter entity resolver str = xml read reader '%' ch = str at 0 } properties props = properties ch != '>' { reader unread ch att name = xml scan identifier reader xml skip whitespace reader str = xml read reader '%' ch = str at 0 ch == '%' { xml process entity str reader parameter entity resolver str = xml read reader '%' ch = str at 0 } ch == ' ' { ch != ' ' { str = xml read reader '%' ch = str at 0 ch == '%' { xml process entity str reader parameter entity resolver str = xml read reader '%' ch = str at 0 } } } { reader unread ch xml scan identifier reader } xml skip whitespace reader str = xml read reader '%' ch = str at 0 ch == '%' { xml process entity str reader parameter entity resolver str = xml read reader '%' ch = str at 0 } ch == '#' { str = xml scan identifier reader xml skip whitespace reader ! str equals f i x e d { xml skip whitespace reader str = xml read reader '%' ch = str at 0 ch == '%' { xml process entity str reader parameter entity resolver str = xml read reader '%' ch = str at 0 } } } { reader unread ch } value = xml scan reader '%' parameter entity resolver props put att name value xml skip whitespace reader str = xml read reader '%' ch = str at 0 ch == '%' { xml process entity str reader parameter entity resolver str = xml read reader '%' ch = str at 0 } } ! props is empty { attribute values put element name props } } /** * processes an e n t i t y element * * @param reader the reader to read data from * @param entity resolver the entity resolver * * @throws * something went wrong */ process entity i xml reader reader i xml entity resolver entity resolver { ! xml check literal reader n t i t y { xml skip tag reader } xml skip whitespace reader ch = xml read reader '\0' ch == '%' { xml skip whitespace reader entity resolver = parameter entity resolver } { reader unread ch } key = xml scan identifier reader xml skip whitespace reader ch = xml read reader '%' = = ch { ' p' ! xml check literal reader u b l i c { xml skip tag reader } xml skip whitespace reader = xml scan reader '%' parameter entity resolver xml skip whitespace reader = xml scan reader '%' parameter entity resolver xml skip whitespace reader xml read reader '%' ' s' ! xml check literal reader y s t e m { xml skip tag reader } xml skip whitespace reader = xml scan reader '%' parameter entity resolver xml skip whitespace reader xml read reader '%' ' ' '\'' reader unread ch value = xml scan reader '%' parameter entity resolver entity resolver add internal entity key value xml skip whitespace reader xml read reader '%' xml skip tag reader } != { entity resolver add external entity key } } /** * indicates that an element has been started * * @param name the name of the element * @param the of the xml data of the element * @param line nr the line number in the xml data of the element */ element started name line nr { properties attribs = properties attribute values get name attribs == { attribs = properties } { attribs = properties attribs clone } current elements push attribs } /** * indicates that the current element has ended * * @param name the name of the element * @param the of the xml data of the element * @param line nr the line number in the xml data of the element */ element ended name line nr { nothing to } /** * is called when the attributes of an xml element have been * processed * there are attributes with a value which have not been * specified yet they have to be put into < i>extra attributes</ i> * * @param name the name of the element * @param extra attributes where to put extra attributes * @param the of the xml data of the element * @param line nr the line number in the xml data of the element */ element attributes processed name properties extra attributes line nr { properties props = properties current elements pop enumeration enm = props keys enm has more elements { key = enm next element extra attributes put key props get key } } /** * indicates that an attribute has been added to the current element * * @param key the name of the attribute * @param value the value of the attribute * @param the of the xml data of the element * @param line nr the line number in the xml data of the element */ attribute added key value line nr { properties props = properties current elements peek props contains key key { props remove key } } /** * indicates that a # p c d a t a element has been encountered * * @param the of the xml data of the element * @param line nr the line number in the xml data of the element */ p c data added line nr { nothing to }} 