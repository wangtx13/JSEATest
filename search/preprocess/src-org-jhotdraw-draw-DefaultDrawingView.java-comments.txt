/* * @ # drawing view 3 0 2 2006 07 03 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * ??? */package draw gui datatransfer composite transferable * undo * * datatransfer * geom * color * event * io * * * app editable component geom * xml * xml xml transferable /** * drawing view * * @author werner randelshofer * @version 3 0 2 2006 07 03 constrainer must be a bound property * <br>3 0 1 2006 06 11 draw handles when drawing view is the focused * drawing view of the drawing editor * <br>3 0 2006 02 17 reworked to support multiple drawing views in a * drawing editor * <br>2 0 2006 01 14 changed to support precision coordinates * <br>1 0 2003 12 01 derived from 5 4b1 */public drawing view j component drawing view drawing listener handle listener editable component { drawing drawing set< figure> dirty figures = hash set< figure> set< figure> selected figures = hash set< figure> rainbow = 0 linked list< handle> selection handles = linked list< handle> handle secondary handle owner linked list< handle> secondary handles = linked list< handle> handles are valid = dimension preferred size scale factor = 1 point2 d translate = point2 d 0 0 detail level dom factory dom factory drawing editor editor constrainer constrainer = grid constrainer 1 1 j label empty drawing label has permanent focus /** creates instance */ drawing view { init components set focusable add focus listener focus listener { focus gained focus event e { repaint } focus lost focus event e { repaint } } } /** is called from within the constructor to * initialize the form * w a r n i n g n o t modify the content of is * always regenerated by the form editor */ init components { g e n b e g i n init components button group1 = button group set layout set background color 255 255 255 } g e n e n d init components drawing get drawing { drawing } set get tools { } set empty drawing message value { old value = empty drawing label == ? empty drawing label get text value == { empty drawing label = } { empty drawing label = j label value empty drawing label set horizontal alignment j label c e n t e r } fire property change empty drawing message old value value repaint } get empty drawing message { empty drawing label == ? empty drawing label get text } paint component graphics gr { graphics2 d g = graphics2 d gr g set rendering hint rendering hints k e y a l p h a i n t e r p o l a t i o n rendering hints v a l u e a l p h a i n t e r p o l a t i o n q u a l i t y g set rendering hint rendering hints k e y a n t i a l i a s i n g rendering hints v a l u e a n t i a l i a s o n g set rendering hint rendering hints k e y a n t i a l i a s i n g rendering hints v a l u e a n t i a l i a s o f f g set rendering hint rendering hints k e y s t r o k e c o n t r o l rendering hints v a l u e s t r o k e n o r m a l i z e g set rendering hint rendering hints k e y s t r o k e c o n t r o l rendering hints v a l u e s t r o k e p u r e g set rendering hint rendering hints k e y f r a c t i o n a l m e t r i c s options is fractional metrics ? rendering hints v a l u e f r a c t i o n a l m e t r i c s o n rendering hints v a l u e f r a c t i o n a l m e t r i c s o f f g set rendering hint rendering hints k e y f r a c t i o n a l m e t r i c s rendering hints v a l u e f r a c t i o n a l m e t r i c s o f f g set rendering hint rendering hints k e y i n t e r p o l a t i o n rendering hints v a l u e i n t e r p o l a t i o n b i c u b i c g set rendering hint rendering hints k e y r e n d e r i n g rendering hints v a l u e r e n d e r q u a l i t y g set rendering hint rendering hints k e y t e x t a n t i a l i a s i n g options is text antialiased ? rendering hints v a l u e t e x t a n t i a l i a s o n rendering hints v a l u e t e x t a n t i a l i a s o f f draw background g draw grid g draw drawing g draw handles g draw tool g } draw background graphics2 d g { /* rainbow = rainbow + 10 % 360 g set color color color h s bto r g b rainbow / 360f 0 3f 1 0f */ position of the zero coordinate point on the view x = translate x * scale factor y = translate y * scale factor w = get width h = get height g set color get background g fill rect x y w x h y draw a gray background the area which is at negative view coordinates y > 0 { g set color color 0xf0f0f0 g fill rect 0 0 w y } x > 0 { g set color color 0xf0f0f0 g fill rect 0 0 x h } } draw grid graphics2 d g { constrainer draw g } draw drawing graphics2 d gr { drawing != { drawing get figure count == 0 empty drawing label != { empty drawing label set bounds 0 0 get width get height empty drawing label paint gr } { graphics2 d g = graphics2 d gr create affine transform tx = g get transform tx translate translate x * scale factor translate y * scale factor tx scale scale factor scale factor g set transform tx drawing set font render context g get font render context drawing draw g g dispose } } } draw handles graphics2 d g { editor != editor get focused view == { validate handles handle h get selection handles { h draw g } handle h get secondary handles { h draw g } } } draw tool graphics2 d g { editor != editor get view == editor get tool != { editor get tool draw g } } set drawing drawing d { drawing != { drawing remove drawing listener clear selection } drawing = d drawing != { drawing add drawing listener } invalidate dimension invalidate get parent != get parent validate repaint } repaint rectangle2 d r { rectangle vr = drawing to view r vr grow 1 1 repaint vr } area invalidated drawing event evt { repaint evt get invalidated area invalidate dimension } area invalidated handle event evt { repaint evt get invalidated area invalidate dimension } figure added drawing event evt { repaint the whole drawing to remove the message label evt get drawing get figure count == 1 { repaint } { repaint evt get invalidated area } invalidate dimension } figure removed drawing event evt { repaint the whole drawing to draw the message label evt get drawing get figure count == 0 { repaint } { repaint evt get invalidated area } remove from selection evt get figure invalidate dimension } invalidate { invalidate dimension invalidate } /** * adds a figure to the current selection */ add to selection figure figure { selected figures add figure invalidate handles fire selection changed repaint } /** * adds a collection of figures to the current selection */ add to selection collection< figure> figures { selected figures add all figures invalidate handles fire selection changed repaint } /** * removes a figure from the selection */ remove from selection figure figure { selected figures remove figure { invalidate handles fire selection changed } repaint } /** * a figure isn't selected it is added to the selection * otherwise it is removed from the selection */ toggle selection figure figure { selected figures contains figure { selected figures remove figure } { selected figures add figure } fire selection changed invalidate handles repaint } /** * selects all figures */ select all { selected figures clear selected figures add all drawing get figures invalidate handles fire selection changed repaint } /** * clears the current selection */ clear selection { get selection count > 0 { selected figures clear invalidate handles fire selection changed } repaint } /** * test whether a given figure is selected */ is figure selected figure check figure { selected figures contains check figure } /** * gets the current selection as a figure selection a figure selection * can be cut copied pasted */ collection< figure> get selected figures { collections unmodifiable set selected figures } /** * gets the number of selected figures */ get selection count { selected figures size } /** * gets the currently active selection handles */ list< handle> get selection handles { validate handles collections unmodifiable list selection handles } /** * gets the currently active secondary handles */ list< handle> get secondary handles { validate handles collections unmodifiable list secondary handles } /** * invalidates the handles */ invalidate handles { handles are valid { handles are valid = rectangle invalidated area = handle handle selection handles { handle remove handle listener invalidated area == { invalidated area = handle get draw bounds } { invalidated area add handle get draw bounds } handle dispose } selection handles clear secondary handles clear selected figures size { 0 invalidated area != { repaint invalidated area } 1 invalidated area != { repaint invalidated area } validate handles repaint } } } /** * validates the handles */ validate handles { ! handles are valid { handles are valid = rectangle invalidated area = level = detail level { figure figure get selected figures { handle handle figure create handles level { handle set view selection handles add handle handle add handle listener invalidated area == { invalidated area = handle get bounds } { invalidated area add handle get bounds } } } } level > 0 selection handles size == 0 detail level = level + 1 invalidated area != { repaint invalidated area } } } /** * finds a handle at a given coordinates * @return a handle no handle is found */ handle find handle point p { validate handles handle handle reversed list< handle> get secondary handles { handle contains p { handle } } handle handle reversed list< handle> get selection handles { handle contains p { handle } } } /** * gets compatible handles * @return a collection containing the handle and all compatible handles */ collection< handle> get compatible handles handle master { validate handles hash set< figure> owners = hash set< figure> linked list< handle> compatible handles = linked list< handle> owners add master get owner compatible handles add master handle handle get selection handles { ! owners contains handle get owner handle is combinable with master { owners add handle get owner compatible handles add handle } } compatible handles } /** * finds a figure at a given coordinates * @return a figure no figure is found */ figure find figure point p { get drawing find figure view to drawing p } collection< figure> find figures rectangle r { get drawing find figures view to drawing r } collection< figure> find figures within rectangle r { get drawing find figures within view to drawing r } add figure selection listener figure selection listener fsl { listener list add figure selection listener fsl } remove figure selection listener figure selection listener fsl { listener list remove figure selection listener fsl } /** * notify all listener list that have registered interest * notification on event type */ fire selection changed { listener list get listener count > 0 { figure selection event event = notify all listeners that have registered interest guaranteed to a non listeners = listener list get listener list process the listeners last to first notifying those that are interested in event i = listeners length 2 i>=0 i =2 { listeners i == figure selection listener { lazily create the event event == event = figure selection event figure selection listener listeners i+1 selection changed event } } } } handle request remove handle event e { selection handles remove e get handle e get handle dispose invalidate handles validate handles repaint e get invalidated area } invalidate dimension { preferred size = } constrainer get constrainer { constrainer } set constrainer constrainer value { constrainer old value = constrainer constrainer = value repaint fire property change constrainer old value value } /** * side effect changes view translation!!! */ dimension get preferred size { preferred size == { dimension2 d d = dimension2 d drawing != { translate x = 0 translate y = 0 figure f drawing get figures { rectangle2 d r = f get draw bounds d width = math max d width r x + r width d height = math max d height r y + r height translate x = math min translate x r x translate y = math min translate y r y } } preferred size = dimension d width + 10 translate x * scale factor d height + 10 translate y * scale factor fire view transform changed repaint } preferred size } /** * converts drawing coordinates to view coordinates */ point drawing to view point2 d p { point p x translate x * scale factor p y translate y * scale factor } /** * converts view coordinates to drawing coordinates */ point2 d view to drawing point p { point2 d p x / scale factor + translate x p y / scale factor + translate y } rectangle drawing to view rectangle2 d r { rectangle r x translate x * scale factor r y translate y * scale factor r width * scale factor r height * scale factor } rectangle2 d view to drawing rectangle r { rectangle2 d r x / scale factor + translate x r y / scale factor + translate y r width / scale factor r height / scale factor } container get container { } get scale factor { scale factor } set scale factor value { old value = scale factor scale factor = value fire view transform changed fire property change scale factor old value value invalidate dimension invalidate get parent != get parent validate repaint } fire view transform changed { handle handle selection handles { handle view transform changed } handle handle secondary handles { handle view transform changed } } set handle detail level value { detail level = value invalidate handles repaint } get handle detail level { detail level } handle request secondary handles handle event e { e get handle != secondary handle owner { secondary handle owner = e get handle secondary handles clear secondary handles add all secondary handle owner create secondary handles handle h secondary handles { h set view h add handle listener } repaint } } affine transform get drawing to view transform { affine transform t = affine transform t scale scale factor scale factor t translate translate x translate y t } set dom factory dom factory value { dom factory old value = dom factory dom factory = value fire property change dom factory old value value } dom factory get dom factory { dom factory } copy { dom factory == { get toolkit beep } hash set< figure> to be copied = hash set< figure> get selected figures to be copied size == 0 output stream out = output stream { nano xml lite dom output domo = nano xml lite dom output dom factory domo open element drawing clip figure f get drawing get figures { to be copied contains f { domo write f } } domo close element domo save out data = out to composite transferable transfer = composite transferable transfer add xml transferable data application/x drawing clip drawing clip transfer add xml transferable data text/xml drawing clip toolkit get toolkit get clipboard set contents transfer transfer } i o e { e print stack trace get toolkit beep } } cut { dom factory == { get toolkit beep } copy delete } delete { list< figure> to be deleted = list< figure> get selected figures clear selection get drawing remove all to be deleted } paste { dom factory == { get toolkit beep } { list< figure> to be selected = list< figure> data flavor flavor = data flavor application/x drawing clip drawing clip transferable transfer = toolkit get toolkit get clipboard get contents transfer is data flavor supported flavor { composite edit ce = composite edit paste get drawing fire undoable edit happened ce figure f linked list< figure> get selected figures { get drawing remove f } input stream in = { in = input stream transfer get transfer data flavor nano xml lite dom input domi = nano xml lite dom input dom factory in domi open element drawing clip i=0 n=domi get element count i < n i++ { figure f = figure domi read i get drawing add f to be selected add f } } { in != in close } clear selection add to selection to be selected get drawing fire undoable edit happened ce } { toolkit get toolkit beep } } throwable e { e print stack trace } } duplicate { collection< figure> sorted = get drawing sort get selected figures hash map< figure figure> original to duplicate map = hash map< figure figure> sorted size clear selection drawing drawing = get drawing list< figure> duplicates = list< figure> sorted size affine transform tx = affine transform tx translate 5 5 figure f sorted { figure d = figure f clone d basic transform tx duplicates add d original to duplicate map put f d drawing add d } figure f duplicates { f remap original to duplicate map } add to selection duplicates } remove notify drawing editor editor { editor = repaint } add notify drawing editor editor { editor = editor repaint } variables declaration not modify g e n b e g i n variables button group button group1 end of variables declaration g e n e n d variables } 