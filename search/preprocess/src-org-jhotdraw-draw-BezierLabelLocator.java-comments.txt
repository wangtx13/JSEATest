/* * @ # poly line decoration locator 1 0 3 februar 2004 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * */package draw geom dimension2 d geom geom * * geom * xml dom input xml dom output xml dom storable /** * locator locates a position relative to a polyline * the position is chosen in a way which is suitable labeling the polyline * the preferred size of the label is used to determine its location * * @author werner randelshofer * @version 2 0 2006 01 14 changed to support coordinates * <br>1 0 3 februar 2004 created */public bezier label locator locator dom storable { relative position angle distance /** * creates a instance * constructor is use by dom storable only */ bezier label locator { } /** creates a locator * * @param relative position the relative position of the label on the polyline * 0 0 specifies the start of the polyline 1 0 the * end of the polyline values between 0 0 and 1 0 are relative positions * on the polyline * @param angle the angle of the distance vector * @param distance the length of the distance vector */ bezier label locator relative position angle distance { relative position = relative position angle = angle distance = distance } point2 d locate figure owner { get relative point bezier figure owner } point2 d locate figure owner figure label { point2 d relative point = get relative label point bezier figure owner label relative point } /** * a point2 d on the polyline that is at the provided relative position */ point2 d get relative point bezier figure owner { point2 d point = owner get point on path relative position 3 point2 d next point = owner get point on path relative position < 0 5 ? relative position + 0 1f relative position 0 1f 3 dir = math atan2 next point y point y next point x point x relative position >= 0 5 { dir += math p i } alpha = dir + angle point2 d p = point2 d point x + distance * math cos alpha point y + distance * math sin alpha is na n p x p = point p } /** * a point2 d on the polyline that is at the provided relative position * x x x implement and move it to bezier path */ point2 d get relative label point bezier figure owner figure label { get a point on the path an the next point on the path point2 d point = owner get point on path relative position 3 point == { point2 d 0 0 } point2 d next point = owner get point on path relative position < 0 5 ? relative position + 0 1f relative position 0 1f 3 dir = math atan2 next point y point y next point x point x relative position >= 0 5 { dir += math p i } alpha = dir + angle point2 d p = point2 d point x + distance * math cos alpha point y + distance * math sin alpha is na n p x p = point dimension2 d label dim = label get preferred size relative position == 0 5 p x >= point x distance / 2 p x <= point x + distance / 2 { p y >= point y { south east point2 d p x label dim width / 2 p y } { north east point2 d p x label dim width / 2 p y label dim height } } { p x >= point x { p y >= point y { south east point2 d p x p y } { north east point2 d p x p y label dim height } } { p y >= point y { south west point2 d p x label dim width p y } { north west point2 d p x label dim width p y label dim height } } }/* percentage = relative position * 100 segment relative segment point2 d seg point relative point2 d on the segment n points = owner get point count point2 d points = owner get points n points < 2 point2 d 0 0 percentage { 0 segment = 0 seg point = owner get start point 100 segment = owner get point count 2 seg point = owner get end point total length = 0d seg length = n points 1 i=1 i < n points i++ { seg length i 1 = geom length points i 1 x points i 1 y points i x points i y total length += seg length i 1 } relative progress = percentage * total length / 101d segment = 0 seg min = 0d segment=0 segment < seg length length 1 segment++ { seg min + seg length segment > relative progress seg min += seg length segment } compute the relative point2 d on the line seg point = point2 d relative progress = seg min seg point x = points segment x * seg length segment relative progress + points segment + 1 x * relative progress / seg length segment + 5 seg point y = points segment y * seg length segment relative progress + points segment + 1 y * relative progress / seg length segment + 5 } dimension2 d label dim = label get preferred size line2 d line = line2 d points segment x points segment y points segment + 1 x points segment + 1 y dir = math atan2 points segment + 1 y points segment y points segment + 1 x points segment x alpha = dir + angle point2 d p = point2 d seg point x + distance * math cos alpha seg point y + distance * math sin alpha p x >= seg point x { p y >= seg point y { south east point2 d p x p y } { north east point2 d p x p y label dim height } } { p y >= seg point y { south west point2 d p x label dim width p y } { north west point2 d p x label dim width p y label dim height } }*/ } read dom input in { relative position = in get attribute relative position 0d angle = in get attribute angle 0d distance = in get attribute distance 0 } write dom output out { out add attribute relative position relative position out add attribute angle angle out add attribute distance distance } } 