/* * @ # line decoration 2 0 2006 01 14 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * *??? */package draw io * * geom * geom geom * draw attribute keys * /** * an standard of a line decoration it draws a shape which * is rotated and moved to the end of the line the shape is scaled by the * stroke width * * @author werner randelshofer * @version 2 0 2006 01 14 changed to support coordinates * <br>1 0 2003 12 01 derived from 5 4b1 */public line decoration line decoration { /** * is the decoration is filled */ is filled /** * is the decoration is stroked */ is stroked /** * is the stroke color is used to fill the decoration */ is solid /** * constructs an arrow tip with the given angle and radius */ line decoration is filled is stroked is solid { is filled = is filled is stroked = is stroked is solid = is solid } is filled { is filled } is stroked { is stroked } is solid { is solid } /** * draws the arrow tip in the direction specified by the given two * points template */ draw graphics2 d g figure f point2 d p1 point2 d p2 { general path path = get transformed decorator path f p1 p2 color color is filled { is solid { color = s t r o k e c o l o r get f } { color = f i l l c o l o r get f } color != { g set color color g fill path } } is stroked { color = s t r o k e c o l o r get f color != { g set color color g set stroke attribute keys get stroke f g draw path } } } /** * the drawing bounds of the decorator */ rectangle2 d get draw bounds figure f point2 d p1 point2 d p2 { general path path = get transformed decorator path f p1 p2 rectangle2 d b = path get bounds2 d rectangle2 d bounds = rectangle2 d b get x b get y b get width b get height is stroked { stroke width = s t r o k e w t h get f stroke join = s t r o k e j o i n get f miter limit = s t r o k e m i t e r l i m i t f a c t o r get f * stroke width grow stroke join == basic stroke j o i n m i t e r { grow = 1 + stroke width / 2 * miter limit } { grow = 1 + stroke width / 2 } geom grow bounds grow grow } bounds } get decoration radius figure f { stroke width = s t r o k e w t h get f scale factor stroke width > 1f { scale factor = 1d + stroke width 1d / 2d } { scale factor = 1d } get decorator path radius f * scale factor } general path get transformed decorator path figure f point2 d p1 point2 d p2 { general path path = get decorator path f stroke width = s t r o k e w t h get f affine transform transform = affine transform transform translate p1 x p1 y transform rotate math atan2 p1 x p2 x p2 y p1 y transform rotate math p i / 2 stroke width > 1f { transform scale 1d + stroke width 1d / 2d 1d + stroke width 1d / 2d } path transform transform path } set filled b { is filled = b } set stroked b { is stroked = b } set solid b { is solid = b } /** * hook to calculates the path of the decorator */ general path get decorator path figure f /** * hook to calculates the radius of the decorator path */ get decorator path radius figure f } 