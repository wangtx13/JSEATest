/* * @ # dom input 2 1 2006 07 08 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * */package xml * xml parsers * xml transform * xml transform dom * xml transform stream * w3c dom * io * * /** * dom input * * @author werner randelshofer * @version 2 1 2006 07 08 support which don't have an * <br>2 0 2006 06 10 support and added * <br>1 0 february 17 2004 created */public dom input dom input { /** * map is used to unmarshall references to to * the xml dom a key in map is a representing a marshalled * reference a value in map is an unmarshalled */ hash map< object> idobjects = hash map< object> /** * the document used input */ document document /** * the current node used input */ node current /** * the factory used to create from xml tag names */ dom factory factory dom input dom factory factory input stream in i o { factory = factory { transformer t = transformer factory instance transformer dom result result = dom result t transform stream source in result document = document result get node current = document } transformer e { i o = i o e get message init cause e } } dom input dom factory factory reader in i o { factory = factory { transformer t = transformer factory instance transformer dom result result = dom result t transform stream source in result document = document result get node current = document } transformer e { i o = i o e get message init cause e } } /** * the tag name of the current element */ get tag name { element current get tag name } /** * gets an attribute of the current element of the dom document */ get attribute name value { value = element current get attribute name value length == 0 ? value value } /** * gets the text of the current element of the dom document */ get text { get text } /** * gets the text of the current element of the dom document */ get text value { current get child nodes get length == 0 value builder buf = builder get text current buf buf to } get text node n builder buf { n get node value != buf append n get node value node list children = n get child nodes i=0 i < children get length i++ { get text children item i buf } } /** * gets an attribute of the current element of the dom document and of * all parent dom elements */ list< string> get inherited attribute name { linked list< string> values = linked list< string> node node = current node != { value = element node get attribute name values add first value node = node get parent node } values } /** * gets an attribute of the current element of the dom document */ get attribute name value { value = element current get attribute name value length == 0 ? value decode value value } /** * gets an attribute of the current element of the dom document */ get attribute name value { value = element current get attribute name value length == 0 ? value parse value } /** * gets an attribute of the current element of the dom document */ get attribute name value { value = element current get attribute name value length == 0 ? value value of value value } /** * the number of child elements of the current element */ get element count { count = 0 node list list = current get child nodes i=0 i < list get length i++ { node node = list item i node element { count++ } } count } /** * the number of child elements with the specified tag name * of the current element */ get element count tag name { count = 0 node list list = current get child nodes i=0 i < list get length i++ { node node = list item i node element element node get tag name equals tag name { count++ } } count } /** * opens the element with the specified index and makes it the current node */ open element index { count = 0 node list list = current get child nodes len = list get length i=0 i < len i++ { node node = list item i node element { count++ == index { current = node } } } } /** * opens the last element with the specified name and makes it the current node */ open element tag name { count = 0 node list list = current get child nodes len = list get length i=0 i < len i++ { node node = list item i node element element node get tag name equals tag name { current = node } } illegal argument element not found +tag name } /** * opens the element with the specified name and index and makes it the * current node */ open element tag name index { count = 0 node list list = current get child nodes len = list get length i=0 i < len i++ { node node = list item i node element element node get tag name equals tag name { count++ == index { current = node } } } illegal argument no such child +tag name+ +index+ } /** * closes the current element of the dom document * the parent of the current element becomes the current element * @exception illegal argument the provided tag name does * not match the tag name of the element */ close element { /* ! element current get tag name equals tag name { illegal argument attempt to close wrong element +tag name + != + element current get tag name }*/ current = current get parent node } /** * reads an from the current element */ read i o { read 0 } /** * reads an from the current element */ read index i o { open element index o tag name = get tag name tag name equals { o = } tag name equals { o = get text } tag name equals { o = decode get text } tag name equals { o = decode get text } tag name equals { o = parse get text } tag name equals { o = parse get text } tag name equals { o = value of get text } tag name equals color { o = color get attribute rgba 0xff } tag name equals { a = get element count i=0 i < a length i++ { a i = read i value } o = a } tag name equals { a = get element count i=0 i < a length i++ { a i = read i value } o = a } tag name equals { a = get element count i=0 i < a length i++ { a i = read i value } o = a } tag name equals font { o = font get attribute name dialog get attribute style 0 get attribute size 0 } tag name equals { o = factory create get attribute type get text } { ref = get attribute ref = get attribute ref keep track of which have an == { o = factory create get tag name } idobjects contains key { o = idobjects get } { o = factory create get tag name idobjects put o } ref == { o dom storable { dom storable o read } } } close element o }} 