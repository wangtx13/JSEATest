/* * @ # connection figure 2 0 2006 01 14 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * */package draw * geom * * /** * figures to connect connectors provided by figures * a connection figure knows its start and end connector * it uses the connectors to locate its connection points <p> * a connection figure can have multiple bezier segments it provides * operations to split and join bezier segments * * * @author werner randelshofer * @version 2 0 2006 01 14 changed to support precision coordinates * <br>1 0 2003 12 01 derived from 5 4b1 */public connection figure figure { d r a w i n g s h a p e a n d b o u n d s a t t r i b u t e s e d i t i n g c o n n e c t i n g	/**	 * sets the start connector of the connection * set to to disconnect the start connection 	 * @param start the start figure of the connection	 */	public set start connector connector start 	/**	 * gets the start connector * there is no start connection 	 */	public connector get start connector 	/**	 * sets the end connector of the connection * set to to disconnect the end connection 	 * @param end the end figure of the connection	 */	public set end connector connector end 	/**	 * gets the end connector * there is no end connection 	 */	public connector get end connector 	/**	 * updates the connection * f i x m e what das do?	 */	public update connection 	/**	 * checks two figures can be connected using connection figure * implement to constrain the allowed connections between figures 	 */	public can connect figure start figure end 	/**	 * checks connection figure can be attached to the provided * start figure * is used to provide an early feedback to the user when he/she * creates a connection 	 */	public can connect figure start 	/** * checks the connection figure connects the same figures * * f i x m e what we need for? */	public connects same connection figure other 	/**	 * sets the start point 	 */	public set start point point2 d p 	/**	 * sets the end point 	 */	public set end point point2 d p 	/**	 * sets the specified point 	 */	public set point index point2 d p 	/**	 * gets the point count 	 */	public get point count /** * the specified point */ point2 d get point index 	/**	 * gets the start point 	 */	public point2 d get start point 	/**	 * gets the end point 	 */	public point2 d get end point 	/**	 * gets the start figure of the connection * is a convenience doing get start connector get owner * and handling cases 	 */	public figure get start figure 	/**	 * gets the end figure of the connection * is a convenience doing get end connector get owner * and handling cases 	 */	public figure get end figure c o m p o s i t e f i g u r e s /** * get a liner which encapsulated a lineout * algorithm figure typically a liner * accesses the child components of figure and arranges * their graphical presentation * * @return lineout strategy used by figure */ liner get liner /** * a lineout algorithm is used to define how the child components * should be laid out in relation to each other the task * lineouting the child components presentation is delegated * to a liner which can be plugged in at runtime */ lineout /** * set a liner which encapsulated a lineout * algorithm figure typically a liner * accesses the child components of figure and arranges * their graphical presentation it is a good idea to set * the liner in the initialize * so it can be recreated a graphical composite figure is * read and restored from a storable input stream * * * @param value	encapsulation of a lineout algorithm */ set liner liner value c l o n i n g e v e n t h a n d l i n g} 