/* * @ # resource bundle 1 7 2006 05 06 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * */package * * text * net * io * /** * is a convenience wrapper accessing resources stored in a resource bundle * * @author werner randelshofer staldenmattweg 2 c h 6405 immensee switzerland * @version 1 7 2006 05 06 suffixes changed redirection via locale added * <br> 1 6 1 2006 04 12 get bundle added * <br> 1 6 2006 03 15 set base class/get base added * <br> 1 5 2006 02 15 get get l a f bundle configure button * and get tip added * <br> 1 4 2005 01 04 configure action and configure menu added * <br> 1 3 2001 10 10 the resource name changed from 'name metal' * to 'name' * <br> 1 2 2001 07 23 adaptation to j d k 1 3 in progress * <br> 1 0 2000 06 10 created */public resource bundle { /** the wrapped resource bundle */ resource bundle resource base = get /** * creates a resouce bundle which wraps * the provided resource bundle */ resource bundle resource bundle r { resource = r } resource bundle get bundle { resource } /** * get a from the resource bundle * <br> convenience to save casting * * @param key the key of the property * @return the value of the property the key * the property is missing */ get key { { resource get key } missing resource e { key } } /** * get an from the resource bundle * <br> convenience to save casting * * @param key the key of the property * @return the value of the property 1 * the property is missing */ get key { { value of resource get key } missing resource e { 1 } } /** * get an image icon from the resource bundle * <br> convenience * * @param key the key of the property appends icon to the key * @return the value of the property * the property is missing */ image icon get image icon key base { { rsrc name = resource get key+ icon rsrc name equals { } ! rsrc name starts with / { image dir { image dir = resource get $image dir ! image dir ends with / { image dir = image dir+ / } } missing resource e { image dir = } rsrc name = image dir+rsrc name } u r l url = base get resource rsrc name /* { f = url to u r i ! f { out f+ does not exist! } } throwable t { t print stack trace }*/ url == ? image icon url } missing resource e { } } /** * get a mnemonic from the resource bundle * <br> convenience * * @param key the key of the property * @return the first of the value of the property * '\0' the property is missing */ get mnemonic key { s = resource get key s == || s length == 0 ? '\0' s at 0 } /** * get a mnemonic from the resource bundle * <br> convenience * * @param key the key of the property appends mnem to the key * @return the first of the value of the property * '\0' the property is missing */ get mnem key { s { s = resource get key+ mnem } missing resource e { s = } s == || s length == 0 ? '\0' s at 0 } /** * get a mnemonic from the resource bundle * <br> convenience * * @param key the key of the property appends tip to the key * @return the tool tip no tooltip is defined */ get tip key { { resource get key+ tip } missing resource e { } } /** * get a key stroke from the resource bundle * < b r> convenience * * @param key the key of the property * @return <code>javax key stroke get key stroke value </code> * the property is missing */ key stroke get key stroke key { key stroke ks = { s = resource get key ks = s == ? key stroke key stroke get key stroke s } no such element e { } ks } /** * get a key stroke from the resource bundle * < b r> convenience * * @param key the key of the property adds acc to the key * @return <code>javax key stroke get key stroke value </code> * the property is missing */ key stroke get acc key { key stroke ks = { s = resource get key+ acc ks = s == ? key stroke key stroke get key stroke s } missing resource e { } no such element e { } ks } get formatted key argument { message format format resource get key {argument} } get formatted key arguments { message format format resource get key arguments } /** * get the appropriate resource bundle subclass * the base name is extended by the look and feel * and by the locale * * the look and feel is metal * * @see resource bundle */ resource bundle get l a f bundle base name missing resource { get l a f bundle base name locale get /* resource bundle r { r = resource bundle resource bundle get bundle base name + + u i manager get look and feel get } missing resource e { r = resource bundle resource bundle get bundle base name } r */ } set base base { base = base } get base { base } configure action action action argument { configure action action argument get base } configure action action action argument base { action put value action n a m e get argument action put value action a c c e l e r a t o r k e y get acc argument action put value action m n e m o n i c k e y get mnem argument action put value action s m a l l i c o n get image icon argument base } configure button button button argument { configure button button argument get base } configure button button button argument base { button set text get argument button set a c c e l e r a t o r k e y get acc argument action put value action m n e m o n i c k e y get mnem argument button set icon get image icon argument base button set tool tip text get tip argument } configure tool bar button button button argument { configure tool bar button button argument get base } configure tool bar button button button argument base { button set text button set a c c e l e r a t o r k e y get acc argument action put value action m n e m o n i c k e y get mnem argument button set icon get image icon argument base button set tool tip text get tip argument } configure menu j menu item menu argument { menu set text get argument ! menu j menu { menu set accelerator get acc argument } menu set mnemonic get mnem argument } /** * get the appropriate resource bundle subclass * the of the current look and feel is prepended to the locale attributes * * @see resource bundle */ resource bundle get l a f bundle base name locale locale missing resource { resource bundle r /* locale laf locale = locale locale get language locale get country u i manager get look and feel get r = resource bundle resource bundle get bundle base name laf locale */ { r = resource bundle resource bundle get bundle base name+' '+ u i manager get look and feel get locale } missing resource e { r = resource bundle resource bundle get bundle base name locale } r }} 