/* * @ # j sheet 2 0 2006 07 02 * * copyright c 2005 2006 werner randelshofer * staldenmattweg 2 immensee c h 6405 switzerland * all rights reserved * * software is the confidential and proprietary information of * werner randelshofer confidential information you shall not * disclose such confidential information and shall use it only in * accordance with the terms of the license agreement you entered into * with werner randelshofer */package gui * event * peer * beans * reflect * * event * plaf * gui event * * /** * j sheet is a document modal dialog which is displayed below the title bar * of a j frame * <p> * a j sheet blocks input on its owner window it is visible * <p> * unlike application modal dialogs the show of a j sheet does * immediately when the j sheet has become visible applications need to use * a sheet listener to get the value of a j sheet * <p> * requires 1 4 * <p> * caveats we are using an unsupported a p i call to make the j sheet translucent * a p i may go away in future versions of the macintosh runtime * in such a we hopefully just end up with a non opaque sheet * * @author werner randelshofer * @version 1 4 2006 07 02 rewritten independent use of the quaqua look and * feel * <br>1 3 2006 04 15 request focus show window title of parent window * when displaying sheet as a regular dialog window * <br>1 2 2006 02 18 set window decoration style to n o n e get sheet border * from u i manager * <br>1 1 2005 10 15 bring sheet to front when showing an option pane * or a filechooser show message sheet with a sheet listener added * <br>1 0 1 2005 10 08 clear value * <br>1 0 september 25 2005 created */public j sheet j dialog { /** * event listener list */ event listener list listener list = event listener list /** * handler is used to handle movements of the owner * the owner moves we have to change the location of the sheet as well */ component listener owner movement handler /** * is non we put the owner to the specified location * when the sheet is hidden */ point shift back location /** * we need to keep track of the old owner position in order to avoid * processing duplicate owner moved events */ point old location /** * focus owner on the owner window before the sheet is shown */ component old focus owner /** * is set to when the listeners the j sheet are installed on * the parent component */ is installed /** * is set to the j sheet uses a transition effect when shown * and when hidden */ is animated = /** * creates a j sheet */ j sheet frame owner { owner init } /** * creates a j sheet */ j sheet dialog owner { owner init } init { get owner != is show as sheet { set undecorated get root pane set window decoration style j root pane n o n e get root pane set border u i manager get border sheet border } we move the sheet when the user moves the owner so that it will always stay centered below the title bar of the owner the user has moved the owner we 'forget' the shift back location and don't shift the owner back to the place it was when we opened the sheet owner movement handler = component adapter { component moved component event evt { window owner = get owner point location = owner get location ! location equals old location { set location location x + owner get width get width / 2 location y + owner get insets top shift back location = old location = location } } } } is show as sheet { u i manager get sheet show as sheet } /** * installs the sheet on the owner * is invoked just before the j sheet is shown */ install sheet { ! is installed { window owner = get owner owner != { determine the location the sheet and its owner the sheet will be visible in we have to shift the owner to fully display the dialog we remember the shift back position point owner loc = owner get location point sheet loc is show as sheet { owner j frame { sheet loc = point owner loc x + owner get width get width / 2 owner loc y + owner get insets top + j frame owner get root pane get content pane get y } owner j dialog { sheet loc = point owner loc x + owner get width get width / 2 owner loc y + owner get insets top + j dialog owner get root pane get content pane get y } { sheet loc = point owner loc x + owner get width get width / 2 owner loc y + owner get insets top } sheet loc x < 0 { owner set location owner loc x sheet loc x owner loc y sheet loc x = 0 shift back location = owner loc old location = owner get location } { shift back location = old location = owner loc } } { sheet loc = point owner loc x + owner get width get width / 2 owner loc y + owner get height get height / 2 } set location sheet loc old focus owner = owner get focus owner owner set focusable window state owner set enabled j frame owner set resizable u i manager get sheet show as sheet { owner add component listener owner movement handler } { owner frame { set title frame owner get title } } } is installed = } } /** * uninstalls the sheet on the owner * is invoked immediately after the j sheet is hidden */ uninstall sheet { is installed { window owner = get owner owner != { owner set focusable window state owner set enabled j frame owner set resizable owner remove component listener owner movement handler shift back location != { owner set location shift back location } old focus owner != { owner to front old focus owner request focus } } is installed = } } add notify { add notify u i manager get sheet show as sheet { ch randelshofer quaqua quaqua utilities set window alpha { window t y p e } {this 240} quaqua utilities set window alpha 240 } } /** * is set to the j sheet uses a transition effect when shown * and when hidden */ set animated value { old value = is animated is animated = value fire property change animated old value value } /** * the j sheet uses a transition effect when shown * and when hidden */ is animated { is animated } dispose { dispose uninstall sheet } hide0 { hide } show0 { show } hide { is animated is show as sheet { get content pane set visible rectangle start bounds = get bounds parent width = get parent get width rectangle end bounds = rectangle parent width < start bounds width ? start bounds x + start bounds width parent width / 2 start bounds x start bounds y math min start bounds width parent width 0 timer timer = timer 20 timer add action listener action listener { start time end time action performed action event evt { now = current time millis start time == 0 { start time = now end time = start time + 200 } now > end time { timer stop hide0 set bounds start bounds get content pane set visible uninstall sheet } { ratio = now start time / end time start time set bounds start bounds x * 1f ratio + end bounds x * ratio start bounds y * 1f ratio + end bounds y * ratio start bounds width * 1f ratio + end bounds width * ratio start bounds height * 1f ratio + end bounds height * ratio } } } timer set repeats timer set initial delay 5 timer start } { hide0 uninstall sheet } } show { is animated is show as sheet { install sheet get content pane set visible start time = current time millis end time = start time + 300 rectangle end bounds = get bounds parent width = get parent get width rectangle start bounds = rectangle parent width < end bounds width ? end bounds x + end bounds width parent width / 2 end bounds x end bounds y math min end bounds width parent width 0 set bounds start bounds show0 timer timer = timer 20 timer add action listener action listener { start time end time action performed action event evt { now = current time millis start time == 0 { start time = now end time = start time + 200 } now > end time { timer stop set bounds end bounds get content pane set visible request focus reinserted window get parent to front } { ratio = now start time / end time start time set bounds start bounds x * 1f ratio + end bounds x * ratio start bounds y * 1f ratio + end bounds y * ratio start bounds width * 1f ratio + end bounds width * ratio start bounds height * 1f ratio + end bounds height * ratio } } } timer set repeats timer set initial delay 5 timer start } { install sheet show0 } } /** * adds a sheet listener */ add sheet listener sheet listener l { listener list add sheet listener l } /** * removes a sheet listener */ remove sheet listener sheet listener l { listener list remove sheet listener l } /** * notify all listeners that have registered interest * notification on event type the event instance * is lazily created using the passed into * the fire */ fire option selected j option pane pane { value = pane get value option value == { option = j option pane c l o s e d o p t i o n } { pane get options == { value { option = value value } { option = j option pane c l o s e d o p t i o n } } { option = j option pane c l o s e d o p t i o n options = pane get options i = 0 n = options length i < n i++ { options i equals value { option = i } } option == j option pane c l o s e d o p t i o n { value = } } } fire option selected pane option value pane get input value } /** * notify all listeners that have registered interest * notification on event type the event instance * is lazily created using the passed into * the fire */ fire option selected j option pane pane option value input value { sheet event sheet event = guaranteed to a non listeners = listener list get listener list process the listeners last to first notifying those that are interested in event i = listeners length 2 i>=0 i =2 { listeners i == sheet listener { lazily create the event sheet event == sheet event = sheet event pane option value input value sheet listener listeners i+1 option selected sheet event } } } /** * notify all listeners that have registered interest * notification on event type the event instance * is lazily created using the passed into * the fire */ fire option selected j chooser pane option { sheet event sheet event = guaranteed to a non listeners = listener list get listener list process the listeners last to first notifying those that are interested in event i = listeners length 2 i>=0 i =2 { listeners i == sheet listener { lazily create the event sheet event == sheet event = sheet event pane option sheet listener listeners i+1 option selected sheet event } } } /** * displays an option pane as a sheet on its parent window * * @param pane the option pane * @param parent component the parent of the option pane * @param listener the listener sheet events */ show sheet j option pane pane component parent component sheet listener listener { j sheet sheet = create sheet pane parent component style from message type pane get message type sheet add sheet listener listener sheet show } /** * brings up a sheet with the options <i> yes</i> * <i> no</i> and <i> cancel</i> * * @param parent component determines the <code> frame</code> in which the *			sheet is displayed <code>null</code> *			or the <code>parent component</code> has no *			<code> frame</code> the sheet is displayed as a dialog * @param message the <code> object</code> to display *???@param listener the listener sheet events */ show confirm sheet component parent component message sheet listener listener { show confirm sheet parent component message j option pane y e s n o c a n c e l o p t i o n listener } /** * brings up a sheet where the number of choices is determined * by the <code>option type</code> parameter * * @param parent component determines the <code> frame</code> in which the *			sheet is displayed <code>null</code> *			or the <code>parent component</code> has no *			<code> frame</code> the sheet is displayed as a dialog * @param message the <code> object</code> to display * @param option type an designating the options available on the dialog * <code> y e s n o o p t i o n</code> or *			<code> y e s n o c a n c e l o p t i o n</code> *???@param listener the listener sheet events */ show confirm sheet component parent component message option type sheet listener listener { show confirm sheet parent component message option type j option pane q u e s t i o n m e s s a g e listener } /** * brings up a sheet where the number of choices is determined * by the <code>option type</code> parameter where the * <code>message type</code> * parameter determines the icon to display * the <code>message type</code> parameter is primarily used to supply * a icon from the look and feel * * @param parent component determines the <code> frame</code> in *			which the dialog is displayed <code>null</code> *			or the <code>parent component</code> has no *			<code> frame</code> the sheet is displayed as a dialog * @param message the <code> object</code> to display * @param option type an designating the options available *			on the dialog <code> y e s n o o p t i o n</code> *			or <code> y e s n o c a n c e l o p t i o n</code> * @param message type an designating the kind of message is * primarily used to determine the icon from the pluggable * look and feel <code> j option pane e r r o r m e s s a g e</code> *			<code> j option pane i n f o r m a t i o n m e s s a g e</code> * <code> j option pane w a r n i n g m e s s a g e</code> * <code> j option pane q u e s t i o n m e s s a g e</code> *			or <code> j option pane p l a i n m e s s a g e</code> *???@param listener the listener sheet events */ show confirm sheet component parent component message option type message type sheet listener listener { show confirm sheet parent component message option type message type listener } /** * brings up a sheet with a specified icon where the number of * choices is determined by the <code>option type</code> parameter * the <code>message type</code> parameter is primarily used to supply * a icon from the look and feel * * @param parent component determines the <code> frame</code> in which the *			dialog is displayed <code>null</code> *			or the <code>parent component</code> has no *			<code> frame</code> the sheet is displayed as a dialog * @param message the to display * @param option type an designating the options available on the dialog * <code> y e s n o o p t i o n</code> *			or <code> y e s n o c a n c e l o p t i o n</code> * @param message type an designating the kind of message is * primarily used to determine the icon from the pluggable * look and feel <code> j option pane e r r o r m e s s a g e</code> *			<code> j option pane i n f o r m a t i o n m e s s a g e</code> * <code> j option pane w a r n i n g m e s s a g e</code> * <code> j option pane q u e s t i o n m e s s a g e</code> *			or <code> j option pane p l a i n m e s s a g e</code> * @param icon the icon to display in the dialog *???@param listener the listener sheet events */ show confirm sheet component parent component message option type message type icon icon sheet listener listener { show option sheet parent component message option type message type icon listener } /** * shows a question message sheet requesting input from the user * parented to <code>parent component</code> * * @param parent component the parent <code> component</code> the *		dialog *???@param listener the listener sheet events */ show input sheet component parent component message sheet listener listener { show input sheet parent component message j option pane q u e s t i o n m e s s a g e listener } /** * shows a question message sheet requesting input from the user and * parented to <code>parent component</code> the input value will be * initialized to <code>initial selection value</code> * * @param parent component the parent <code> component</code> the *		dialog * @param message the <code> object</code> to display * @param initial selection value the value used to initialize the input * field *???@param listener the listener sheet events */ show input sheet component parent component message initial selection value sheet listener listener { show input sheet parent component message j option pane q u e s t i o n m e s s a g e initial selection value listener } /** * shows a sheet requesting input from the user parented to * <code>parent component</code> and message type <code>message type</code> * * @param parent component the parent <code> component</code> the *			dialog * @param message the <code> object</code> to display * @param message type the type of message that is to be displayed * 	<code> j option pane e r r o r m e s s a g e</code> *			<code> j option pane i n f o r m a t i o n m e s s a g e</code> *			<code> j option pane w a r n i n g m e s s a g e</code> * 	<code> j option pane q u e s t i o n m e s s a g e</code> *			or <code> j option pane p l a i n m e s s a g e</code> *???@param listener the listener sheet events */ show input sheet component parent component message message type sheet listener listener { show input sheet parent component message message type listener } /** * prompts the user input in a sheet where the * initial selection possible selections and all other options can * be specified the user will able to choose from * <code>selection values</code> where <code>null</code> implies the * user can input * whatever they wish usually by means of a <code> j text field</code> * <code>initial selection value</code> is the initial value to prompt * the user with it is up to the u i to decide how best to represent * the <code>selection values</code> but usually a * <code> j combo box</code> <code> j list</code> or * <code> j text field</code> will be used * * @param parent component the parent <code> component</code> the *			dialog * @param message the <code> object</code> to display * @param message type the type of message to be displayed * <code> j option pane e r r o r m e s s a g e</code> *			<code> j option pane i n f o r m a t i o n m e s s a g e</code> *			<code> j option pane w a r n i n g m e s s a g e</code> * <code> j option pane q u e s t i o n m e s s a g e</code> *			or <code> j option pane p l a i n m e s s a g e</code> * @param icon the <code> icon</code> image to display * @param selection values an of <code> object</code>s that *			gives the possible selections * @param initial selection value the value used to initialize the input * field *???@param listener the listener sheet events */ show input sheet component parent component message message type icon icon selection values initial selection value sheet listener listener { j option pane pane = j option pane message message type j option pane o k c a n c e l o p t i o n icon pane set wants input pane set selection values selection values pane set initial selection value initial selection value pane set component orientation parent component == ? j option pane get root frame parent component get component orientation style = style from message type message type j sheet sheet = create sheet pane parent component style pane select initial value /* sheet add window listener window adapter { window closed window event evt { sheet dispose } } */ sheet add sheet listener listener sheet show sheet to front } /** * brings up an information message sheet * * @param parent component determines the <code> frame</code> in *		which the dialog is displayed <code>null</code> *		or the <code>parent component</code> has no *		<code> frame</code> the sheet is displayed as a dialog * @param message the <code> object</code> to display */ show message sheet component parent component message { show message sheet parent component message j option pane i n f o r m a t i o n m e s s a g e } /** * brings up an information message sheet * * @param parent component determines the <code> frame</code> in *		which the dialog is displayed <code>null</code> *		or the <code>parent component</code> has no *		<code> frame</code> the sheet is displayed as a dialog * @param message the <code> object</code> to display * @param listener listener is notified when the sheet is dismissed */ show message sheet component parent component message sheet listener listener { show message sheet parent component message j option pane i n f o r m a t i o n m e s s a g e listener } /** * brings up a sheet that displays a message using a * icon determined by the <code>message type</code> parameter * * @param parent component determines the <code> frame</code> *		in which the dialog is displayed <code>null</code> *		or the <code>parent component</code> has no *		<code> frame</code> the sheet is displayed as a dialog * @param message the <code> object</code> to display * @param message type the type of message to be displayed * <code> j option pane e r r o r m e s s a g e</code> *			<code> j option pane i n f o r m a t i o n m e s s a g e</code> *			<code> j option pane w a r n i n g m e s s a g e</code> * <code> j option pane q u e s t i o n m e s s a g e</code> *			or <code> j option pane p l a i n m e s s a g e</code> */ show message sheet component parent component message message type { show message sheet parent component message message type } /** * brings up a sheet that displays a message using a * icon determined by the <code>message type</code> parameter * * @param parent component determines the <code> frame</code> *		in which the dialog is displayed <code>null</code> *		or the <code>parent component</code> has no *		<code> frame</code> the sheet is displayed as a dialog * @param message the <code> object</code> to display * @param message type the type of message to be displayed * <code> j option pane e r r o r m e s s a g e</code> *			<code> j option pane i n f o r m a t i o n m e s s a g e</code> *			<code> j option pane w a r n i n g m e s s a g e</code> * <code> j option pane q u e s t i o n m e s s a g e</code> *			or <code> j option pane p l a i n m e s s a g e</code> * @param listener listener is notified when the sheet is dismissed */ show message sheet component parent component message message type sheet listener listener { show message sheet parent component message message type listener } /** * brings up a sheet displaying a message specifying all * * @param parent component determines the <code> frame</code> in which the *			sheet is displayed <code>null</code> *			or the <code>parent component</code> has no *			<code> frame</code> the sheet is displayed as a dialog * @param message the <code> object</code> to display * @param message type the type of message to be displayed * <code> j option pane e r r o r m e s s a g e</code> *			<code> j option pane i n f o r m a t i o n m e s s a g e</code> *			<code> j option pane w a r n i n g m e s s a g e</code> * <code> j option pane q u e s t i o n m e s s a g e</code> *			or <code> j option pane p l a i n m e s s a g e</code> * @param icon an icon to display in the sheet that helps the user * identify the kind of message that is being displayed * @param listener listener is notified when the sheet is dismissed */ show message sheet component parent component message message type icon icon sheet listener listener { show option sheet parent component message j option pane d e f a u l t o p t i o n message type icon listener } /** * brings up a sheet with a specified icon where the initial * choice is determined by the <code>initial value</code> parameter and * the number of choices is determined by the <code>option type</code> * parameter * <p> * <code>option type</code> is <code> y e s n o o p t i o n</code> * or <code> y e s n o c a n c e l o p t i o n</code> * and the <code>options</code> parameter is <code>null</code> * then the options are * supplied by the look and feel * <p> * the <code>message type</code> parameter is primarily used to supply * a icon from the look and feel * * @param parent component determines the <code> frame</code> *			in which the dialog is displayed * <code>null</code> or the *			<code>parent component</code> has no *			<code> frame</code> the sheet is displayed as a dialog * @param message the <code> object</code> to display * @param option type an designating the options available on the *			dialog <code> y e s n o o p t i o n</code> *			or <code> y e s n o c a n c e l o p t i o n</code> * @param message type an designating the kind of message is * primarily used to determine the icon from the *			pluggable look and feel <code> j option pane e r r o r m e s s a g e</code> *			<code> j option pane i n f o r m a t i o n m e s s a g e</code> * <code> j option pane w a r n i n g m e s s a g e</code> * <code> j option pane q u e s t i o n m e s s a g e</code> *			or <code> j option pane p l a i n m e s s a g e</code> * @param icon the icon to display in the dialog * @param options an of indicating the possible choices * the user can make the are components they * are rendered properly non <code> string</code> *			objects are * rendered using their <code>to string</code> * parameter is <code>null</code> *			the options are determined by the look and feel * @param initial value the that represents the selection * the dialog only meaningful <code>options</code> *			is used can be <code>null</code> *???@param listener the listener sheet events */ show option sheet component parent component message option type message type icon icon options initial value sheet listener listener { j option pane pane = j option pane message message type option type icon options initial value pane set initial value initial value pane set component orientation parent component == ? j option pane get root frame parent component get component orientation style = style from message type message type j sheet sheet = create sheet pane parent component style pane select initial value sheet add sheet listener listener sheet show sheet to front } style from message type message type { message type { j option pane e r r o r m e s s a g e j root pane e r r o r d i a l o g j option pane q u e s t i o n m e s s a g e j root pane q u e s t i o n d i a l o g j option pane w a r n i n g m e s s a g e j root pane w a r n i n g d i a l o g j option pane i n f o r m a t i o n m e s s a g e j root pane i n f o r m a t i o n d i a l o g j option pane p l a i n m e s s a g e j root pane p l a i n d i a l o g } } j sheet create sheet j option pane pane component parent component style { window window = get window component parent component j sheet sheet window frame { sheet = j sheet frame window } { sheet = j sheet dialog window } container content pane = sheet get content pane content pane set layout border layout content pane add pane border layout c e n t e r sheet set resizable sheet add window listener window adapter { got focus = count window closing window event we { pane set value } window closed window event we { pane get value == j option pane u n i n i t i a l i z e d v a l u e { sheet fire option selected pane } } window gained focus window event we { once window gets focus set initial focus !got focus { ugly dirty hack j option pane select initial value is so we call directly into the u i may cause mayhem because we override the encapsulation pane select initial value option pane u i ui = pane get u i ui != { ui select initial value pane } got focus = } } } sheet add component listener component adapter { component shown component event ce { reset value to ensure closing works properly pane set value j option pane u n i n i t i a l i z e d v a l u e } } pane add property change listener property change listener { property change property change event event { let the close operation handle the closing the user closed the window without selecting a button value = in that otherwise close the sheet sheet is visible event get source == pane event get property name equals j option pane v a l u e p r o p e r t y event get value != event get value != j option pane u n i n i t i a l i z e d v a l u e { sheet set visible sheet fire option selected pane } } } sheet pack sheet } /** * the specified component's toplevel <code> frame</code> or * <code> dialog</code> * * @param parent component the <code> component</code> to check a *		<code> frame</code> or <code> dialog</code> * @return the <code> frame</code> or <code> dialog</code> that *		contains the component or the * 	frame the component is <code>null</code> *		or does not have a valid * 	<code> frame</code> or <code> dialog</code> parent */ window get window component component parent component { parent component == j option pane get root frame parent component frame || parent component dialog window parent component get window component parent component get parent } /** * displays a save chooser sheet note that the * text that appears in the approve button is determined by * the l f * * @param parent the parent component of the dialog *			can be <code>null</code> *???@param listener the listener sheet events */ show save sheet j chooser chooser component parent sheet listener listener { chooser set dialog type j chooser s a v e d i a l o g show sheet chooser parent listener } /** * displays an open chooser sheet note that the * text that appears in the approve button is determined by * the l f * * @param parent the parent component of the dialog *			can be <code>null</code> *???@param listener the listener sheet events */ show open sheet j chooser chooser component parent sheet listener listener { chooser set dialog type j chooser o p e n d i a l o g show sheet chooser parent listener } /** * displays a custom chooser sheet with a custom approve button * * @param parent the parent component of the dialog *			can be <code>null</code> * @param approve button text the text of the <code> approve button</code> *???@param listener the listener sheet events */ show sheet j chooser chooser component parent approve button text sheet listener listener { approve button text != { chooser set approve button text approve button text chooser set dialog type j chooser c u s t o m d i a l o g } begin create dialog frame frame = parent frame ? frame parent frame utilities get ancestor of frame parent title = chooser get u i get dialog title chooser chooser get accessible context set accessible description title j sheet sheet = j sheet frame sheet add sheet listener listener container content pane = sheet get content pane content pane set layout border layout content pane add chooser border layout c e n t e r end create dialog action listener action listener = action listener { action performed action event evt { option evt get action command equals approve selection { option = j chooser a p p r o v e o p t i o n } { option = j chooser c a n c e l o p t i o n } sheet hide sheet fire option selected chooser option chooser remove action listener } } chooser add action listener action listener sheet add window listener window adapter { window closing window event e { sheet fire option selected chooser j chooser c a n c e l o p t i o n chooser remove action listener action listener } } chooser rescan current directory sheet pack sheet show sheet to front }} 