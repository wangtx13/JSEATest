/* * @ # nano xml dom output 2 1 2006 08 26 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * */package xml * * io * net n3 nanoxml * /** * dom output using nano xml * * @author werner randelshofer * @version 2 1 2006 08 26 set doctype added * <br>2 0 1 2006 08 21 save and print wrote an empty * <br>2 0 2006 06 10 support prototype added support * and added * <br>1 2 2006 03 20 added support values * <br>1 1 2006 01 18 remove 0 at the end of and numbers * <br>1 0 february 17 2004 created */public nano xml dom output dom output { /** * the doctype of the xml document */ doctype /** * map is used to marshall references to to * the xml dom a key in map is a a value in map * is representing a marshalled reference to that */ hash map< string> objectids /** * map is used to cache prototype */ hash map< object> prototypes /** * the document used output */ xml element document /** * the current node used output */ xml element current /** * the factory used to create */ dom factory factory /** * the stack */ stack< xml element> stack /** creates a instance */ nano xml dom output dom factory factory { factory = factory objectids = hash map< string> document = xml element hash map current = document stack = stack< xml element> stack push current } /** * writes the contents of the dom output into the specified output stream */ save output stream out i o { writer w = output stream writer out u t f8 save w w flush } /** * writes the contents of the dom output into the specified writer */ save writer out i o { doctype != { out write <! d o c t y p e out write doctype out write >\n } xml writer writer = xml writer out writer write xml element document get children get 0 } /** * prints the contents of the dom output into the specified print writer */ print print writer out { xml writer writer = xml writer out { writer write document writer write xml element document get children get 0 } i o e { internal = internal init cause e } xml element document get children get 0 print out } /** * puts a element into the dom document * the element is added as a child to the current element in the dom * document then it becomes the current element * the element must be closed using close element */ open element tag name { xml element element = xml element hash map element set name tag name current add child element stack push current current = element } /** * closes the current element of the dom document * the parent of the current element becomes the current element * @exception illegal argument the provided tag name does * not match the tag name of the element */ close element { current = xml element stack pop } /** * adds a comment to the current element of the dom document */ add comment comment { nano xml does not support comments } /** * adds a text to current element of the dom document * note multiple consecutives texts will be merged */ add text text { old = current get content old == { current set content text } { current set content old+text } } /** * adds an attribute to current element of the dom document */ add attribute name value { value != { current set attribute name value } } /** * adds an attribute to current element of the dom document */ add attribute name value { current set attribute name to value } /** * adds an attribute to current element of the dom document */ add attribute name value { current set attribute name value to } /** * adds an attribute to current element of the dom document */ add attribute name value { remove the awkard 0 at the end of each number str = to value str ends with 0 str = str substring 0 str length 2 current set attribute name str } /** * adds an attribute to current element of the dom document */ add attribute name value { remove the awkard 0 at the end of each number str = to value str ends with 0 str = str substring 0 str length 2 current set attribute name str } write o i o { o == { open element close element } o dom storable { write storable dom storable o } o { open element add text o close element } o { open element add text o to close element } o { open element add text o to close element } o { open element remove the awkard 0 at the end of each number str = o to str ends with 0 str = str substring 0 str length 2 add text str close element } o { open element remove the awkard 0 at the end of each number str = o to str ends with 0 str = str substring 0 str length 2 add text str close element } o { open element add text o to close element } o color { color c = color o open element color add attribute rgba # + to hex c get r g b close element } o { open element a = o i=0 i < a length i++ { write a i } close element } o { open element a = o i=0 i < a length i++ { write a i } close element } o { open element a = o i=0 i < a length i++ { write a i } close element } o font { font f = font o open element font add attribute name f get name add attribute style f get style add attribute size f get size close element } o { open element e = o add attribute type factory get name e add text factory get value e close element } { illegal argument unable to store +o+ +o get } } xml element write storable dom storable o i o { tag name = factory get name o tag name == illegal argument no tag name +o open element tag name xml element element = current objectids contains key o { add attribute ref objectids get o } { = to objectids size 16 objectids put o add attribute o write } close element element } add attribute name value value { value != value { add attribute name value } } add attribute name value value { value != value { add attribute name value } } add attribute name value value { value != value { add attribute name value } } add attribute name value value { value != value { add attribute name value } } add attribute name value value { value != ! value equals value { add attribute name value } } get prototype { prototypes == { prototypes = hash map< object> } ! prototypes contains key current get name { prototypes put current get name factory create current get name } prototypes get current get name } set doctype doctype { doctype = doctype }} 