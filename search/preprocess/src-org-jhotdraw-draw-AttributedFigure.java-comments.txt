/* * @ # attributed figure 3 1 2006 06 17 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * */package draw * geom * * io * draw attribute keys * geom * xml dom input xml dom output /** * a figure that can keep track of an open ended set of attributes * <p> * f i x m e move all convenience attribute getter into attribute keys * * * @author werner randelshofer * @version 3 1 2006 06 17 chop point2 d added * <br>3 0 2006 06 07 reworked * <br>2 1 2006 02 20 support stroke added * <br>2 0 2006 01 14 changed to support precision coordinates * <br>1 0 2003 12 01 derived from 5 4b1 */public attributed figure figure { hash map< attribute key object> attributes = hash map< attribute key object> /** * forbidden attributes can't be set by the set attribute operation * they can only be changed by basic set attribute */ hash set< attribute key> forbidden attributes /** creates a instance */ attributed figure { } /** * sets an attribute of the figure * attribute key name and semantics are defined by the implementing * the figure */ set attribute attribute key key value { forbidden attributes == || ! forbidden attributes contains key { old value = attributes get key ! attributes contains key key || old value != value || old value != value != ! old value equals value { will change basic set attribute key value fire attribute changed key old value value fire undoable edit happened attribute change edit key old value value changed } } } set attribute enabled attribute key key b { forbidden attributes == { forbidden attributes = hash set< attribute key> } b { forbidden attributes remove key } { forbidden attributes add key } } is attribute enabled attribute key key { forbidden attributes == || ! forbidden attributes contains key } set attributes hash map< attribute key object> map { map entry< attribute key object> entry map entry set { set attribute entry get key entry get value } } map< attribute key object> get attributes { hash map< attribute key object> attributes } /** * sets an attribute of the figure * attribute key name and semantics are defined by the implementing * the figure */ basic set attribute attribute key key value { forbidden attributes == || ! forbidden attributes contains key { attributes put key value } } /** * gets an attribute from the figure */ get attribute attribute key key { has attribute key ? attributes get key key get value } draw figure graphics2 d g { attribute keys f i l l c o l o r get != { g set color attribute keys f i l l c o l o r get draw fill g } s t r o k e c o l o r get != s t r o k e w t h get > 0d { g set stroke attribute keys get stroke g set color s t r o k e c o l o r get draw stroke g } t e x t c o l o r get != { t e x t s h a d o w c o l o r get != t e x t s h a d o w o f f s e t get != { dimension2 d d = t e x t s h a d o w o f f s e t get g translate d width d height g set color t e x t s h a d o w c o l o r get draw text g g translate d width d height } g set color t e x t c o l o r get draw text g } is connectors visible { draw connectors g } } draw connectors graphics2 d g { } stroke get stroke { attribute keys get stroke } get stroke miter limit factor { number value = number get attribute attribute keys s t r o k e m i t e r l i m i t f a c t o r value != ? value value 10f } rectangle2 d get figure draw bounds { width = attribute keys get stroke total width / 2d s t r o k e j o i n get == basic stroke j o i n m i t e r { width *= s t r o k e m i t e r l i m i t f a c t o r get } width++ rectangle2 d r = get bounds geom grow r width width r } /** * is called by draw to draw the fill * area of the figure attributed figure configures the graphics2 d * with the f i l l c o l o r attribute before calling * the f i l l c o l o r attribute is is not called */ draw fill graphics2 d g /** * is called by draw to draw the lines of the figure * attributed figure configures the graphics2 d with * the s t r o k e c o l o r attribute before calling * the s t r o k e c o l o r attribute is is not called */ /** * is called by draw to draw the text of the figure * attributed figure configures the graphics2 d with * the t e x t c o l o r attribute before calling * the t e x t c o l o r attribute is is not called */ draw stroke graphics2 d g draw text graphics2 d g { } attributed figure clone { attributed figure that = attributed figure clone that attributes = hash map< attribute key object> attributes forbidden attributes != { that forbidden attributes = hash set< attribute key> forbidden attributes } that } write attributes dom output out i o { figure prototype = figure out get prototype is element open = map entry< attribute key object> entry attributes entry set { attribute key key = entry get key forbidden attributes == || ! forbidden attributes contains key { prototype value = key get prototype attribute value = key get prototype value != attribute value || prototype value != attribute value != ! prototype value equals attribute value { ! is element open { out open element a is element open = } out open element key get key out write entry get value out close element } } } is element open { out close element } } read attributes dom input in i o { in get element count a > 0 { in open element a i=in get element count 1 i >= 0 i { in open element i name = in get tag name value = in read attribute key key = get attribute key name key != key is assignable value { forbidden attributes == || ! forbidden attributes contains key { set attribute key value } } in close element } in close element } } attribute key get attribute key name { attribute keys supported attribute map get name } /** * applies all attributes of figure to that figure */ apply attributes to figure that { map entry< attribute key object> entry attributes entry set { that set attribute entry get key entry get value } } write dom output out i o { rectangle2 d r = get bounds out add attribute x r x out add attribute y r y out add attribute w r width out add attribute h r height write attributes out } read dom input in i o { x = in get attribute x 0d y = in get attribute y 0d w = in get attribute w 0d h = in get attribute h 0d set bounds point2 d x y point2 d x+w y+h read attributes in } remove attribute attribute key key { has attribute key { old value = get attribute key attributes remove key fire attribute changed key old value key get value } } has attribute attribute key key { attributes contains key key }} 