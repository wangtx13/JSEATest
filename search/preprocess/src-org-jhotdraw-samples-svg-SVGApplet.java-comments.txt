/* * @ # s v g applet 1 0 2006 07 08 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * */package samples svg draw * draw action * * * geom * event * io * net * * * event * xml * /** * s v g applet * * @author werner randelshofer * @version 1 0 2006 07 08 created */public s v g applet j applet { v e r s i o n = 0 1 n a m e = s v g draw s v g panel drawing panel /** * we override get parameter to make it work even we have no applet * context */ get parameter name { { get parameter name } pointer e { } } /** initializes the applet s v g applet */ init { set look and feel { u i manager set look and feel u i manager get look and feel name } throwable e { nothing we can't set the desired look and feel u i manager does automaticaly the right thing us } display copyright info we are loading the data container c = get content pane c set layout box layout c box layout y a x i s labels = get applet info split \n strings split get applet info '\n' i=0 i < labels length i++ { c add j label labels i length == 0 ? labels i } we load the data using a worker thread worker { construct { result { out get parameter datafile +get parameter datafile get parameter data != { nano xml dom input domi = nano xml dom input s v g figure factory reader get parameter data result = domi read 0 } get parameter datafile != { input stream in = { u r l url = u r l get document base get parameter datafile in = url open connection get input stream nano xml dom input domi = nano xml dom input s v g figure factory in result = domi read 0 } { in != in close } } { result = } } throwable t { result = t } result } finished { get value throwable { throwable get value print stack trace } container c = get content pane c set layout border layout c remove all c add drawing panel = s v g panel result = get value init components result != { result drawing { set drawing drawing result } result throwable { get drawing add text figure result to throwable result print stack trace } } c validate } } start } set drawing drawing d { drawing panel set drawing d } drawing get drawing { drawing panel get drawing } set data text { text != text length > 0 { reader in = reader text { nano xml dom input domi = nano xml dom input s v g figure factory in domi open element s v g draw set drawing drawing domi read 0 } throwable e { get drawing clear text figure tf = text figure tf set text e get message tf set bounds point2 d 10 10 point2 d 100 100 get drawing add tf e print stack trace } { in != in close } } } get data { writer out = writer { nano xml dom output domo = nano xml dom output s v g figure factory domo open element s v g draw domo write get drawing domo close element domo save out } i o e { text figure tf = text figure tf set text e get message tf set bounds point2 d 10 10 point2 d 100 100 get drawing add tf e print stack trace } { out != out close } out to } get parameter info { { { data the data to be displayed by applet } { datafile u r l an u r l to a containing the data to be displayed by applet } } } get applet info { n a m e+ \n + v e r s i o n + \n\n copyright \u00a9 2004 2006 \u00a9 werner randelshofer + \n alle rights reserved + \n\n software is based on + \n \u00a9 1996 1997 i f a informatik und erich gamma + \n + \n script can access the drawing data using the set data and get data } /** is called from within the init to * initialize the form * w a r n i n g n o t modify the content of is * always regenerated by the form editor */ <editor fold defaultstate= collapsed desc= generated > g e n b e g i n init components init components { tool button group = button group } </editor fold> g e n e n d init components mainx { utilities later runnable { run { j frame f = j frame s v g draw applet f set close operation j frame e x i t o n c l o s e s v g applet a = s v g applet f get content pane add a a init f set size 500 300 f set visible a start } } } variables declaration not modify g e n b e g i n variables button group tool button group end of variables declaration g e n e n d variables } 