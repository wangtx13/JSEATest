/* * @ # bezier scale handle 1 0 16 juni 2006 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * */package draw * undo * * event * geom * * geom * /** * a handle to scale and rotate a bezier figure * pressing the alt key or the shift key manipulating the handle restricts * the handle to only rotate the bezier figure * * @author werner randelshofer * @version 1 0 16 juni 2006 created */public bezier scale handle handle { point location restore data affine transform transform point2 d center start theta start length /** creates a instance */ bezier scale handle bezier figure owner { owner } is combinable with handle h { } /** * draws handle */ draw graphics2 d g { draw circle g color yellow color black } rectangle basic get bounds { rectangle r = rectangle get location r grow get handlesize / 2 get handlesize / 2 r } point get location { location == { /*location =*/ view drawing to view get origin } location } bezier figure get bezier figure { bezier figure get owner } point2 d get origin { find a nice place to put handle need to pick a place that will not overlap with point handle and is internal to polygon handlesize = get handlesize one handlesize step away from outermost toward center point2 d outer = get bezier figure get outermost point point2 d ctr = get bezier figure get center len = geom length outer x outer y ctr x ctr y len == 0 { best we can do? point2 d outer x handlesize/2 outer y + handlesize/2 } u = handlesize / len u > 1 0 { best we can do? point2 d outer x * 3 + ctr x /4 outer y * 3 + ctr y /4 } { point2 d outer x * 1 0 u + ctr x * u outer y * 1 0 u + ctr y * u } } track start point anchor modifiers ex { location = point anchor x anchor y restore data = get bezier figure get restore data transform = affine transform center = get bezier figure get center point2 d anchor point = view view to drawing anchor start theta = geom angle center x center y anchor point x anchor point y start length = geom length center x center y anchor point x anchor point y } track step point anchor point modifiers ex { location = point x y point2 d point = view view to drawing step theta = geom angle center x center y point x point y step length = geom length center x center y point x point y scale factor = modifiers ex input event a l t d o w n m a s k | input event s h i f t d o w n m a s k != 0 ? 1d step length / start length transform set to identity transform translate center x center y transform scale scale factor scale factor transform rotate step theta start theta transform translate center x center y get owner will change get owner restore to restore data get owner basic transform transform get owner changed } /* *	public scale rotate point anchor polygon original polygon point p { will change use center to determine relative angles and lengths point ctr = center original polygon anchor len = geom length ctr x ctr y anchor x anchor y anchor len > 0 0 { len = geom length ctr x ctr y p x p y ratio = len / anchor len anchor angle = math atan2 anchor y ctr y anchor x ctr x angle = math atan2 p y ctr y p x ctr x rotation = angle anchor angle n = original polygon npoints xs = n ys = n i = 0 i < n ++i { x = original polygon xpoints i y = original polygon ypoints i l = geom length ctr x ctr y x y * ratio a = math atan2 y ctr y x ctr x + rotation xs i = ctr x + l * math cos a + 0 5 ys i = ctr y + l * math sin a + 0 5 } set internal polygon polygon xs ys n } changed } */ track end point anchor point modifiers ex { view get drawing fire undoable edit happened restore data edit get owner restore data location = } } 