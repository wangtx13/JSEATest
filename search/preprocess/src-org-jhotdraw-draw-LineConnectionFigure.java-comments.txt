/* * @ # bezier bezier line connection 1 0 1 2006 02 06 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * */package draw * * event * geom * * undo * io * geom * xml dom input xml dom output /** * a line connection is a standard of the * connection figure the is with bezier figure * * * * @author werner randelshofer * @version 1 0 1 2006 02 06 fixed redo bug * <br>1 0 23 januar 2006 created */public line connection figure line figure connection figure { connector start connector connector end connector liner liner /** * handles figure changes in the start and the * end figure */ connection handler connection handler = connection handler connection handler figure listener { line connection figure owner connection handler line connection figure owner { owner = owner } figure request remove figure event e { } figure removed figure event evt { the commented lines below must stay commented out is because we must not set our connectors to in order to support reconnection using redo /* evt get figure == owner get start figure || evt get figure == owner get end figure { owner set start connector owner set end connector }*/ owner fire figure request remove } figure changed figure event e { e get source == owner get start figure || e get source == owner get end figure { owner will change owner update connection owner changed } } figure added figure event e { } figure attribute changed figure event e { } figure area invalidated figure event e { } } /** creates a instance */ line connection figure { } d r a w i n g s h a p e a n d b o u n d s /** * ensures that a connection is updated the connection * was moved */ basic transform affine transform tx { basic transform tx update connection make sure that we are still connected } a t t r i b u t e s e d i t i n g /** * gets the handles of the figure it the normal * polyline handles but adds change connection handles at the * start and end */ collection< handle> create handles detail level { list< handle> handles = list< handle> get node count detail level { 0 get liner == { i = 1 n = get node count 1 i < n i++ { handles add bezier node handle i } } handles add change connection start handle handles add change connection end handle } handles } c o n n e c t i n g /** * tests whether a figure can be a connection target * connection figures cannot be connected and */ can connect { } update connection { will change get start connector != { point2 d start = get start connector find start start != { basic set start point start } } get end connector != { point2 d end = get end connector find end end != { basic set end point end } } changed } validate { validate lineout } can connect figure start figure end { start can connect end can connect } connects same connection figure other { other get start connector == get start connector other get end connector == get end connector } connector get end connector { end connector } figure get end figure { end connector == ? end connector get owner } connector get start connector { start connector } figure get start figure { start connector == ? start connector get owner } /** * note is only testing purposes you can * remove the keywoard at any time */ set end connector connector end { connector old end = end connector end != old end { will change basic set end connector end fire undoable edit happened undoable edit { get presentation name { end verbindung setzen } undo cannot undo { undo will change basic set end connector old end changed } redo cannot undo { redo will change basic set end connector end changed } } changed } } basic set end connector connector end { end != end connector { end connector != { get end figure remove figure listener connection handler get start figure != { handle disconnect get start figure get end figure } } end connector = end end connector != { get end figure add figure listener connection handler get start figure != get end figure != { handle connect get start figure get end figure update connection } } } } /** * note is only testing purposes you can * remove the keywoard at any time */ set start connector connector start { connector old start = start connector start != old start { will change basic set start connector start fire undoable edit happened undoable edit { get presentation name { start verbindung setzen } undo cannot undo { undo will change basic set start connector old start changed } redo cannot undo { redo will change basic set start connector start changed } } changed } } basic set start connector connector start { start != start connector { start connector != { get start figure remove figure listener connection handler get end figure != { handle disconnect get start figure get end figure } } start connector = start start connector != { get start figure add figure listener connection handler get start figure != get end figure != { handle connect get start figure get end figure update connection } } } } c o m p o s i t e f i g u r e s l a y o u t /* liner get bezier path layouter { liner get attribute b e z i e r p a t h l a y o u t e r } set bezier path layouter liner value { set attribute b e z i e r p a t h l a y o u t e r value } /** * lays out the connection is called when the connection * itself changes by the connection is recalculated * / layout connection { get start connector != get end connector != { will change liner bpl = get bezier path layouter bpl != { bpl lineout } { get start connector != { point2 d start = get start connector find start start != { basic set start point start } } get end connector != { point2 d end = get end connector find end end != { basic set end point end } } } changed } } */ c l o n i n g e v e n t h a n d l i n g add notify drawing drawing { add notify drawing /* get start connector != get end connector != { handle connect get start figure get end figure }*/ } remove notify drawing drawing { /* set start connector set end connector /* get start connector != get end connector != { handle disconnect get start figure get end figure }*/ remove notify drawing } /** * handles the disconnection of a connection * override to handle event */ handle disconnect figure start figure end { } /** * handles the connection of a connection * override to handle event */ handle connect figure start figure end { } line connection figure clone { line connection figure that = line connection figure clone that connection handler = connection handler that liner != { that liner = liner liner clone } that shares the same connectors that has to work properly that must be registered as a figure listener to the connected figures start connector != { that start connector = connector start connector clone that get start figure add figure listener that connection handler } end connector != { that end connector = connector end connector clone that get end figure add figure listener that connection handler } that start connector != that end connector != { that handle connect that get start figure that get end figure that update connection } that } remap map old to { will change remap old to figure start figure = figure end figure = get start figure != { start figure = figure old to get get start figure start figure == start figure = get start figure } get end figure != { end figure = figure old to get get end figure end figure == end figure = get end figure } start figure != { set start connector start figure find compatible connector get start connector } end figure != { set end connector end figure find compatible connector get end connector } update connection changed } can connect figure start { start can connect } /** * handles a mouse click */ handle mouse click point2 d p mouse event evt drawing view view { get liner == evt get click count == 2 { will change index = basic split segment p 5f / view get scale factor index != 1 { bezier path node node = get node index fire undoable edit happened undoable edit { redo cannot redo { redo will change basic add node index node changed } undo cannot undo { undo will change basic remove node index changed } } changed } } } p e r s i s t e n c e read points dom input in i o { read points in in open element start connector set start connector connector in read in close element in open element end connector set end connector connector in read in close element } read dom input in i o { read points in read attributes in read liner in } read liner dom input in i o { in get element count liner > 0 { in open element liner liner = liner in read in close element } } write dom output out i o { write points out write attributes out write liner out } write liner dom output out i o { liner != { out open element liner out write liner out close element } } write points dom output out i o { write points out out open element start connector out write get start connector out close element out open element end connector out write get end connector out close element } set liner liner value { will change liner = value changed } basic set node index bezier path node p { index != 0 index != get point count 1 { get start connector != { point2 d start = get start connector find start start != { basic set start point start } } get end connector != { point2 d end = get end connector find end end != { basic set end point end } } } basic set node index p } /* basic set point index point2 d p { index != 0 index != get point count 1 { get start connector != { point2 d start = get start connector find start start != { basic set start point start } } get end connector != { point2 d end = get end connector find end end != { basic set end point end } } } basic set point index p } */ lineout { liner != { liner lineout } } /** * f i x m e liner must work with a p i of line connection! */ bezier path get bezier path { path } liner get liner { liner } set start point point2 d p { set point 0 p } set point index point2 d p { set point index 0 p } set end point point2 d p { set point get point count 1 p } reverse connection { start connector != end connector != { handle disconnect start connector get owner end connector get owner connector tmp c = start connector start connector = end connector end connector = tmp c point2 d tmp p = get start point set start point get end point set end point tmp p handle connect start connector get owner end connector get owner update connection } }} 