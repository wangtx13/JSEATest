/* * @ # nano xml dom input 2 1 1 2006 08 21 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * */package xml * io * * net n3 nanoxml * /** * nano xml dom input * * @author werner randelshofer * @version 2 1 1 2006 08 21 fixed exceptions * <br>2 0 2006 06 10 support and added * <br>1 0 february 17 2004 created */public nano xml dom input dom input { /** * map is used to unmarshall references to to * the xml dom a key in map is a representing a marshalled * reference a value in map is an unmarshalled */ hash map< object> idobjects = hash map< object> /** * the document used input */ xml element document /** * the current node used input */ xml element current /** * the factory used to create from xml tag names */ dom factory factory /** * the stack */ stack< xml element> stack = stack< xml element> nano xml dom input dom factory factory input stream in i o { factory input stream reader in u t f8 } nano xml dom input dom factory factory reader in i o { factory = factory { i xml parser parser = xml parser factory create xml parser i xml reader reader = std xml reader in parser set reader reader document = xml element current = xml element parser parse document add child current current = document } e { i o = i o e get message init cause e } } /** * the tag name of the current element */ get tag name { current get name } /** * gets an attribute of the current element of the dom document */ get attribute name value { value = current get attribute name value == || value length == 0 ? value value } /** * gets an attribute of the current element of the dom document and of * all parent dom elements */ list< string> get inherited attribute name { linked list< string> values = linked list< string> xml element node stack { value = node get attribute name values add value } value = current get attribute name values add value values } /** * gets the text of the current element of the dom document */ get text { get text } /** * gets the text of the current element of the dom document */ get text value { value = current get content value == ? value value } /** * gets an attribute of the current element of the dom document */ get attribute name value { value = current get attribute name value == || value length == 0 ? value decode value value } /** * gets an attribute of the current element of the dom document */ get attribute name value { value = current get attribute name value == || value length == 0 ? value parse value } /** * gets an attribute of the current element of the dom document */ get attribute name value { value = current get attribute name value == || value length == 0 ? value value of value value } /** * the number of child elements of the current element */ get element count { current get children count } /** * the number of child elements with the specified tag name * of the current element */ get element count tag name { count = 0 list list = current get children i=0 i < list size i++ { xml element node = xml element list get i node get name equals tag name { count++ } } count } /** * opens the element with the specified index and makes it the current node */ open element index { stack push current list list = current get children current = xml element list get index } /** * opens the last element with the specified name and makes it the current node */ open element tag name i o { list list = current get children i=0 i < list size i++ { xml element node = xml element list get i node get name equals tag name { stack push current current = node } } i o no such element +tag name } /** * opens the element with the specified name and index and makes it the * current node */ open element tag name index i o { count = 0 list list = current get children i=0 i < list size i++ { xml element node = xml element list get i node get name equals tag name { count++ == index { stack push current current = node } } } i o no such element +tag name+ at index +index } /** * closes the current element of the dom document * the parent of the current element becomes the current element * @exception illegal argument the provided tag name does * not match the tag name of the element */ close element { current = xml element stack pop } /** * reads an from the current element */ read i o { read 0 } /** * reads an from the current element */ read index i o { open element index o tag name = get tag name tag name equals { o = } tag name equals { o = get text } tag name equals { o = decode get text } tag name equals { o = decode get text } tag name equals { o = parse get text } tag name equals { o = parse get text } tag name equals { o = value of get text } tag name equals color { o = color get attribute rgba 0xff } tag name equals { a = get element count i=0 i < a length i++ { a i = read i value } o = a } tag name equals { a = get element count i=0 i < a length i++ { a i = read i value } o = a } tag name equals { a = get element count i=0 i < a length i++ { a i = read i value } o = a } tag name equals font { o = font get attribute name dialog get attribute style 0 get attribute size 0 } tag name equals { o = factory create get attribute type get text } { ref = get attribute ref = get attribute ref keep track of which have an == { o = factory create get tag name } idobjects contains key { o = idobjects get } { o = factory create get tag name idobjects put o } ref == { o dom storable { dom storable o read } } } close element o }} 