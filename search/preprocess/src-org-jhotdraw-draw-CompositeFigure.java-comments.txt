/* * @ # composite figure 1 0 27 januar 2006 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * */package draw * beans * * geom * event * * * undo * event * io * geom * /** * a composite figure is composed of several child figures * a composite figure can be laid out using a layouter * * @author werner randelshofer * @version 1 0 27 januar 2006 created */public composite figure figure { /** * the value of attribute is a insets2 d */ attribute key< insets2 d double> l a y o u t i n s e t s = attribute key< insets2 d double> layout insets insets2 d 0 0 0 0 /** * adds a child to the figure * is a convenience add get child count child */ add figure child /** * adds a child to the figure at the specified index */ add index figure child /** * adds a child to the figure without firing events * is a convenience basic add get child count child */ basic add figure child /** * adds a child to the figure at the specified index without * firing events */ basic add index figure child /** * removes the specified child * the figure contained the removed child */ remove figure child /** * removes the child at the specified index * the removed child figure */ figure remove child index /** * removes all children from the composite figure */ remove all children /** * removes the specified child without firing events * the figure contained the removed child */ basic remove figure child /** * removes the child at the specified index without firing events * the removed child figure */ figure basic remove child index /** * removes all children from the composite figure without firing events */ basic remove all children /** * an unchangeable list view on the children */ list< figure> get children /** * the number of children */ get child count /** * the child figure at the specified index */ figure get child index /** * get a layouter which encapsulated a layout * algorithm figure typically a layouter * accesses the child components of figure and arranges * their graphical presentation * * @return layout strategy used by figure */ layouter get layouter /** * a layout algorithm is used to define how the child components * should be laid out in relation to each other the task * layouting the child components presentation is delegated * to a layouter which can be plugged in at runtime */ layout /** * set a layouter which encapsulated a layout * algorithm figure typically a layouter * accesses the child components of figure and arranges * their graphical presentation it is a good idea to set * the layouter in the initialize * so it can be recreated a graphical composite figure is * read and restored from a storable input stream * * * @param value	encapsulation of a layout algorithm */ set layouter layouter value } 