/* xml nano xml/ * * $ revision 1 4 $ * $ date 2002/01/04 21 03 29 $ * $ name r e l e a s e 2 2 1 $ * * is part of nano xml 2 * copyright c 2000 2002 marc de scheemaecker all rights reserved * * software is provided 'as is' without any express or implied warranty * in no event will the authors be held liable any damages arising from the * use of software * * permission is granted to anyone to use software any purpose * including commercial applications and to alter it and redistribute it * freely subject to the following restrictions * * 1 the origin of software must not be misrepresented you must not * claim that you wrote the original software you use software in * a product an acknowledgment in the product documentation would be * appreciated but is not required * * 2 altered source versions must be plainly marked as such and must not be * misrepresented as being the original software * * 3 notice may not be removed or altered from any source distribution */package net n3 nanoxml io print stream io print writer /** * an xml is thrown when an occurred processing the * xml data * * @author marc de scheemaecker * @version $ name r e l e a s e 2 2 1 $ $ revision 1 4 $ */public xml exception{ /** * the message of the */ msg /** * the of the xml data where the occurred */ /** * the line number in the xml data where the occurred */ line nr /** * encapsulated */ encapsulated /** * creates a * * @param msg the message of the */ xml msg { 1 msg } /** * creates a * * @param e the encapsulated */ xml e { 1 e nested } /** * creates a * * @param the of the xml data where the * occurred * @param line nr the line number in the xml data where the * occurred * @param e the encapsulated */ xml line nr e { line nr e nested } /** * creates a * * @param the of the xml data where the * occurred * @param line nr the line number in the xml data where the * occurred * @param msg the message of the */ xml line nr msg { line nr msg } /** * creates a * * @param the from where the data came * @param line nr the line number in the xml data where the * occurred * @param e the encapsulated * @param msg the message of the * @param report params the line nr and e params need to be * appended to the message */ xml line nr e msg report params { xml build message line nr e msg report params = line nr = line nr encapsulated = e msg = xml build message line nr e msg report params } /** * builds the message * * @param the from where the data came * @param line nr the line number in the xml data where the * occurred * @param e the encapsulated * @param msg the message of the * @param report params the line nr and e params need to be * appended to the message */ build message line nr e msg report params { str = msg report params { != { str += id=' + + ' } line nr >= 0 { str += line= + line nr } e != { str += + e } } str } /** * cleans up the when it's destroyed */ finalize throwable { = encapsulated = finalize } /** * the of the xml data where the occurred * there is no known is */ get { } /** * the line number in the xml data where the occurred * there is no line number known 1 is */ get line nr { line nr } /** * the encapsulated or no is * encapsulated */ get { encapsulated } /** * dumps the stack to a print writer * * @param writer the print writer */ print stack trace print writer writer { print stack trace writer encapsulated != { writer *** nested encapsulated print stack trace writer } } /** * dumps the stack to an output stream * * @param stream the output stream */ print stack trace print stream stream { print stack trace stream encapsulated != { stream *** nested encapsulated print stack trace stream } } /** * dumps the stack to err */ print stack trace { print stack trace encapsulated != { err *** nested encapsulated print stack trace } } /** * a representation of the */ to { msg }} 