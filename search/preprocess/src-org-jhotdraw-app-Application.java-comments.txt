/* * @ # application 1 0 october 4 2005 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * */package app * beans * * * io * /** * an application handles the lifecycle of projects and provides windows * to present them on screen depending on the document style * used by the application the application can handle multiple projects * at the same time or only one * <p> * typical document styles are the single document s d i * the multiple document m d i and the mac o s x application document * o s x * <p> * typical usage of * <pre> * my { * { * application app = a d i application * application model model = application model * model set name my appliciation * model set 1 0 * model set copyright copyright 2006 c werner randelshofer all rights reserved * model set project name myapplication my project * app set model model * app launch * } * </pre> * * @author werner randelshofer * @version 1 0 october 4 2005 created */public application { /** * launches the application from the * is typically invoked on the thread * will configure on the current thread and then * init and start on the a w t event dispatcher thread */ launch /** * configures the application using the provided arguments */ configure /** * initializes the application * <code>configure </code> should have been invoked before the application * is inited alternatively an application can be configured using setter * */ init /** * starts the application * usually creates a project and adds it to the application * <code>init </code> must have been invoked before the application is started */ start /** * stops the application without saving any unsaved projects * <code>init </code> must have been invoked before the application is stopped */ stop /** * creates a project application */ project create project /** * adds a project to application * fires a document count property change event * set application on the project */ add project p /** * removes a project from application and removes it from the users * view * fires a document count property change event * set application on the project */ remove project p /** * shows a project */ show project p /** * hides a project */ hide project p /** * is a convenience removing a project and disposing it */ dispose project p /** * a read only collection view of the projects of application */ collection< project> projects /** * the current project is used o s x application and * m d i application which share actions among multiple project instances * current project may be become the * application has no project * <p> * is a bound property */ project get current project /** * the enabled state of the application */ is enabled /** * sets the enabled state of the application * * the enabled state is used to prevent parallel invocation of actions * on the application an action consists of a sequential part and a * concurrent part it must disable the application only the sequential * part * * actions that act on the application must check in their action performed * whether the application is enabled * the application is disabled they must nothing * the application is enabled they must disable the application * perform the action and then enable the application again * * is a bound property */ set enabled value /** * adds a property change listener */ add property change listener property change listener l /** * removes a property change listener */ remove property change listener property change listener l /** * the name of the application */ get name /** * the of the application */ get /** * the copyright of the application */ get copyright /** * sets the application model */ set model application model value /** * the application model */ application model get model /** * application shares tools among multiple projects */ is sharing tools among projects /** * the application component * may the application is not represented by a component * of its own on the user */ component get component /** * the recently opened files * by convention is an immutable list */ list< file> recent files /** * appends a to the list of recent files * fires a property change event the property recent files */ add recent /** * clears the list of recent files * fires a property change event the property recent files */ clear recent files } 