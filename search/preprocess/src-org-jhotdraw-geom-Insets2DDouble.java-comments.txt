/* * @ # insets2 d 1 1 2006 07 08 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * */package geom * geom * xml * /** * insets2 d * * @author werner randelshofer * @version 2006 07 08 dom storable * <br>1 0 january 14 2006 created */public insets2 d cloneable io serializable dom storable { /** * the inset from the top * value is added to the top of the rectangle * to yield a location the top * * @serial * @see #clone */ top /** * the inset from the left * value is added to the left of the rectangle * to yield a location the left edge * * @serial * @see #clone */ left /** * the inset from the bottom * value is subtracted from the bottom of the rectangle * to yield a location the bottom * * @serial * @see #clone */ bottom /** * the inset from the right * value is subtracted from the right of the rectangle * to yield a location the right edge * * @serial * @see #clone */ right /** * creates and initializes a <code> insets2 d double</code> with the * 0 insets * <p> * constructor is required by the dom storable */ insets2 d { } /** * creates and initializes a <code> insets2 d double</code> with the * specified top left bottom and right insets * @param top the inset from the top * @param left the inset from the left * @param bottom the inset from the bottom * @param right the inset from the right */ insets2 d top left bottom right {	this top = top 	this left = left 	this bottom = bottom 	this right = right } /** * checks whether two insets are equal two instances * of <code> insets2 d double</code> are equal the four values * of the fields <code>top</code> <code>left</code> * <code>bottom</code> and <code>right</code> are all equal * @return <code>true</code> the two insets are equal * otherwise <code>false</code> * @since j d k1 1 */ equals obj {	if obj insets2 d {	 insets2 d insets = insets2 d obj 	 top == insets top left == insets left 		 bottom == insets bottom right == insets right 	}	return } /** * the hash insets2 d * * @return a hash insets2 d */ hash { sum1 = left + bottom sum2 = right + top val1 = sum1 * sum1 + 1 /2 + left val2 = sum2 * sum2 + 1 /2 + top sum3 = val1 + val2 to bits sum3 * sum3 + 1 /2 + val2 } /** * a representation of <code> insets2 d double</code> * is intended to be used only debugging purposes and * the content and format of the may vary between * implementations the may be empty but may not be * <code>null</code> * * @return a representation of <code> insets2 d double</code> */ to {	return get get name + top= + top + left= + left + bottom= + bottom + right= + right + } /** * create a copy of * @return a copy of <code> insets2 d double</code> */ clone { 	try { 	 clone 	} clone not supported e { 	 shouldn't happen since we are cloneable	 internal 	} } /** * initialize j n i field and ids */ init ids write dom output out { out add attribute top top 0d out add attribute left left 0d out add attribute bottom bottom 0d out add attribute right right 0d } read dom input in { top = in get attribute top 0d left = in get attribute left 0d bottom = in get attribute bottom 0d right = in get attribute right 0d }} 