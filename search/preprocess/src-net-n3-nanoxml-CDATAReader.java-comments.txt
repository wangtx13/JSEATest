/* c d a t a reader nano xml/ * * $ revision 1 3 $ * $ date 2002/01/04 21 03 28 $ * $ name r e l e a s e 2 2 1 $ * * is part of nano xml 2 * copyright c 2000 2002 marc de scheemaecker all rights reserved * * software is provided 'as is' without any express or implied warranty * in no event will the authors be held liable any damages arising from the * use of software * * permission is granted to anyone to use software any purpose * including commercial applications and to alter it and redistribute it * freely subject to the following restrictions * * 1 the origin of software must not be misrepresented you must not * claim that you wrote the original software you use software in * a product an acknowledgment in the product documentation would be * appreciated but is not required * * 2 altered source versions must be plainly marked as such and must not be * misrepresented as being the original software * * 3 notice may not be removed or altered from any source distribution */package net n3 nanoxml io reader io i o /** * reader reads data from another reader until the end of a c d a t a section * has been encountered * * @author marc de scheemaecker * @version $ name r e l e a s e 2 2 1 $ $ revision 1 3 $ */class c d a t a reader reader{ /** * the encapsulated reader */ i xml reader reader /** * saved */ saved /** * the end of the stream has been reached */ at end of data /** * creates the reader * * @param reader the encapsulated reader */ c d a t a reader i xml reader reader { reader = reader saved = 0 at end of data = } /** * cleans up the when it's destroyed */ finalize throwable { reader = finalize } /** * reads a block of data * * @param buffer where to put the read data * @param offset first position in buffer to put the data * @param size maximum number of chars to read * * @return the number of chars read or 1 at e o f * * @throws io i o *		if an occurred reading the data */ read buffer offset size i o { chars read = 0 at end of data { 1 } offset + size > buffer length { size = buffer length offset } chars read < size { ch = saved ch == 0 { ch = reader read } { saved = 0 } ch == ' ' { ch2 = reader read ch2 == ' ' { ch3 = reader read ch3 == '>' { at end of data = } saved = ch2 reader unread ch3 } { reader unread ch2 } } buffer chars read = ch chars read++ } chars read == 0 { chars read = 1 } chars read } /** * skips remaining data and closes the stream * * @throws io i o *		if an occurred reading the data */ close i o { ! at end of data { ch = saved ch == 0 { ch = reader read } { saved = 0 } ch == ' ' { ch2 = reader read ch2 == ' ' { ch3 = reader read ch3 == '>' { } saved = ch2 reader unread ch3 } { reader unread ch2 } } } at end of data = }} 