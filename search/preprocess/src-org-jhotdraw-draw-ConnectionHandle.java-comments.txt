/* * @ # connection handle 1 0 20 juni 2006 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * */package draw undo * * * geom * geom * /** * a handle to connect figures * the connection to be created is specified by a prototype * * @author werner randelshofer * @version 1 0 20 juni 2006 created */public connection handle locator handle { composite edit edit /** * the currently created connection */ connection figure current connection /** * the prototype of the connection to be created */ connection figure prototype /** * the current target */ figure target figure /** creates a instance */ connection handle figure owner locator locator connection figure prototype { owner locator prototype = prototype } draw graphics2 d g { draw circle g color blue color blue darker } track start point anchor modifiers ex { set connection create connection resource bundle labels = resource bundle get l a f bundle draw labels edit = composite edit labels get create connection fire undoable edit happened edit point2 d p = get location on drawing get connection set start point p get connection set end point p view get drawing add get connection } track step point anchor point modifiers ex { point2 d p = view view to drawing figure f = find connectable figure p view get drawing track the figure containing the mouse f != get target figure { get target figure != { get target figure set connectors visible } set target figure f get target figure != { get target figure set connectors visible get connection } } connector target = find connection target p view get drawing target != { p = geom center target get bounds } get connection set end point p } track end point anchor point modifiers ex { point2 d p = view view to drawing 		 connector target = find connection target p view get drawing 		if target != {			get connection set start connector get start connector 			get connection set end connector target 			get connection update connection 		} {			view get drawing remove get connection 			 set undo activity edit set significant 		}		set connection 		if get target figure != {			get target figure set connectors visible 			set target figure 		} fire undoable edit happened edit } /** * creates the connection figure by the figure prototype is * cloned */ connection figure create connection { connection figure prototype clone } set connection connection figure connection { current connection = connection } connection figure get connection { current connection } figure get target figure { target figure } set target figure figure target figure { target figure = target figure } figure find connectable figure point2 d p drawing drawing { figure figure drawing get figures front to back { !figure includes get connection figure can connect figure contains p { figure } } } /* connector find connector point2 d p figure f { f find connector p get connection }*/ 	/**	 * finds a connection end figure 	 */	protected connector find connection target point2 d p drawing drawing {		 figure target = find connectable figure p drawing 		if target != target can connect 			 !target includes get owner 			 get connection can connect get owner target {				return target find connector p get connection 		}		return 	}	private connector get start connector {		 point2 d p = get location on drawing 		return get owner find connector p get connection 	}} 