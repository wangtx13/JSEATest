/* xml validation nano xml/ * * $ revision 1 3 $ * $ date 2002/01/04 21 03 29 $ * $ name r e l e a s e 2 2 1 $ * * is part of nano xml 2 * copyright c 2000 2002 marc de scheemaecker all rights reserved * * software is provided 'as is' without any express or implied warranty * in no event will the authors be held liable any damages arising from the * use of software * * permission is granted to anyone to use software any purpose * including commercial applications and to alter it and redistribute it * freely subject to the following restrictions * * 1 the origin of software must not be misrepresented you must not * claim that you wrote the original software you use software in * a product an acknowledgment in the product documentation would be * appreciated but is not required * * 2 altered source versions must be plainly marked as such and must not be * misrepresented as being the original software * * 3 notice may not be removed or altered from any source distribution */package net n3 nanoxml /** * an xml validation is thrown when the xml passed to the xml parser is * well formed but not valid * * @author marc de scheemaecker * @version $ name r e l e a s e 2 2 1 $ $ revision 1 3 $ */public xml validation xml exception{ /** * an element was missing */ m i s s i n g e l e m e n t = 1 /** * an unexpected element was encountered */ u n e x p e c t e d e l e m e n t = 2 /** * an attribute was missing */ m i s s i n g a t t r i b u t e = 3 /** * an unexpected attribute was encountered */ u n e x p e c t e d a t t r i b u t e = 4 /** * an attribute has an invalid value */ a t t r i b u t e w i t h i n v a l v a l u e = 5 /** * a p c d a t a element was missing */ m i s s i n g p c d a t a = 6 /** * an unexpected p c d a t a element was encountered */ u n e x p e c t e d p c d a t a = 7 /** * another than those specified in was encountered */ m i s c e r r o r = 0 /** * which occurred */ type /** * the name of the element where the occurred */ element name /** * the name of the attribute where the occurred */ attribute name /** * the value of the attribute where the occurred */ attribute value /** * creates a * * @param type the type of validity * @param the from where the data came * @param line nr the line number in the xml data where the * occurred * @param element name the name of the offending element * @param attribute name the name of the offending attribute * @param attribute value the value of the offending attribute * @param msg the message of the */ xml validation type line nr element name attribute name attribute value msg { line nr msg + element name == ? element= + element name + attribute name == ? attribute= + attribute name + attribute value == ? value=' + attribute value + ' element name = element name attribute name = attribute name attribute value = attribute value } /** * cleans up the when it's destroyed */ finalize throwable { element name = attribute name = attribute value = finalize } /** * the name of the element in which the validation is violated * there is no current element is */ get element name { element name } /** * the name of the attribute in which the validation is violated * there is no current attribute is */ get attribute name { attribute name } /** * the value of the attribute in which the validation is violated * there is no current attribute is */ get attribute value { attribute value }} 