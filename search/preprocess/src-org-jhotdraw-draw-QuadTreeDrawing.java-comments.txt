/* * @ # quad tree drawing 2 0 2006 01 14 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * ??? */package draw geom quad tree2 d reversed list * geom * * event * * * /** * quad tree drawing uses a quad tree2 d to improve responsiveness of drawings which * contain many figures * * @author werner randelshofer * @version 2 0 2006 01 14 changed to support precision coordinates * <br>1 0 2003 12 01 derived from 5 4b1 */public quad tree drawing drawingimplements figure listener undoable edit listener { list< figure> figures = list< figure> quad tree2 d double< figure> quad tree = quad tree2 d double< figure> needs sorting = /** creates a instance */ quad tree drawing { } index of figure figure { figures index of figure } basic add index figure figure { figures add index figure quad tree add figure figure get draw bounds figure add figure listener figure add undoable edit listener needs sorting = } basic remove figure figure { figures remove figure quad tree remove figure figure remove figure listener figure remove undoable edit listener needs sorting = } draw graphics2 d g { collection< figure> c = quad tree find intersects g get clip bounds get bounds2 d collection< figure> to draw = sort c draw g to draw } /** * note sorting can not be done orphaned figures */ collection< figure> sort collection< figure> c { ensure sorted list< figure> sorted = list< figure> c size figure f figures { c contains f { sorted add f } } sorted } draw graphics2 d g collection< figure> c { figure f c { f draw g } } figure area invalidated figure event e { fire area invalidated e get invalidated area } figure changed figure event e { quad tree remove e get figure quad tree add e get figure e get figure get draw bounds needs sorting = fire area invalidated e get invalidated area } figure added figure event e { } figure removed figure event e { } figure request remove figure event e { remove e get figure } collection< figure> get figures rectangle2 d bounds { quad tree find inside bounds } collection< figure> get figures { collections unmodifiable collection figures } figure find figure inside point2 d p { collection< figure> c = quad tree find contains p figure f get figures front to back { c contains f f contains p { f find figure inside p } } } /** * an iterator to iterate in * z order front to back over the figures */ list< figure> get figures front to back { ensure sorted reversed list< figure> figures } figure find figure point2 d p { collection< figure> c = quad tree find contains p c size { 0 1 { figure f = c iterator next f contains p ? f } { figure f get figures front to back { c contains f f contains p f } } } } figure find figure except point2 d p figure ignore { collection< figure> c = quad tree find contains p c size { 0 { } 1 { figure f = c iterator next f == ignore || ! f contains p ? f } { figure f get figures front to back { f != ignore f contains p f } } } } figure find figure except point2 d p collection ignore { collection< figure> c = quad tree find contains p c size { 0 { } 1 { figure f = c iterator next ! ignore contains f || ! f contains p ? f } { figure f get figures front to back { ! ignore contains f f contains p f } } } } collection< figure> find figures rectangle2 d r { collection< figure> c = quad tree find intersects r c size { 0 fall through 1 c sort c } } collection< figure> find figures within rectangle2 d r { collection< figure> c = find figures r list< figure> result = list< figure> c size figure f c { r contains f get bounds { result add f } } result } bring to front figure figure { figures remove figure { figures add figure needs sorting = fire area invalidated figure get draw bounds } } send to back figure figure { figures remove figure { figures add 0 figure needs sorting = fire area invalidated figure get draw bounds } } /** * we propagate all edit events from our figures to * undoable edit listeners which have registered with us */ undoable edit happened undoable edit event e { fire undoable edit happened e get edit } figure attribute changed figure event e { } contains figure f { figures contains f } /** * ensures that the figures are sorted in z order sequence */ ensure sorted { needs sorting { collections sort figures figure layer comparator i n s t a n c e needs sorting = } }} 