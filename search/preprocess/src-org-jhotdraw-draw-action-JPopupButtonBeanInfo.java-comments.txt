/* * @ # j popup button bean info 1 0 11 november 2003 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * */package draw action beans * j popup button bean info simple bean info { bean descriptor information will be obtained from introspection g e n f i r s t bean descriptor bean descriptor bean descriptor = bean descriptor get bdescriptor { g e n h e a d e r e n d bean descriptor here you can add customizing the bean descriptor bean descriptor == bean descriptor = bean descriptor j popup button bean info bean descriptor set value is container f a l s e bean descriptor set display name j popup button bean descriptor } g e n l a s t bean descriptor properties information will be obtained from introspection g e n f i r s t properties property descriptor properties = property descriptor get pdescriptor { g e n h e a d e r e n d properties here you can add customizing the properties properties } g e n l a s t properties event set information will be obtained from introspection g e n f i r s t events event set descriptor event sets = event set descriptor get edescriptor { g e n h e a d e r e n d events here you can add customizing the event sets event sets } g e n l a s t events information will be obtained from introspection g e n f i r s t descriptor = descriptor get mdescriptor { g e n h e a d e r e n d here you can add customizing the } g e n l a s t image icon color16 = g e n b e g i n icons def image icon color32 = image icon mono16 = image icon mono32 = g e n e n d icons def icon name c16 = g e n b e g i n icons icon name c32 = icon name m16 = icon name m32 = g e n e n d icons property index = 1 g e n b e g i n idx event index = 1 g e n e n d idx g e n f i r s t superclass here you can add customizing the superclass bean info g e n l a s t superclass /** * gets the bean's <code> bean descriptor</code>s * * @return bean descriptor describing the editable * properties of bean may the * information should be obtained by automatic analysis */ bean descriptor get bean descriptor { get bdescriptor } /** * gets the bean's <code> property descriptor</code>s * * @return an of property descriptors describing the editable * properties supported by bean may the * information should be obtained by automatic analysis * <p> * a property is indexed then its entry in the result will * belong to the indexed property descriptor subclass of property descriptor * a client of get property descriptors can use to check * a given property descriptor is an indexed property descriptor */ property descriptor get property descriptors { get pdescriptor } /** * gets the bean's <code> event set descriptor</code>s * * @return an of event set descriptors describing the kinds of * events fired by bean may the information * should be obtained by automatic analysis */ event set descriptor get event set descriptors { get edescriptor } /** * gets the bean's <code> descriptor</code>s * * @return an of descriptors describing the * by bean may the information * should be obtained by automatic analysis */ descriptor get descriptors { get mdescriptor } /** * a bean may have a property that is the property that will * mostly commonly be initially chosen update by human's who are * customizing the bean * @return index of property in the property descriptor * 		returned by get property descriptors * < p>	 1 there is no property */ get property index { property index } /** * a bean may have a event that is the event that will * mostly commonly be used by human's when using the bean * @return index of event in the event set descriptor *		returned by get event set descriptors * < p>	 1 there is no event */ get event index { event index } /** * an image that can be used to * represent the bean in toolboxes toolbars etc icon images * will typically be g i fs but may in future include other formats * <p> * beans aren't required to provide icons and may from * * <p> * there are four possible flavors of icons 16x16 color * 32x32 color 16x16 mono 32x32 mono a bean choses to only * support a single icon we recommend supporting 16x16 color * <p> * we recommend that icons have a transparent background * so they can be rendered onto an existing background * * @param icon kind the kind of icon requested should be * one of the constant values i c o n c o l o r 16x16 i c o n c o l o r 32x32 * i c o n m o n o 16x16 or i c o n m o n o 32x32 * @return an image representing the requested icon may * no suitable icon is available */ image get icon icon kind { icon kind { i c o n c o l o r 16x16 icon name c16 == { icon color16 == icon color16 = load image icon name c16 icon color16 } i c o n c o l o r 32x32 icon name c32 == { icon color32 == icon color32 = load image icon name c32 icon color32 } i c o n m o n o 16x16 icon name m16 == { icon mono16 == icon mono16 = load image icon name m16 icon mono16 } i c o n m o n o 32x32 icon name m32 == { icon mono32 == icon mono32 = load image icon name m32 icon mono32 } } } } 