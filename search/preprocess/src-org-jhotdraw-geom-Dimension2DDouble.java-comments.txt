/* * @ # dimension2 d 1 0 january 14 2006 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * */package geom * geom * /** * dimension2 d * * @author werner randelshofer * @version 1 0 january 14 2006 created */public dimension2 d dimension2 d io serializable { /** * the width dimension negative values can be used * * @serial * @see #get size * @see #set size */ width /** * the height dimension negative values can be used * * @serial * @see #get size * @see #set size */ height /** * creates an instance of <code> dimension2 d double</code> with a width * of zero and a height of zero */ dimension2 d {	this 0 0 } /** * creates an instance of <code> dimension2 d double</code> whose width * and height are the same as the specified dimension * * @param d the specified dimension the * <code>width</code> and * <code>height</code> values */ dimension2 d dimension2 d d {	this d width d height } /** * constructs a <code> dimension2 d double</code> and initializes * it to the specified width and specified height * * @param width the specified width * @param height the specified height */ dimension2 d width height {	this width = width 	this height = height } /** * the width of dimension in precision * @return the width of dimension in precision */ get width {	return width } /** * the height of dimension in precision * @return the height of dimension in precision */ get height {	return height } /** * sets the size of <code> dimension2 d double</code> to * the specified width and height in precision * note that <code>width</code> or <code>height</code> * are larger than <code> m a x v a l u e</code> they will * be reset to <code> m a x v a l u e</code> * * @param width the width the <code> dimension2 d double</code> * @param height the height the <code> dimension2 d double</code> */ set size width height { 	this width = width 	this height = height } /** * gets the size of <code> dimension2 d double</code> * is included completeness to parallel the * <code>get size</code> defined by <code> component</code> * * @return the size of dimension a instance of * <code> dimension2 d double</code> with the same width and height * @see dimension2 d double#set size * @see component#get size * @since j d k1 1 */ dimension2 d get size {	return dimension2 d width height }	 /** * sets the size of <code> dimension2 d double</code> to the specified size * is included completeness to parallel the * <code>set size</code> defined by <code> component</code> * @param d the size <code> dimension2 d double</code> * @see dimension2 d double#get size * @see component#set size * @since j d k1 1 */ set size dimension2 d d {	set size d width d height }	 /** * checks whether two dimension have equal values */ equals obj {	if obj dimension2 d {	 dimension2 d d = dimension2 d obj 	 width == d width height == d height 	}	return } /** * the hash <code> dimension2 d double</code> * * @return a hash <code> dimension2 d double</code> */ hash { sum = width + height to bits sum * sum + 1 /2 + width } /** * a representation of the values of * <code> dimension2 d double</code> object's <code>height</code> and * <code>width</code> fields is intended to be used only * debugging purposes and the content and format of the * may vary between implementations the may be * empty but may not be <code>null</code> * * @return a representation of <code> dimension2 d double</code> * */ to {	return get get name + width= + width + height= + height + }} 