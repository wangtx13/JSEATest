/* xml entity resolver nano xml/ * * $ revision 1 4 $ * $ date 2002/01/04 21 03 29 $ * $ name r e l e a s e 2 2 1 $ * * is part of nano xml 2 * copyright c 2000 2002 marc de scheemaecker all rights reserved * * software is provided 'as is' without any express or implied warranty * in no event will the authors be held liable any damages arising from the * use of software * * permission is granted to anyone to use software any purpose * including commercial applications and to alter it and redistribute it * freely subject to the following restrictions * * 1 the origin of software must not be misrepresented you must not * claim that you wrote the original software you use software in * a product an acknowledgment in the product documentation would be * appreciated but is not required * * 2 altered source versions must be plainly marked as such and must not be * misrepresented as being the original software * * 3 notice may not be removed or altered from any source distribution */package net n3 nanoxml hashtable io reader io reader /** * an xml entity resolver resolves entities * * @author marc de scheemaecker * @version $ name r e l e a s e 2 2 1 $ $ revision 1 4 $ */public xml entity resolver i xml entity resolver{ /** * the entities */ hashtable entities /** * initializes the resolver */ xml entity resolver { entities = hashtable entities put amp #38 entities put #34 entities put apos #39 entities put lt #60 entities put #62 } /** * cleans up the when it's destroyed */ finalize throwable { entities clear entities = finalize } /** * adds an internal entity * * @param name the name of the entity * @param value the value of the entity */ add internal entity name value { ! entities contains key name { entities put name value } } /** * adds an external entity * * @param name the name of the entity * @param the of the entity which may be * @param the of the entity */ add external entity name { ! entities contains key name { entities put name { } } } /** * a reader containing the value of an entity * * @param xml reader the current xml reader * @param name the name of the entity * * @return the reader or the entity could not be resolved */ reader get entity i xml reader xml reader name xml parse { obj = entities get name obj == { } obj { reader obj } { = obj open external entity xml reader 0 1 } } /** * an entity is external * * @param name the name of the entity */ is external entity name { obj = entities get name ! obj } /** * opens an external entity * * @param xml reader the current xml reader * @param the which may be * @param the * * @return the reader or the reader could not be created/opened */ reader open external entity i xml reader xml reader xml parse { parent = xml reader get { xml reader open stream } e { xml parse parent xml reader get line nr could not open external entity + at + } }} 