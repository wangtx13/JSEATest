/* * @ # extension filter 1 2 2006 05 19 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * */package io io * * filechooser * * /** * filters files by their extensions * * @author werner randelshofer * @version 1 2 2006 05 19 append extension added * <br>1 1 2006 04 11 get extensions added * <br>1 0 7 april 2006 created */public extension filter filechooser filter { description hash set< string> extensions extension /** * creates a instance * @param description a human readable description * @param extension the filename extension will be converted to * lower by */ extension filter description extension { description = description extensions = hash set< string> extensions add extension to lower extension = extension } /** * creates a instance * @param description a human readable description * @param extensions the filename extensions these will be converted to * lower by */ extension filter description extensions { description = description extensions = hash set< string> extlc = extensions length i=0 i < extlc length i++ { extlc i = extensions i to lower } extensions add all arrays as list extlc extension = extensions 0 } /** * an unmodifiable set with the filename extensions * all extensions are lower */ set< string> get extensions { collections unmodifiable set extensions } accept pathname { pathname is directory { } { name = pathname get name p = name last index of ' ' p == 1 || p == name length 1 { extensions contains } { extensions contains name substring p + 1 to lower } } } /** * appends the extension to the filename in it is missing */ make acceptable pathname { accept pathname { pathname } { pathname get path +' '+default extension } } get description { description } } 