/* * @ # quad tree2 d 1 0 2006 01 14 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * ??? */package geom geom * * * /** * quad tree2 d * * @author werner randelshofer * @version 1 0 2006 01 14 derived from quad tree */public quad tree2 d double< t> { hash map< t rectangle2 d double> outside = hash map< t rectangle2 d double> quad node root max capacity = 32 min size = 32 max outside = 32 /** creates a instance */ quad tree2 d { root = quad node rectangle2 d 0 0 800 600 } quad tree2 d rectangle2 d bounds { root = quad node bounds } add t o rectangle2 d bounds { root bounds contains bounds { root add o rectangle2 d bounds clone } { outside put o rectangle2 d bounds clone outside size > max outside { reorganize } } } reorganize { root join outside put all root root clear iterator< map entry< t rectangle2 d double>> i = outside entry set iterator map entry< t rectangle2 d double> entry = i next rectangle2 d tree bounds = rectangle2 d entry get value clone i has next { entry = i next rectangle2 d bounds = entry get value tree bounds add bounds } root bounds = tree bounds i = outside entry set iterator i has next { entry = i next root add entry get key entry get value } outside clear } remove t o { outside remove o root remove o } collection< t> find contains point2 d p { hash set< t> result = hash set< t> root find contains p result map entry< t rectangle2 d double> entry outside entry set { entry get value contains p { result add entry get key } } result } collection< t> find intersects rectangle2 d r { find intersects rectangle2 d r get x r get y r get width r get height } collection< t> find intersects rectangle2 d r { hash set< t> result = hash set< t> root find intersects r result map entry< t rectangle2 d double> entry outside entry set { entry get value intersects r { result add entry get key } } result } collection< t> find inside rectangle2 d r { hash set< t> result = hash set< t> root find inside r result map entry< t rectangle2 d double> entry outside entry set { r contains entry get value { result add entry get key } } result } quad node { rectangle2 d bounds /** * we store an into map 1 the bounds of the * contain our bounds or 2 we are a leaf * * key = * value = rectangle2 d */ hash map< t rectangle2 d double> quad node north east quad node north west quad node south east quad node south west quad node rectangle2 d bounds { bounds = bounds = hash map< t rectangle2 d double> } is leaf { north east == } remove t o { remove o == ! is leaf { north east remove o north west remove o south east remove o south west remove o } } add t o rectangle2 d o bounds { we have to split? is leaf size >= max capacity bounds width > min size bounds height > min size { split } is leaf || o bounds contains bounds { we put an into our hashtable we are a leaf or the bounds of the contain our bounds put o o bounds } { north east bounds intersects o bounds { north east add o o bounds } north west bounds intersects o bounds { north west add o o bounds } south east bounds intersects o bounds { south east add o o bounds } south west bounds intersects o bounds { south west add o o bounds } } } split { is leaf { hw = bounds width / 2 hh = bounds height / 2 north west = quad node rectangle2 d bounds x bounds y hw hh north east = quad node rectangle2 d bounds x + hw bounds y bounds width hw hh south west = quad node rectangle2 d bounds x bounds y + hh hw bounds height hh south east = quad node rectangle2 d bounds x + hw bounds y + hh bounds width hw bounds height hh hash map< t rectangle2 d double> temp = = hash map< t rectangle2 d double> map entry< t rectangle2 d double> entry temp entry set { add entry get key entry get value } } } join { ! is leaf { north west join north east join south west join south east join put all north west put all north east put all south west put all south east north west = north east = south west = south east = } } find contains point2 d p hash set< t> result { bounds contains p { map entry< t rectangle2 d double> entry entry set { entry get value contains p { result add entry get key } } ! is leaf { north west find contains p result north east find contains p result south west find contains p result south east find contains p result } } } find intersects rectangle2 d r hash set< t> result { bounds intersects r { old size = result size map entry< t rectangle2 d double> entry entry set { entry get value intersects r { result add entry get key } } ! is leaf { north west find intersects r result north east find intersects r result south west find intersects r result south east find intersects r result } } } find inside rectangle2 d r hash set< t> result { bounds intersects r { map entry< t rectangle2 d double> entry entry set { r contains entry get value { result add entry get key } } ! is leaf { north west find inside r result north east find inside r result south west find inside r result south east find inside r result } } } }} 