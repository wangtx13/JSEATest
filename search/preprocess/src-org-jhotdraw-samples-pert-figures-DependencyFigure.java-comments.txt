/* * @ # dependency figure 1 0 18 juni 2006 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * */package samples pert figures * samples * beans * draw attribute keys * draw * xml * /** * dependency figure * * @author werner randelshofer * @version 1 0 18 juni 2006 created */public dependency figure line connection figure { /** creates a instance */ dependency figure { s t r o k e c o l o r set color 0x000099 s t r o k e w t h set 1d e n d d e c o r a t i o n set arrow tip set attribute enabled e n d d e c o r a t i o n set attribute enabled s t a r t d e c o r a t i o n set attribute enabled s t r o k e d a s h e s set attribute enabled f o n t i t a l i c set attribute enabled f o n t u n d e r l i n e d } /** * checks two figures can be connected implement * to constrain the allowed connections between figures */ can connect figure start figure end { start task figure end task figure { task figure sf = task figure start task figure ef = task figure end disallow multiple connections to same dependent ef get predecessors contains sf { } disallow cyclic connections ! sf is dependent of ef } } can connect figure start { start task figure } /** * handles the disconnection of a connection * override to handle event */ handle disconnect figure start figure end { task figure sf = task figure start task figure ef = task figure end sf remove dependency ef remove dependency } /** * handles the connection of a connection * override to handle event */ handle connect figure start figure end { task figure sf = task figure start task figure ef = task figure end sf add dependency ef add dependency } dependency figure clone { dependency figure that = dependency figure clone that } get layer { 1 } @ override remove notify drawing d { get start figure != { task figure get start figure remove dependency } get end figure != { task figure get end figure remove dependency } remove notify d }} 