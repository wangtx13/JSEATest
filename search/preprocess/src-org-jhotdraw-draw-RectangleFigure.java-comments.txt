/* * @ # rectangle figure 2 2 2006 03 23 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * ??? */package draw * geom * io * * draw attribute keys * geom geom /** * rectangle figure * * @author werner randelshofer * @version 2 2 2006 03 23 take stroke size into account in contains * <br>2 1 2006 03 22 get figure draw bounds added * <br>2 0 2006 01 14 changed to support coordinates * <br>1 0 2003 12 01 derived from 5 4b1 */public rectangle figure attributed figure { rectangle2 d rectangle /** creates a instance */ rectangle figure { 0 0 0 0 } rectangle figure x y width height { rectangle = rectangle2 d x y width height /* f i l l c o l o r set color white s t r o k e c o l o r set color black */ } d r a w i n g s h a p e a n d b o u n d s a t t r i b u t e s e d i t i n g c o n n e c t i n g c o m p o s i t e f i g u r e s c l o n i n g e v e n t h a n d l i n g rectangle2 d get bounds { rectangle2 d bounds = rectangle2 d rectangle clone bounds } draw fill graphics2 d g { rectangle2 d r = rectangle2 d rectangle clone grow = attribute keys get perpendicular fill growth geom grow r grow grow g fill r } draw stroke graphics2 d g { rectangle2 d r = rectangle2 d rectangle clone grow = attribute keys get perpendicular draw growth geom grow r grow grow g draw r } rectangle2 d get figure draw bounds { rectangle2 d r = rectangle2 d rectangle clone grow = attribute keys get perpendicular hit growth + 1d geom grow r grow grow r } /** * checks a point2 d is inside the figure */ contains point2 d p { rectangle2 d r = rectangle2 d rectangle clone grow = attribute keys get perpendicular hit growth + 1d geom grow r grow grow r contains p } basic set bounds point2 d anchor point2 d { rectangle x = math min anchor x x rectangle y = math min anchor y y rectangle width = math max 0 1 math abs x anchor x rectangle height = math max 0 1 math abs y anchor y } /** * moves the figure to a location * @param tx the transformation matrix */ basic transform affine transform tx { point2 d anchor = get start point point2 d = get end point basic set bounds point2 d tx transform anchor anchor point2 d tx transform } rectangle figure clone { rectangle figure that = rectangle figure clone that rectangle = rectangle2 d rectangle clone that } restore to geometry { rectangle2 d r = rectangle2 d geometry rectangle x = r x rectangle y = r y rectangle width = r width rectangle height = r height } get restore data { rectangle clone } } 