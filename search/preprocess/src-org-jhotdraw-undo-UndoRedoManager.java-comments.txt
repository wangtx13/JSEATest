/* * @ # undo redo manager 1 3 1 2006 04 12 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * */package undo event * beans * * event * undo * * * /** * same as undo manager but provides actions undo and * redo operations * * @author werner randelshofer * @version 1 3 1 2006 04 12 set locale added * <br>1 3 2006 02 28 support property change listener added * <br>1 2 2 2006 02 25 configure actions from resource bundle * <br>1 2 1 2003 11 02 adapted to changes in resource bundle * <br>1 2 2003 03 16 texts and accelerator keys are now read from a * resource bundle * <br>1 1 2 2003 03 12 actions use now key stroke instead of * as accelerator keys * <br>1 1 1 2002 05 10 add edit is now smarter when * determining whether an edit is significant * <br>1 1 2002 04 08 has significant edits/clear changed added * <br>1 0 2001 10 09 */public undo redo manager undo manager { undo undo manager { property change support property support = property change support d e b u g = /** * the resource bundle used internationalisation */ resource bundle labels /** * flag is set to when at * least one significant undoable edit * has been added to the manager since the * last call to discard all edits */ has significant edits = /** * flag is set to when an undo or redo * operation is in progress the undo redo manager * ignores all incoming undoable edit events * flag is */ undo or redo in progress /** * sending undoable edit event to the undo redo manager * disables the undo and redo functions of the manager */ undoable edit d i s c a r d a l l e d i t s = undoable edit { can undo { } can redo { } } /** * undo action use in a menu bar */ undo action action { undo action { labels configure action undo set enabled } /** * invoked when an action occurs */ action performed action event evt { { undo } cannot undo e { err cannot undo +e e print stack trace } } } /** * redo action use in a menu bar */ redo action action { redo action { labels configure action redo set enabled } /** * invoked when an action occurs */ action performed action event evt { { redo } cannot redo e { out cannot redo +e } } } /** the undo action instance */ undo action undo action /** the redo action instance */ redo action redo action resource bundle get labels { labels == { labels = resource bundle get l a f bundle undo labels } labels } /** creates undo redo manager */ undo redo manager { get labels undo action = undo action redo action = redo action } set locale locale l { labels = resource bundle get l a f bundle undo labels l } /** * discards all edits */ discard all edits { discard all edits update actions set has significant edits } set has significant edits value { old value = has significant edits has significant edits = value fire property change has significant edits old value value } /** * at least one significant undoable edit * has been added since the last call to discard all edits */ has significant edits { has significant edits } /** * in progress inserts an edit at index of next add and removes * any old edits that were at index of next add or later the die * is called on each edit that is removed is sent in the * reverse of the order the edits were added updates * index of next add * * <p> not in progress acts as a compound edit</p> * * <p> regardless of in progress undo or redo in progress * calls die on each edit that is sent </p> * * * @see compound edit#end * @see compound edit#add edit */ add edit undoable edit an edit { d e b u g out undo redo manager add +an edit undo or redo in progress { an edit die } success = add edit an edit update actions success an edit is significant edit to be undone == an edit { set has significant edits } success } /** * gets the undo action use as an undo menu item */ action get undo action { undo action } /** * gets the redo action use as a redo menu item */ action get redo action { redo action } /** * updates the properties of the undo action * and of the redo action */ update actions { label d e b u g out undo manager update actions + edit to be undone + can undo= +can undo + can redo= +can redo can undo { undo action set enabled label = get undo presentation name } { undo action set enabled label = labels get undo } undo action put value action n a m e label undo action put value action s h o r t d e s c r i p t i o n label can redo { redo action set enabled label = get redo presentation name } { redo action set enabled label = labels get redo } redo action put value action n a m e label redo action put value action s h o r t d e s c r i p t i o n label } /** * undoes the last edit event * the undo redo manager ignores all incoming undoable edit events * undo is in progress */ undo cannot undo { undo or redo in progress = { undo } { undo or redo in progress = update actions } } /** * redoes the last undone edit event * the undo redo manager ignores all incoming undoable edit events * redo is in progress */ redo cannot undo { undo or redo in progress = { redo } { undo or redo in progress = update actions } } /** * undoes or redoes the last edit event * the undo redo manager ignores all incoming undoable edit events * undo or redo is in progress */ undo or redo cannot undo cannot redo { undo or redo in progress = { undo or redo } { undo or redo in progress = update actions } } add property change listener property change listener listener { property support add property change listener listener } add property change listener property name property change listener listener { property support add property change listener property name listener } remove property change listener property change listener listener { property support remove property change listener listener } remove property change listener property name property change listener listener { property support remove property change listener property name listener } fire property change property name old value value { property support fire property change property name old value value } fire property change property name old value value { property support fire property change property name old value value } fire property change property name old value value { property support fire property change property name old value value }} 