/* * @ # composite model 1 1 2006 06 20 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * */package undo undo * * /** * is basically the same like undo compound edit but * it has a slightly different behaviour * the compound edit ends when it is added to itself way it * can be fired two times to an undo manager the first time when * a sequence of compuondable edits starts end the last time when * the sequence is over * <p> * example * <pre> * fire composite edit at start of sequence * composite edit ce = composite edit * fire undoable edit event ce * * fire edits which shall compounded here * * fire composite edit at end of sequence again to end it * fire undoable edit event ce * </pre> * * @author werner randelshofer * @version 1 1 2006 06 20 set significant added * <br>1 0 2001 01 01 created */public composite edit compound edit { presentation name is significant is verbose set verbose b { is verbose = b } /** * creates composite edit * which uses compound edit get presentatio name * * @see undo compound edit#get presentation name */ composite edit { is significant = } /** * creates composite edit * which uses compound edit get presentatio name * * @see undo compound edit#get presentation name */ composite edit is significant { is significant = is significant } /** * creates composite edit * which uses the given presentation name * the presentation name is then compound edit get presentatio name * is used * @see undo compound edit#get presentation name */ composite edit presentation name { presentation name = presentation name is significant = } /** * creates composite edit * which uses the given presentation name * the presentation name is then compound edit get presentatio name * is used * @see undo compound edit#get presentation name */ composite edit presentation name is significant { presentation name = presentation name is significant = is significant } /** * the presentation name * the presentation name is then compound edit get presentatio name * is * @see undo compound edit#get presentation name */ get presentation name { presentation name != ? presentation name get presentation name } /** * the undo presentation name * the presentation name is then compound edit get undo presentation name * is * @see undo compound edit#get undo presentation name */ get undo presentation name { presentation name != ? undo redo manager get labels get undo + +presentation name get undo presentation name } /** * the redo presentation name * the presentation name is then compound edit get redo presentation name * is * @see undo compound edit#get redo presentation name */ get redo presentation name { presentation name != ? undo redo manager get labels get redo + +presentation name get redo presentation name } /** * edit is in progress accepts an edit and * * * <p> the last edit added to composite edit is given a * chance to add edit an edit it refuses an edit is * given a chance to replace edit the last edit an edit * here it is added to edits </p> * * <p> the composite edit is added to itself then end * is called and is </p> */ add edit undoable edit an edit { an edit == { end } is in progress an edit composite edit { } { add edit an edit } } /** * edit is insignificant example one * that maintains the user's selection but does not change * any model state */ is significant { is significant ? is significant is significant } set significant value { is significant = value }} 