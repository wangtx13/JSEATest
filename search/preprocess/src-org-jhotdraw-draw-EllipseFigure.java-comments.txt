/* * @ # ellipse figure 2 3 2006 06 17 * * copyright c 1996 2006 by the original authors of * and all its contributors * all rights reserved * * software is the confidential and proprietary information of * confidential information you shall not disclose * such confidential information and shall use it only in accordance * with the terms of the license agreement you entered into with * ??? */package draw geom geom * * geom * draw attribute keys * /** * ellipse figure * * @author werner randelshofer * @version 2 3 2006 06 17 added chop point2 d * <br>2 2 2006 05 19 support stroke placement added * <br>2 1 2006 03 22 get figure draw bounds added * <br>2 0 2006 01 14 changed to support coordinates * <br>1 0 2003 12 01 derived from 5 4b1 */public ellipse figure attributed figure { ellipse2 d ellipse /** creates a instance */ ellipse figure { 0 0 0 0 } ellipse figure x y width height { ellipse = ellipse2 d x y width height /* set fill color color white set stroke color color black */ set attribute enabled t e x t c o l o r } d r a w i n g s h a p e a n d b o u n d s a t t r i b u t e s e d i t i n g c o n n e c t i n g connector find connector point2 d p connection figure prototype { chop ellipse connector } connector find compatible connector connector c is start connector { chop ellipse connector } c o m p o s i t e f i g u r e s c l o n i n g e v e n t h a n d l i n g rectangle2 d get bounds { rectangle2 d ellipse get bounds2 d } rectangle2 d get figure draw bounds { rectangle2 d r = rectangle2 d ellipse get bounds2 d grow = attribute keys get perpendicular hit growth geom grow r grow grow r } draw fill graphics2 d g { ellipse2 d r = ellipse2 d ellipse clone grow = attribute keys get perpendicular fill growth r x = grow r y = grow r width += grow * 2 r height += grow * 2 r width > 0 r height > 0 { g fill r } } draw stroke graphics2 d g { ellipse2 d r = ellipse2 d ellipse clone grow = attribute keys get perpendicular draw growth r x = grow r y = grow r width += grow * 2 r height += grow * 2 r width > 0 r height > 0 { g draw r } } /** * checks a point2 d is inside the figure */ contains point2 d p { ellipse2 d r = ellipse2 d ellipse clone grow = attribute keys get perpendicular hit growth r x = grow r y = grow r width += grow * 2 r height += grow * 2 r contains p } basic set bounds point2 d anchor point2 d { ellipse x = math min anchor x x ellipse y = math min anchor y y ellipse width = math max 0 1 math abs x anchor x ellipse height = math max 0 1 math abs y anchor y } /** * transforms the figure * * @param tx the transformation */ basic transform affine transform tx { point2 d anchor = get start point point2 d = get end point basic set bounds point2 d tx transform anchor anchor point2 d tx transform } ellipse figure clone { ellipse figure that = ellipse figure clone that ellipse = ellipse2 d ellipse clone that } restore to geometry { ellipse2 d r = ellipse2 d geometry ellipse x = r x ellipse y = r y ellipse width = r width ellipse height = r height } get restore data { ellipse clone } } 